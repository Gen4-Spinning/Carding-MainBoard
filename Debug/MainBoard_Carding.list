
MainBoard_Carding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08011e60  08011e60  00021e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124dc  080124dc  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080124dc  080124dc  000224dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124e4  080124e4  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124e4  080124e4  000224e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124e8  080124e8  000224e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080124ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  200001e4  080126d0  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  080126d0  00031304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e6ca  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000611a  00000000  00000000  0005e8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  000649f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b58  00000000  00000000  00066848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289af  00000000  00000000  000683a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fa69  00000000  00000000  00090d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d71d7  00000000  00000000  000c07b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019798f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009058  00000000  00000000  001979e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011e48 	.word	0x08011e48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	08011e48 	.word	0x08011e48

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <reset_ACKs>:

#include "Ack.h"
#include "main.h"
#include "string.h"

void reset_ACKs(void){
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
 ack.motorAcksCheck = 0;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <reset_ACKs+0x28>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
 ack.motorAcksRecvd = 0;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <reset_ACKs+0x28>)
 8001074:	2200      	movs	r2, #0
 8001076:	805a      	strh	r2, [r3, #2]
 ack.ackResult = 0;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <reset_ACKs+0x28>)
 800107a:	2200      	movs	r2, #0
 800107c:	719a      	strb	r2, [r3, #6]
 ack.ackChkType = 0;
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <reset_ACKs+0x28>)
 8001080:	2200      	movs	r2, #0
 8001082:	711a      	strb	r2, [r3, #4]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000072c 	.word	0x2000072c

08001094 <ACK_startCheck>:

//starts the timer that overflows by which time the acks should have come.
// also sets whether the ack failing should stop the smps or not, and what motors the ack is expected to come from.
void ACK_startCheck(uint16_t ackCheck,char ackForWhat, uint8_t ackType){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
 800109e:	460b      	mov	r3, r1
 80010a0:	717b      	strb	r3, [r7, #5]
 80010a2:	4613      	mov	r3, r2
 80010a4:	713b      	strb	r3, [r7, #4]
	ack.motorAcksCheck = ackCheck;
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <ACK_startCheck+0x50>)
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	8013      	strh	r3, [r2, #0]
	ack.waitingForAckResult = 1;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <ACK_startCheck+0x50>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	715a      	strb	r2, [r3, #5]
	ack.ackChkType = ackType;
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <ACK_startCheck+0x50>)
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	7113      	strb	r3, [r2, #4]
	ack.ackForWhat = ackForWhat;
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <ACK_startCheck+0x50>)
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	71d3      	strb	r3, [r2, #7]

	__HAL_TIM_SET_COUNTER(&htim17,0);
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <ACK_startCheck+0x54>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
	htim17.Instance->SR &= ~TIM_SR_UIF; // Clear pending flag of timer15
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <ACK_startCheck+0x54>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <ACK_startCheck+0x54>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim17); // start the 8ms tim17;
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <ACK_startCheck+0x54>)
 80010d8:	f009 f8d6 	bl	800a288 <HAL_TIM_Base_Start_IT>
	//tim17 priority has to be much lower than CAN priority- ive kept 1 and 5

}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000072c 	.word	0x2000072c
 80010e8:	200003f4 	.word	0x200003f4

080010ec <InitializeDiagnostic_TypeDef>:

#include "Struct.h"
#include "CommonConstants.h"
#include "BT_Machine.h"

void InitializeDiagnostic_TypeDef(DiagnosticsTypeDef *d){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	d->motorID = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	705a      	strb	r2, [r3, #1]
	d->targetDuty=0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
	d->runTime = 0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	819a      	strh	r2, [r3, #12]
	d->typeofTest = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	d->direction = BT_DEFAULT_DIR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	741a      	strb	r2, [r3, #16]
	d->bedDist = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	825a      	strh	r2, [r3, #18]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <InitializeRunTime_TypeDef>:


void InitializeRunTime_TypeDef(void){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
	for (int i=0;i<6;i++){
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	e070      	b.n	8001212 <InitializeRunTime_TypeDef+0xee>
		R[i].targetRPM = 0;
 8001130:	4a3d      	ldr	r2, [pc, #244]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	212c      	movs	r1, #44	; 0x2c
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	4413      	add	r3, r2
 800113c:	330c      	adds	r3, #12
 800113e:	2200      	movs	r2, #0
 8001140:	801a      	strh	r2, [r3, #0]
		R[i].presentRPM = 0;
 8001142:	4a39      	ldr	r2, [pc, #228]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	212c      	movs	r1, #44	; 0x2c
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	4413      	add	r3, r2
 800114e:	330e      	adds	r3, #14
 8001150:	2200      	movs	r2, #0
 8001152:	801a      	strh	r2, [r3, #0]
		R[i].pwm = 0;
 8001154:	4a34      	ldr	r2, [pc, #208]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	212c      	movs	r1, #44	; 0x2c
 800115a:	fb01 f303 	mul.w	r3, r1, r3
 800115e:	4413      	add	r3, r2
 8001160:	3310      	adds	r3, #16
 8001162:	2200      	movs	r2, #0
 8001164:	801a      	strh	r2, [r3, #0]
		R[i].mosfetTemp = 0;
 8001166:	4a30      	ldr	r2, [pc, #192]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	212c      	movs	r1, #44	; 0x2c
 800116c:	fb01 f303 	mul.w	r3, r1, r3
 8001170:	4413      	add	r3, r2
 8001172:	3312      	adds	r3, #18
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
		R[i].motorTemp = 0;
 8001178:	4a2b      	ldr	r2, [pc, #172]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	212c      	movs	r1, #44	; 0x2c
 800117e:	fb01 f303 	mul.w	r3, r1, r3
 8001182:	4413      	add	r3, r2
 8001184:	3313      	adds	r3, #19
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
		R[i].currentRaw = 0;
 800118a:	4a27      	ldr	r2, [pc, #156]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	212c      	movs	r1, #44	; 0x2c
 8001190:	fb01 f303 	mul.w	r3, r1, r3
 8001194:	4413      	add	r3, r2
 8001196:	3314      	adds	r3, #20
 8001198:	2200      	movs	r2, #0
 800119a:	801a      	strh	r2, [r3, #0]
		R[i].voltageRaw = 0;
 800119c:	4a22      	ldr	r2, [pc, #136]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	212c      	movs	r1, #44	; 0x2c
 80011a2:	fb01 f303 	mul.w	r3, r1, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	3316      	adds	r3, #22
 80011aa:	2200      	movs	r2, #0
 80011ac:	801a      	strh	r2, [r3, #0]
		R[i].currentA = 0;
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	212c      	movs	r1, #44	; 0x2c
 80011b4:	fb01 f303 	mul.w	r3, r1, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	3318      	adds	r3, #24
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
		R[i].voltageV = 0;
 80011c2:	4a19      	ldr	r2, [pc, #100]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	212c      	movs	r1, #44	; 0x2c
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	331c      	adds	r3, #28
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
		R[i].proportionalTerm = 0;
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	212c      	movs	r1, #44	; 0x2c
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	3320      	adds	r3, #32
 80011e4:	2200      	movs	r2, #0
 80011e6:	801a      	strh	r2, [r3, #0]
		R[i].integralTerm = 0;
 80011e8:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	212c      	movs	r1, #44	; 0x2c
 80011ee:	fb01 f303 	mul.w	r3, r1, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	3322      	adds	r3, #34	; 0x22
 80011f6:	2200      	movs	r2, #0
 80011f8:	801a      	strh	r2, [r3, #0]
		R[i].feedForwardTerm = 0;
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <InitializeRunTime_TypeDef+0x104>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	212c      	movs	r1, #44	; 0x2c
 8001200:	fb01 f303 	mul.w	r3, r1, r3
 8001204:	4413      	add	r3, r2
 8001206:	3324      	adds	r3, #36	; 0x24
 8001208:	2200      	movs	r2, #0
 800120a:	801a      	strh	r2, [r3, #0]
	for (int i=0;i<6;i++){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3301      	adds	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b05      	cmp	r3, #5
 8001216:	dd8b      	ble.n	8001130 <InitializeRunTime_TypeDef+0xc>
	}
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2000076c 	.word	0x2000076c

0800122c <InitializeState_TypeDef>:
#define STATEMACHINE_C_

#include "StateMachine.h"
#include "BT_Fns.h"

void InitializeState_TypeDef(StateTypeDef *s){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	s->current_state = IDLE_STATE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2202      	movs	r2, #2
 8001238:	705a      	strb	r2, [r3, #1]
	s->prev_state = INITIAL_STATE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	709a      	strb	r2, [r3, #2]

	s->idleMode  = 0;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	711a      	strb	r2, [r3, #4]
	s->oneTime = 0;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]

	s->BT_paired = 0;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	751a      	strb	r2, [r3, #20]
	s->BT_dataOK = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	719a      	strb	r2, [r3, #6]
	s->BT_pauseReason = 0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	745a      	strb	r2, [r3, #17]
	s->BT_runInfoToSend = RUN_PRODUCTION_DATA;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	220a      	movs	r2, #10
 8001262:	749a      	strb	r2, [r3, #18]
	s->BT_runInfowhichMotor = 0;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	74da      	strb	r2, [r3, #19]
	s->runMode = 0;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	715a      	strb	r2, [r3, #5]

	s->SMPS_switchOff = 0;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	765a      	strb	r2, [r3, #25]
	s->SMPS_OK_signal = 0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	75da      	strb	r2, [r3, #23]
	s->SMPS_cntrl = 0;;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	761a      	strb	r2, [r3, #24]

}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <ChangeState>:

void ChangeState(StateTypeDef *s, uint8_t newState){
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	70fb      	strb	r3, [r7, #3]
	s->prev_state = s->current_state;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	785a      	ldrb	r2, [r3, #1]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	709a      	strb	r2, [r3, #2]
	s->current_state = newState;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	78fa      	ldrb	r2, [r7, #3]
 80012a6:	705a      	strb	r2, [r3, #1]
	s->oneTime = 1;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_TIM_PeriodElapsedCallback>:

uint8_t stopSMPS = 0;
uint8_t timer7Count = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  if(htim==&htim17){	// ACK TIMER - 15ms
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a47      	ldr	r2, [pc, #284]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d126      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x5e>
	ack.waitingForAckResult = 0;
 80012cc:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	715a      	strb	r2, [r3, #5]
	if (ack.motorAcksCheck == ack.motorAcksRecvd){
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012d4:	881a      	ldrh	r2, [r3, #0]
 80012d6:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012d8:	885b      	ldrh	r3, [r3, #2]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d103      	bne.n	80012e6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		ack.ackResult = ACK_SUCCESS;
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	719a      	strb	r2, [r3, #6]
 80012e4:	e016      	b.n	8001314 <HAL_TIM_PeriodElapsedCallback+0x58>
	}else{
		ack.ackResult = ACK_FAIL;
 80012e6:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	719a      	strb	r2, [r3, #6]
		if (ack.ackChkType == CRITICAL_ACK){
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10f      	bne.n	8001314 <HAL_TIM_PeriodElapsedCallback+0x58>
			ME.ErrorFlag = 1;
 80012f4:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x130>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
			ME_addErrors(&ME,ERR_SYSTEM_LEVEL_SOURCE, SYS_ACK_ERROR, ERROR_SOURCE_SYSTEM, ack.ackForWhat); // maybe later find out which ACK failed.
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80012fc:	79db      	ldrb	r3, [r3, #7]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	230e      	movs	r3, #14
 8001304:	2261      	movs	r2, #97	; 0x61
 8001306:	2102      	movs	r1, #2
 8001308:	4838      	ldr	r0, [pc, #224]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x130>)
 800130a:	f004 fa4c 	bl	80057a6 <ME_addErrors>
			S.SMPS_switchOff = 1;
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001310:	2201      	movs	r2, #1
 8001312:	765a      	strb	r2, [r3, #25]
		}
	}
	HAL_TIM_Base_Stop_IT(&htim17);
 8001314:	4833      	ldr	r0, [pc, #204]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001316:	f009 f821 	bl	800a35c <HAL_TIM_Base_Stop_IT>
  }

  if (htim == &htim16){ // 1 sec timer that checks if the CAN connections are all OK.
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d11d      	bne.n	800135e <HAL_TIM_PeriodElapsedCallback+0xa2>
	  SO.canOverallStatus = SO_checkCanObservers(&SO);
 8001322:	4835      	ldr	r0, [pc, #212]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001324:	f00b ffc8 	bl	800d2b8 <SO_checkCanObservers>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b32      	ldr	r3, [pc, #200]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800132e:	729a      	strb	r2, [r3, #10]
	  if (SO.canOverallStatus != ALL_CANS_HEALTHY){
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001332:	7a9b      	ldrb	r3, [r3, #10]
 8001334:	2b63      	cmp	r3, #99	; 0x63
 8001336:	d012      	beq.n	800135e <HAL_TIM_PeriodElapsedCallback+0xa2>
		  ME.ErrorFlag = 1;
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x130>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		  ME_addErrors(&ME,ERR_SYSTEM_LEVEL_SOURCE,SYS_CAN_CUT_ERROR, SO.canOverallStatus, 0); // maybe later find out which ACK failed.
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001340:	7a9b      	ldrb	r3, [r3, #10]
 8001342:	b29b      	uxth	r3, r3
 8001344:	2200      	movs	r2, #0
 8001346:	9200      	str	r2, [sp, #0]
 8001348:	2262      	movs	r2, #98	; 0x62
 800134a:	2102      	movs	r1, #2
 800134c:	4827      	ldr	r0, [pc, #156]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x130>)
 800134e:	f004 fa2a 	bl	80057a6 <ME_addErrors>
		  S.SMPS_switchOff = 1;
 8001352:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001354:	2201      	movs	r2, #1
 8001356:	765a      	strb	r2, [r3, #25]
		  //stp the timer if you find you have an error.
		  HAL_TIM_Base_Stop_IT(&htim16);
 8001358:	4826      	ldr	r0, [pc, #152]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800135a:	f008 ffff 	bl	800a35c <HAL_TIM_Base_Stop_IT>
	  }
  }

  if(htim==&htim15){
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d111      	bne.n	800138a <HAL_TIM_PeriodElapsedCallback+0xce>
	  // This is meant to send motor run time data to the app when diag is running.
	  // here all motors run only 1 at a time
	  if (D.motorID <= 6){
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	2b06      	cmp	r3, #6
 800136c:	d80d      	bhi.n	800138a <HAL_TIM_PeriodElapsedCallback+0xce>
		  uint8_t packetSize = BT_MC_generateDiagnosticMsg(D.motorID);
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fed2 	bl	800411c <BT_MC_generateDiagnosticMsg>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
		  HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,packetSize);
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4920      	ldr	r1, [pc, #128]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001384:	4820      	ldr	r0, [pc, #128]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001386:	f009 fcfd 	bl	800ad84 <HAL_UART_Transmit_IT>
	  }
  }


  if(htim == &htim7){ //100ms timer for state sending to BT
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a1f      	ldr	r2, [pc, #124]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d124      	bne.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x120>
	  timer7Count ++;
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800139c:	701a      	strb	r2, [r3, #0]
	  if (timer7Count % 5 == 0){
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80013a4:	fba3 1302 	umull	r1, r3, r3, r2
 80013a8:	0899      	lsrs	r1, r3, #2
 80013aa:	460b      	mov	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <HAL_TIM_PeriodElapsedCallback+0x102>
		  S.BT_sendState = 1;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	741a      	strb	r2, [r3, #16]
	  }
	  if (timer7Count == 10){
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b0a      	cmp	r3, #10
 80013c4:	d10a      	bne.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x120>
		  S.oneSecTimer++;
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013ce:	60d3      	str	r3, [r2, #12]
		  timer7Count = 0;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
		  Toggle_State_LEDs(&S);
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013d8:	f003 fff2 	bl	80053c0 <Toggle_State_LEDs>
	  }
  }

}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200003f4 	.word	0x200003f4
 80013e8:	2000072c 	.word	0x2000072c
 80013ec:	20000684 	.word	0x20000684
 80013f0:	20000738 	.word	0x20000738
 80013f4:	200003a8 	.word	0x200003a8
 80013f8:	20000874 	.word	0x20000874
 80013fc:	2000035c 	.word	0x2000035c
 8001400:	20000754 	.word	0x20000754
 8001404:	2000099c 	.word	0x2000099c
 8001408:	20000440 	.word	0x20000440
 800140c:	20000310 	.word	0x20000310
 8001410:	20001234 	.word	0x20001234
 8001414:	cccccccd 	.word	0xcccccccd

08001418 <HAL_GPIO_EXTI_Callback>:


uint8_t sensorTrigger;
uint8_t sensorVal;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af02      	add	r7, sp, #8
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);

	if (GPIO_Pin == INT_B_Pin){
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001428:	d108      	bne.n	800143c <HAL_GPIO_EXTI_Callback+0x24>
		sensorTrigger = Sensor_whichTriggered(&hmcp,&mcp_portB_sensorVal);
 800142a:	492c      	ldr	r1, [pc, #176]	; (80014dc <HAL_GPIO_EXTI_Callback+0xc4>)
 800142c:	482c      	ldr	r0, [pc, #176]	; (80014e0 <HAL_GPIO_EXTI_Callback+0xc8>)
 800142e:	f004 fa0b 	bl	8005848 <Sensor_whichTriggered>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001438:	701a      	strb	r2, [r3, #0]
			  usrBtns.yellowBtn = usrBtns.initialState;
		  }else{
			  usrBtns.rotarySwitch = usrBtns.initialState;
		  }
	}
}
 800143a:	e04a      	b.n	80014d2 <HAL_GPIO_EXTI_Callback+0xba>
	}else if (GPIO_Pin == SMPS_OK_IP_Pin){
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	2b40      	cmp	r3, #64	; 0x40
 8001440:	d11f      	bne.n	8001482 <HAL_GPIO_EXTI_Callback+0x6a>
		S.SMPS_OK_signal = (uint8_t)(HAL_GPIO_ReadPin(SMPS_OK_IP_GPIO_Port, SMPS_OK_IP_Pin));
 8001442:	2140      	movs	r1, #64	; 0x40
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f006 ff9c 	bl	8008384 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001452:	75da      	strb	r2, [r3, #23]
		if ((S.SMPS_cntrl == SMPS_TURNEDON) && (S.SMPS_OK_signal == SMPS_OFF)){
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001456:	7e1b      	ldrb	r3, [r3, #24]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d13a      	bne.n	80014d2 <HAL_GPIO_EXTI_Callback+0xba>
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_GPIO_EXTI_Callback+0xd0>)
 800145e:	7ddb      	ldrb	r3, [r3, #23]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d136      	bne.n	80014d2 <HAL_GPIO_EXTI_Callback+0xba>
			ME.ErrorFlag = 1;
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_GPIO_EXTI_Callback+0xd4>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
			ME_addErrors(&ME,ERR_SYSTEM_LEVEL_SOURCE, SYS_SMPS_ERROR, ERROR_SOURCE_SYSTEM,0); // maybe later find out which ACK failed.
 800146a:	2300      	movs	r3, #0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	230e      	movs	r3, #14
 8001470:	2260      	movs	r2, #96	; 0x60
 8001472:	2102      	movs	r1, #2
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <HAL_GPIO_EXTI_Callback+0xd4>)
 8001476:	f004 f996 	bl	80057a6 <ME_addErrors>
			S.SMPS_switchOff = 1;
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_GPIO_EXTI_Callback+0xd0>)
 800147c:	2201      	movs	r2, #1
 800147e:	765a      	strb	r2, [r3, #25]
}
 8001480:	e027      	b.n	80014d2 <HAL_GPIO_EXTI_Callback+0xba>
		 usrBtns.initialState =(uint8_t)(HAL_GPIO_ReadPin(RED_GPIO_Port, GPIO_Pin));
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148a:	f006 ff7b 	bl	8008384 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001494:	71da      	strb	r2, [r3, #7]
		 if (GPIO_Pin == RED_Pin){
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d105      	bne.n	80014a8 <HAL_GPIO_EXTI_Callback+0x90>
			  usrBtns.redBtn = usrBtns.initialState;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 800149e:	79db      	ldrb	r3, [r3, #7]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014a4:	805a      	strh	r2, [r3, #2]
}
 80014a6:	e014      	b.n	80014d2 <HAL_GPIO_EXTI_Callback+0xba>
		  else if (GPIO_Pin == GREEN_Pin){
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d104      	bne.n	80014b8 <HAL_GPIO_EXTI_Callback+0xa0>
			  usrBtns.greenBtn = usrBtns.initialState;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014b0:	79da      	ldrb	r2, [r3, #7]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014b4:	701a      	strb	r2, [r3, #0]
}
 80014b6:	e00c      	b.n	80014d2 <HAL_GPIO_EXTI_Callback+0xba>
		  else if (GPIO_Pin == YELLOW_Pin){
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d105      	bne.n	80014ca <HAL_GPIO_EXTI_Callback+0xb2>
			  usrBtns.yellowBtn = usrBtns.initialState;
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014c0:	79db      	ldrb	r3, [r3, #7]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014c6:	809a      	strh	r2, [r3, #4]
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_EXTI_Callback+0xba>
			  usrBtns.rotarySwitch = usrBtns.initialState;
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014cc:	79da      	ldrb	r2, [r3, #7]
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80014d0:	719a      	strb	r2, [r3, #6]
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200008cc 	.word	0x200008cc
 80014e0:	200008bc 	.word	0x200008bc
 80014e4:	20001235 	.word	0x20001235
 80014e8:	20000738 	.word	0x20000738
 80014ec:	20000684 	.word	0x20000684
 80014f0:	200008b0 	.word	0x200008b0

080014f4 <HAL_FDCAN_RxFifo0Callback>:



void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d014      	beq.n	8001532 <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_FDCAN_RxFifo0Callback+0x48>)
 800150a:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800150c:	2140      	movs	r1, #64	; 0x40
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f006 f970 	bl	80077f4 <HAL_FDCAN_GetRxMessage>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    	FDCAN_parseForMotherBoard();
 800151a:	f003 fd5b 	bl	8004fd4 <FDCAN_parseForMotherBoard>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800151e:	2200      	movs	r2, #0
 8001520:	2101      	movs	r1, #1
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f006 fa52 	bl	80079cc <HAL_FDCAN_ActivateNotification>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 800152e:	f000 fcff 	bl	8001f30 <Error_Handler>
    }
  }
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200012dc 	.word	0x200012dc
 8001540:	200012b4 	.word	0x200012b4

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154a:	f004 ffe9 	bl	8006520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154e:	f000 f90f 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001552:	f000 fc0d 	bl	8001d70 <MX_GPIO_Init>
  MX_DMA_Init();
 8001556:	f000 fbd9 	bl	8001d0c <MX_DMA_Init>
  MX_FDCAN1_Init();
 800155a:	f000 f997 	bl	800188c <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 800155e:	f000 fb2f 	bl	8001bc0 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8001562:	f000 f94f 	bl	8001804 <MX_DAC1_Init>
  MX_USART2_UART_Init();
 8001566:	f000 fb83 	bl	8001c70 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800156a:	f000 f9d7 	bl	800191c <MX_I2C2_Init>
  MX_TIM17_Init();
 800156e:	f000 faff 	bl	8001b70 <MX_TIM17_Init>
  MX_TIM16_Init();
 8001572:	f000 fad5 	bl	8001b20 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001576:	f000 fa81 	bl	8001a7c <MX_TIM15_Init>
  MX_TIM7_Init();
 800157a:	f000 fa47 	bl	8001a0c <MX_TIM7_Init>
  MX_TIM6_Init();
 800157e:	f000 fa0d 	bl	800199c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //SInitialize custom typeDefs
  InitializeDiagnostic_TypeDef(&D);
 8001582:	4869      	ldr	r0, [pc, #420]	; (8001728 <main+0x1e4>)
 8001584:	f7ff fdb2 	bl	80010ec <InitializeDiagnostic_TypeDef>
  InitializeMachineSettings(&msp);
 8001588:	4868      	ldr	r0, [pc, #416]	; (800172c <main+0x1e8>)
 800158a:	f004 fb35 	bl	8005bf8 <InitializeMachineSettings>
  InitializeMotherBoardErrors_TypeDef(&MBE);
 800158e:	4868      	ldr	r0, [pc, #416]	; (8001730 <main+0x1ec>)
 8001590:	f004 f8cf 	bl	8005732 <InitializeMotherBoardErrors_TypeDef>
  InitializeState_TypeDef(&S);
 8001594:	4867      	ldr	r0, [pc, #412]	; (8001734 <main+0x1f0>)
 8001596:	f7ff fe49 	bl	800122c <InitializeState_TypeDef>
  InitializeRunTime_TypeDef();
 800159a:	f7ff fdc3 	bl	8001124 <InitializeRunTime_TypeDef>
  InitializeBTMsg_TypeDef(&BT);
 800159e:	4866      	ldr	r0, [pc, #408]	; (8001738 <main+0x1f4>)
 80015a0:	f002 fd9a 	bl	80040d8 <InitializeBTMsg_TypeDef>

  FDCAN_TxInit();
 80015a4:	f003 fbb4 	bl	8004d10 <FDCAN_TxInit>
  FDCAN_RxFilterInit();
 80015a8:	f003 fbee 	bl	8004d88 <FDCAN_RxFilterInit>

  //get Flyer Settings from Eeprom
  ReadMachineSettingsFromEeprom(&msp);
 80015ac:	485f      	ldr	r0, [pc, #380]	; (800172c <main+0x1e8>)
 80015ae:	f004 f978 	bl	80058a2 <ReadMachineSettingsFromEeprom>
  //TODO change this to the setup method like in the motor sections.
  MBE.EepromLoadValsGood  = CheckMachineSettings(&msp);
 80015b2:	485e      	ldr	r0, [pc, #376]	; (800172c <main+0x1e8>)
 80015b4:	f004 fa58 	bl	8005a68 <CheckMachineSettings>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <main+0x1ec>)
 80015be:	701a      	strb	r2, [r3, #0]
  //MBE.EepromLoadValsGood = 0;
  if (MBE.EepromLoadValsGood == 0){
 80015c0:	4b5b      	ldr	r3, [pc, #364]	; (8001730 <main+0x1ec>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <main+0x98>
	  LoadDefaultMachineSettings(&msp);
 80015c8:	4858      	ldr	r0, [pc, #352]	; (800172c <main+0x1e8>)
 80015ca:	f004 fae9 	bl	8005ba0 <LoadDefaultMachineSettings>
	  msp.beaterSpeed = 900;
	  msp.beaterFeed = 1.2;
	  msp.trunkDelay = 3;
	  msp.lengthLimit = 125;
	  msp.rampTimes = 3;*/
	  MBE.defaults_eepromWriteFailed = WriteMachineSettingsIntoEeprom(&msp);
 80015ce:	4857      	ldr	r0, [pc, #348]	; (800172c <main+0x1e8>)
 80015d0:	f004 f9b2 	bl	8005938 <WriteMachineSettingsIntoEeprom>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b55      	ldr	r3, [pc, #340]	; (8001730 <main+0x1ec>)
 80015da:	705a      	strb	r2, [r3, #1]
  }
  CalculateMachineParameters(&msp,&mcParams);
 80015dc:	4957      	ldr	r1, [pc, #348]	; (800173c <main+0x1f8>)
 80015de:	4853      	ldr	r0, [pc, #332]	; (800172c <main+0x1e8>)
 80015e0:	f004 fb36 	bl	8005c50 <CalculateMachineParameters>
  ReadySetupCommand_AllMotors(&msp,&mcParams);
 80015e4:	4955      	ldr	r1, [pc, #340]	; (800173c <main+0x1f8>)
 80015e6:	4851      	ldr	r0, [pc, #324]	; (800172c <main+0x1e8>)
 80015e8:	f004 fc5c 	bl	8005ea4 <ReadySetupCommand_AllMotors>
  SO_Reset_InitialLiftPosRecieved(&SO);
 80015ec:	4854      	ldr	r0, [pc, #336]	; (8001740 <main+0x1fc>)
 80015ee:	f00b fdd0 	bl	800d192 <SO_Reset_InitialLiftPosRecieved>

  //Interrupts on UART1 connected to the bluetooth
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);//interrupt on receive buffer not empty(buffer full)
 80015f2:	4b54      	ldr	r3, [pc, #336]	; (8001744 <main+0x200>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b52      	ldr	r3, [pc, #328]	; (8001744 <main+0x200>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0210 	orr.w	r2, r2, #16
 8001600:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_TC );//interrupt on Transmission Complete
 8001602:	4b50      	ldr	r3, [pc, #320]	; (8001744 <main+0x200>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b4e      	ldr	r3, [pc, #312]	; (8001744 <main+0x200>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001610:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1,(uint8_t *)BufferRec,150);	 // start the receive here.
 8001612:	2296      	movs	r2, #150	; 0x96
 8001614:	494c      	ldr	r1, [pc, #304]	; (8001748 <main+0x204>)
 8001616:	484b      	ldr	r0, [pc, #300]	; (8001744 <main+0x200>)
 8001618:	f009 fcee 	bl	800aff8 <HAL_UART_Receive_DMA>

  __HAL_UART_ENABLE_IT(&huart2,UART_IT_TC );//interrupt on Transmission Complete
 800161c:	4b4b      	ldr	r3, [pc, #300]	; (800174c <main+0x208>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <main+0x208>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800162a:	601a      	str	r2, [r3, #0]

  //set up MCP chip
  mcp23017_init(&hmcp, &hi2c2, MCP23017_ADDRESS);
 800162c:	2221      	movs	r2, #33	; 0x21
 800162e:	4948      	ldr	r1, [pc, #288]	; (8001750 <main+0x20c>)
 8001630:	4848      	ldr	r0, [pc, #288]	; (8001754 <main+0x210>)
 8001632:	f004 f835 	bl	80056a0 <mcp23017_init>
  mcp23017_setupForMainBoard(&hmcp);
 8001636:	4847      	ldr	r0, [pc, #284]	; (8001754 <main+0x210>)
 8001638:	f003 ffbc 	bl	80055b4 <mcp23017_setupForMainBoard>
  //set the initial Tower Lamp State
  TowerLamp_SetState(&hmcp, &mcp_portB,BUZZER_OFF,RED_OFF,GREEN_OFF,AMBER_OFF);
 800163c:	2300      	movs	r3, #0
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	2200      	movs	r2, #0
 8001648:	4943      	ldr	r1, [pc, #268]	; (8001758 <main+0x214>)
 800164a:	4842      	ldr	r0, [pc, #264]	; (8001754 <main+0x210>)
 800164c:	f00b fe79 	bl	800d342 <TowerLamp_SetState>
  TowerLamp_ApplyState(&hmcp,&mcp_portB);
 8001650:	4941      	ldr	r1, [pc, #260]	; (8001758 <main+0x214>)
 8001652:	4840      	ldr	r0, [pc, #256]	; (8001754 <main+0x210>)
 8001654:	f00b fec7 	bl	800d3e6 <TowerLamp_ApplyState>

  //read initial btns states and set either setup or run state.
  UsrBtns_SetInitialStates();
 8001658:	f00b ff26 	bl	800d4a8 <UsrBtns_SetInitialStates>
  if (usrBtns.rotarySwitch == ROTARY_SWITCH_OFF){
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <main+0x218>)
 800165e:	799b      	ldrb	r3, [r3, #6]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d104      	bne.n	800166e <main+0x12a>
	  SetCoilerSensorState(&sensor,SENSOR_DISABLE);
 8001664:	2102      	movs	r1, #2
 8001666:	483e      	ldr	r0, [pc, #248]	; (8001760 <main+0x21c>)
 8001668:	f004 f90c 	bl	8005884 <SetCoilerSensorState>
 800166c:	e003      	b.n	8001676 <main+0x132>
  }else{
	  SetCoilerSensorState(&sensor,SENSOR_ENABLE);
 800166e:	2101      	movs	r1, #1
 8001670:	483b      	ldr	r0, [pc, #236]	; (8001760 <main+0x21c>)
 8001672:	f004 f907 	bl	8005884 <SetCoilerSensorState>
  }
  S.current_state = INITIAL_STATE;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <main+0x1f0>)
 8001678:	2200      	movs	r2, #0
 800167a:	705a      	strb	r2, [r3, #1]
  ChangeState(&S,IDLE_STATE);
 800167c:	2102      	movs	r1, #2
 800167e:	482d      	ldr	r0, [pc, #180]	; (8001734 <main+0x1f0>)
 8001680:	f7ff fe05 	bl	800128e <ChangeState>

  //Setup the Bluetooth device MANUALLY ONLY.
  BTCmd.manual_setup = 1;
 8001684:	4b37      	ldr	r3, [pc, #220]	; (8001764 <main+0x220>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
  if (BTCmd.manual_setup){
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <main+0x220>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00f      	beq.n	80016b2 <main+0x16e>
	  BTCmd.manual_setup_result = BT_SetupDevice();
 8001692:	f002 f95f 	bl	8003954 <BT_SetupDevice>
 8001696:	4603      	mov	r3, r0
 8001698:	4a32      	ldr	r2, [pc, #200]	; (8001764 <main+0x220>)
 800169a:	6053      	str	r3, [r2, #4]
	  if(BTCmd.manual_setup_result != 1){
 800169c:	4b31      	ldr	r3, [pc, #196]	; (8001764 <main+0x220>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d006      	beq.n	80016b2 <main+0x16e>
		 BTCmd.manual_setup_rebootOK = BTConsole_WriteCMD(BTCMD_REBOOT);
 80016a4:	2005      	movs	r0, #5
 80016a6:	f002 f867 	bl	8003778 <BTConsole_WriteCMD>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <main+0x220>)
 80016b0:	721a      	strb	r2, [r3, #8]
	  }
  }

  //Start the 100 msec Timer for sending BT state commands
  HAL_TIM_Base_Start_IT(&htim7);
 80016b2:	482d      	ldr	r0, [pc, #180]	; (8001768 <main+0x224>)
 80016b4:	f008 fde8 	bl	800a288 <HAL_TIM_Base_Start_IT>
  //Start the 1000 msec Timer for checking if the CAN bus is Ok
  HAL_TIM_Base_Start_IT(&htim16);
 80016b8:	482c      	ldr	r0, [pc, #176]	; (800176c <main+0x228>)
 80016ba:	f008 fde5 	bl	800a288 <HAL_TIM_Base_Start_IT>

  //SMPS - turn on the SMPS, wait a while to see if  short command.
  SMPS_TurnOn();
 80016be:	f004 ff03 	bl	80064c8 <SMPS_TurnOn>
  HAL_Delay(3000);//contactor takes a long time to turn on.
 80016c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016c6:	f004 ff9b 	bl	8006600 <HAL_Delay>
	  ME.ErrorFlag = 1;
	  ME_addErrors(&ME,ERR_SYSTEM_LEVEL_SOURCE, SYS_SMPS_ERROR, ERROR_SOURCE_SYSTEM,0); // maybe later find out which ACK failed.
	  S.SMPS_switchOff = 1;
  }*/

  S.LOG_enabled = 1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <main+0x1f0>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	769a      	strb	r2, [r3, #26]


  while (1)
  {

	if (S.current_state == IDLE_STATE){
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <main+0x1f0>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d101      	bne.n	80016dc <main+0x198>
		IdleState();
 80016d8:	f001 fc96 	bl	8003008 <IdleState>
	}

	if (S.current_state == RUN_STATE){
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <main+0x1f0>)
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d101      	bne.n	80016e8 <main+0x1a4>
		RunState();
 80016e4:	f001 fd44 	bl	8003170 <RunState>
	}

	if (S.current_state == DEBUG_STATE){
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <main+0x1f0>)
 80016ea:	785b      	ldrb	r3, [r3, #1]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <main+0x1b0>
		DebugState();
 80016f0:	f001 f962 	bl	80029b8 <DebugState>
	}

	if (S.current_state == DIAGNOSTICS_STATE){
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <main+0x1f0>)
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d101      	bne.n	8001700 <main+0x1bc>
		DiagnosticsState();
 80016fc:	f001 fa70 	bl	8002be0 <DiagnosticsState>
	}

	if (S.current_state == SETTINGS_STATE){
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <main+0x1f0>)
 8001702:	785b      	ldrb	r3, [r3, #1]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d101      	bne.n	800170c <main+0x1c8>
		SettingsState();
 8001708:	f001 febe 	bl	8003488 <SettingsState>
	}

	if (S.current_state == ERROR_STATE){
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <main+0x1f0>)
 800170e:	785b      	ldrb	r3, [r3, #1]
 8001710:	2b07      	cmp	r3, #7
 8001712:	d101      	bne.n	8001718 <main+0x1d4>
		ErrorState();
 8001714:	f001 fb3a 	bl	8002d8c <ErrorState>
	}

	if (S.current_state == FINISHED_STATE){
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <main+0x1f0>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	2b06      	cmp	r3, #6
 800171e:	d1d7      	bne.n	80016d0 <main+0x18c>
			FinishState();
 8001720:	f001 fc10 	bl	8002f44 <FinishState>
	if (S.current_state == IDLE_STATE){
 8001724:	e7d4      	b.n	80016d0 <main+0x18c>
 8001726:	bf00      	nop
 8001728:	20000754 	.word	0x20000754
 800172c:	20000620 	.word	0x20000620
 8001730:	20000680 	.word	0x20000680
 8001734:	20000738 	.word	0x20000738
 8001738:	20000894 	.word	0x20000894
 800173c:	20000660 	.word	0x20000660
 8001740:	20000874 	.word	0x20000874
 8001744:	20000440 	.word	0x20000440
 8001748:	20000904 	.word	0x20000904
 800174c:	200004d0 	.word	0x200004d0
 8001750:	20000278 	.word	0x20000278
 8001754:	200008bc 	.word	0x200008bc
 8001758:	200008c8 	.word	0x200008c8
 800175c:	200008b0 	.word	0x200008b0
 8001760:	200008d0 	.word	0x200008d0
 8001764:	2000089c 	.word	0x2000089c
 8001768:	20000310 	.word	0x20000310
 800176c:	200003a8 	.word	0x200003a8

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b094      	sub	sp, #80	; 0x50
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	2238      	movs	r2, #56	; 0x38
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f00b fed4 	bl	800d52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001792:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001796:	f007 fd5b 	bl	8009250 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a4:	2302      	movs	r3, #2
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a8:	2303      	movs	r3, #3
 80017aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017ac:	2304      	movs	r3, #4
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80017b0:	234b      	movs	r3, #75	; 0x4b
 80017b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017bc:	2302      	movs	r3, #2
 80017be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c0:	f107 0318 	add.w	r3, r7, #24
 80017c4:	4618      	mov	r0, r3
 80017c6:	f007 fde7 	bl	8009398 <HAL_RCC_OscConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80017d0:	f000 fbae 	bl	8001f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d4:	230f      	movs	r3, #15
 80017d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d8:	2303      	movs	r3, #3
 80017da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2104      	movs	r1, #4
 80017ec:	4618      	mov	r0, r3
 80017ee:	f008 f8eb 	bl	80099c8 <HAL_RCC_ClockConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017f8:	f000 fb9a 	bl	8001f30 <Error_Handler>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3750      	adds	r7, #80	; 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2230      	movs	r2, #48	; 0x30
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f00b fe8b 	bl	800d52c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <MX_DAC1_Init+0x80>)
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <MX_DAC1_Init+0x84>)
 800181a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800181c:	4819      	ldr	r0, [pc, #100]	; (8001884 <MX_DAC1_Init+0x80>)
 800181e:	f005 f820 	bl	8006862 <HAL_DAC_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001828:	f000 fb82 	bl	8001f30 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800182c:	2302      	movs	r3, #2
 800182e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001848:	2301      	movs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	480b      	ldr	r0, [pc, #44]	; (8001884 <MX_DAC1_Init+0x80>)
 8001858:	f005 f88a 	bl	8006970 <HAL_DAC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001862:	f000 fb65 	bl	8001f30 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001866:	463b      	mov	r3, r7
 8001868:	2210      	movs	r2, #16
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_DAC1_Init+0x80>)
 800186e:	f005 f87f 	bl	8006970 <HAL_DAC_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001878:	f000 fb5a 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3730      	adds	r7, #48	; 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000200 	.word	0x20000200
 8001888:	50000800 	.word	0x50000800

0800188c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <MX_FDCAN1_Init+0x88>)
 8001892:	4a21      	ldr	r2, [pc, #132]	; (8001918 <MX_FDCAN1_Init+0x8c>)
 8001894:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV10;
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <MX_FDCAN1_Init+0x88>)
 8001898:	2205      	movs	r2, #5
 800189a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_FDCAN1_Init+0x88>)
 800189e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018a2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018be:	2201      	movs	r2, #1
 80018c0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 6;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018c4:	2206      	movs	r2, #6
 80018c6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 23;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018ca:	2217      	movs	r2, #23
 80018cc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018d0:	2206      	movs	r2, #6
 80018d2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018dc:	2203      	movs	r2, #3
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018e2:	220b      	movs	r2, #11
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018e8:	2203      	movs	r2, #3
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_FDCAN1_Init+0x88>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_FDCAN1_Init+0x88>)
 8001900:	f005 fd26 	bl	8007350 <HAL_FDCAN_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800190a:	f000 fb11 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000214 	.word	0x20000214
 8001918:	40006400 	.word	0x40006400

0800191c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <MX_I2C2_Init+0x74>)
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <MX_I2C2_Init+0x78>)
 8001924:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x50D4E6FF;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_I2C2_Init+0x74>)
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <MX_I2C2_Init+0x7c>)
 800192a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <MX_I2C2_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_I2C2_Init+0x74>)
 8001934:	2201      	movs	r2, #1
 8001936:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_I2C2_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_I2C2_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_I2C2_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_I2C2_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_I2C2_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001956:	480e      	ldr	r0, [pc, #56]	; (8001990 <MX_I2C2_Init+0x74>)
 8001958:	f006 fd76 	bl	8008448 <HAL_I2C_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001962:	f000 fae5 	bl	8001f30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800196a:	4809      	ldr	r0, [pc, #36]	; (8001990 <MX_I2C2_Init+0x74>)
 800196c:	f007 fbd8 	bl	8009120 <HAL_I2CEx_ConfigAnalogFilter>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001976:	f000 fadb 	bl	8001f30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_I2C2_Init+0x74>)
 800197e:	f007 fc1a 	bl	80091b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001988:	f000 fad2 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000278 	.word	0x20000278
 8001994:	40005800 	.word	0x40005800
 8001998:	50d4e6ff 	.word	0x50d4e6ff

0800199c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <MX_TIM6_Init+0x68>)
 80019ae:	4a16      	ldr	r2, [pc, #88]	; (8001a08 <MX_TIM6_Init+0x6c>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1499;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_TIM6_Init+0x68>)
 80019b4:	f240 52db 	movw	r2, #1499	; 0x5db
 80019b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_TIM6_Init+0x68>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <MX_TIM6_Init+0x68>)
 80019c2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80019c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_TIM6_Init+0x68>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_TIM6_Init+0x68>)
 80019d0:	f008 fc02 	bl	800a1d8 <HAL_TIM_Base_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80019da:	f000 faa9 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <MX_TIM6_Init+0x68>)
 80019ec:	f009 f8b2 	bl	800ab54 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80019f6:	f000 fa9b 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002c4 	.word	0x200002c4
 8001a08:	40001000 	.word	0x40001000

08001a0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_TIM7_Init+0x68>)
 8001a1e:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <MX_TIM7_Init+0x6c>)
 8001a20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1499;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_TIM7_Init+0x68>)
 8001a24:	f240 52db 	movw	r2, #1499	; 0x5db
 8001a28:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_TIM7_Init+0x68>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <MX_TIM7_Init+0x68>)
 8001a32:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a36:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_TIM7_Init+0x68>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <MX_TIM7_Init+0x68>)
 8001a40:	f008 fbca 	bl	800a1d8 <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001a4a:	f000 fa71 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <MX_TIM7_Init+0x68>)
 8001a5c:	f009 f87a 	bl	800ab54 <HAL_TIMEx_MasterConfigSynchronization>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001a66:	f000 fa63 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000310 	.word	0x20000310
 8001a78:	40001400 	.word	0x40001400

08001a7c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001a9c:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <MX_TIM15_Init+0xa0>)
 8001a9e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001aa2:	f240 52db 	movw	r2, #1499	; 0x5db
 8001aa6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24999;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001ab0:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001ab4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001ac8:	4813      	ldr	r0, [pc, #76]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001aca:	f008 fb85 	bl	800a1d8 <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001ad4:	f000 fa2c 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001ae6:	f008 fde7 	bl	800a6b8 <HAL_TIM_ConfigClockSource>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001af0:	f000 fa1e 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_TIM15_Init+0x9c>)
 8001b02:	f009 f827 	bl	800ab54 <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001b0c:	f000 fa10 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000035c 	.word	0x2000035c
 8001b1c:	40014000 	.word	0x40014000

08001b20 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_TIM16_Init+0x48>)
 8001b26:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <MX_TIM16_Init+0x4c>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 29999;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_TIM16_Init+0x48>)
 8001b2c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001b30:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <MX_TIM16_Init+0x48>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_TIM16_Init+0x48>)
 8001b3a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b3e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_TIM16_Init+0x48>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_TIM16_Init+0x48>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_TIM16_Init+0x48>)
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_TIM16_Init+0x48>)
 8001b54:	f008 fb40 	bl	800a1d8 <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001b5e:	f000 f9e7 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200003a8 	.word	0x200003a8
 8001b6c:	40014400 	.word	0x40014400

08001b70 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */
//2uS timer
  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_TIM17_Init+0x48>)
 8001b76:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <MX_TIM17_Init+0x4c>)
 8001b78:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1499;
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_TIM17_Init+0x48>)
 8001b7c:	f240 52db 	movw	r2, #1499	; 0x5db
 8001b80:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <MX_TIM17_Init+0x48>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1499;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_TIM17_Init+0x48>)
 8001b8a:	f240 52db 	movw	r2, #1499	; 0x5db
 8001b8e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_TIM17_Init+0x48>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_TIM17_Init+0x48>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_TIM17_Init+0x48>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_TIM17_Init+0x48>)
 8001ba4:	f008 fb18 	bl	800a1d8 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001bae:	f000 f9bf 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200003f4 	.word	0x200003f4
 8001bbc:	40014800 	.word	0x40014800

08001bc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc4:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001bc6:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <MX_USART1_UART_Init+0xac>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001c04:	2238      	movs	r2, #56	; 0x38
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
                              |UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001c0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001c12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001c22:	f009 f85f 	bl	800ace4 <HAL_UART_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8001c2c:	f000 f980 	bl	8001f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c30:	2100      	movs	r1, #0
 8001c32:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001c34:	f00a ff6b 	bl	800cb0e <HAL_UARTEx_SetTxFifoThreshold>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8001c3e:	f000 f977 	bl	8001f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001c46:	f00a ffa0 	bl	800cb8a <HAL_UARTEx_SetRxFifoThreshold>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8001c50:	f000 f96e 	bl	8001f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_USART1_UART_Init+0xa8>)
 8001c56:	f00a ff21 	bl	800ca9c <HAL_UARTEx_DisableFifoMode>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_USART1_UART_Init+0xa4>
  {
    Error_Handler();
 8001c60:	f000 f966 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000440 	.word	0x20000440
 8001c6c:	40013800 	.word	0x40013800

08001c70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c76:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <MX_USART2_UART_Init+0x94>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c7c:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <MX_USART2_UART_Init+0x98>)
 8001c7e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c94:	220c      	movs	r2, #12
 8001c96:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb6:	4812      	ldr	r0, [pc, #72]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cb8:	f009 f814 	bl	800ace4 <HAL_UART_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001cc2:	f000 f935 	bl	8001f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cca:	f00a ff20 	bl	800cb0e <HAL_UARTEx_SetTxFifoThreshold>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001cd4:	f000 f92c 	bl	8001f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4809      	ldr	r0, [pc, #36]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cdc:	f00a ff55 	bl	800cb8a <HAL_UARTEx_SetRxFifoThreshold>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001ce6:	f000 f923 	bl	8001f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_USART2_UART_Init+0x90>)
 8001cec:	f00a fed6 	bl	800ca9c <HAL_UARTEx_DisableFifoMode>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001cf6:	f000 f91b 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200004d0 	.word	0x200004d0
 8001d04:	40004400 	.word	0x40004400
 8001d08:	001e8480 	.word	0x001e8480

08001d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <MX_DMA_Init+0x60>)
 8001d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d16:	4a15      	ldr	r2, [pc, #84]	; (8001d6c <MX_DMA_Init+0x60>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6493      	str	r3, [r2, #72]	; 0x48
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <MX_DMA_Init+0x60>)
 8001d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_DMA_Init+0x60>)
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2e:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <MX_DMA_Init+0x60>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6493      	str	r3, [r2, #72]	; 0x48
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <MX_DMA_Init+0x60>)
 8001d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2103      	movs	r1, #3
 8001d46:	200b      	movs	r0, #11
 8001d48:	f004 fd57 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d4c:	200b      	movs	r0, #11
 8001d4e:	f004 fd6e 	bl	800682e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 3, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2103      	movs	r1, #3
 8001d56:	200c      	movs	r0, #12
 8001d58:	f004 fd4f 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d5c:	200c      	movs	r0, #12
 8001d5e:	f004 fd66 	bl	800682e <HAL_NVIC_EnableIRQ>

}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d86:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	4a66      	ldr	r2, [pc, #408]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d92:	4b64      	ldr	r3, [pc, #400]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d9e:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001da4:	f043 0320 	orr.w	r3, r3, #32
 8001da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001daa:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	4a5a      	ldr	r2, [pc, #360]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc2:	4b58      	ldr	r3, [pc, #352]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	4b55      	ldr	r3, [pc, #340]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	4a54      	ldr	r2, [pc, #336]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dda:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <MX_GPIO_Init+0x1b4>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001dec:	484e      	ldr	r0, [pc, #312]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001dee:	f006 fae1 	bl	80083b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_CNTRL_GND_Pin|EXTRA1_Pin|DBG_TP_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f248 4180 	movw	r1, #33920	; 0x8480
 8001df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfc:	f006 fada 	bl	80083b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SMPS_CNTRL_OP_Pin|EXTRA5_Pin|EXTRA6_Pin|EXTRA7_Pin
 8001e00:	2200      	movs	r2, #0
 8001e02:	f643 6127 	movw	r1, #15911	; 0x3e27
 8001e06:	4849      	ldr	r0, [pc, #292]	; (8001f2c <MX_GPIO_Init+0x1bc>)
 8001e08:	f006 fad4 	bl	80083b4 <HAL_GPIO_WritePin>
                          |EXTRA4_Pin|EXTRA3_Pin|EXTRA2_Pin|CAN_LED_Pin
                          |FAULT_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001e0c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	4840      	ldr	r0, [pc, #256]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001e26:	f006 f92b 	bl	8008080 <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_Pin GREEN_Pin RED_Pin ROTARY_Pin */
  GPIO_InitStruct.Pin = YELLOW_Pin|GREEN_Pin|RED_Pin|ROTARY_Pin;
 8001e2a:	230f      	movs	r3, #15
 8001e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e2e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f006 f91d 	bl	8008080 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_OK_IP_Pin */
  GPIO_InitStruct.Pin = SMPS_OK_IP_Pin;
 8001e46:	2340      	movs	r3, #64	; 0x40
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e4a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_OK_IP_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5e:	f006 f90f 	bl	8008080 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_CNTRL_GND_Pin EXTRA1_Pin DBG_TP_Pin */
  GPIO_InitStruct.Pin = SMPS_CNTRL_GND_Pin|EXTRA1_Pin|DBG_TP_Pin;
 8001e62:	f248 4380 	movw	r3, #33920	; 0x8480
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7e:	f006 f8ff 	bl	8008080 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_CNTRL_OP_Pin EXTRA5_Pin EXTRA6_Pin EXTRA7_Pin
                           EXTRA4_Pin EXTRA3_Pin EXTRA2_Pin CAN_LED_Pin
                           FAULT_LED_Pin */
  GPIO_InitStruct.Pin = SMPS_CNTRL_OP_Pin|EXTRA5_Pin|EXTRA6_Pin|EXTRA7_Pin
 8001e82:	f643 6327 	movw	r3, #15911	; 0x3e27
 8001e86:	617b      	str	r3, [r7, #20]
                          |EXTRA4_Pin|EXTRA3_Pin|EXTRA2_Pin|CAN_LED_Pin
                          |FAULT_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4824      	ldr	r0, [pc, #144]	; (8001f2c <MX_GPIO_Init+0x1bc>)
 8001e9c:	f006 f8f0 	bl	8008080 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_B_Pin INT_A_Pin */
  GPIO_InitStruct.Pin = INT_B_Pin|INT_A_Pin;
 8001ea0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ea6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481d      	ldr	r0, [pc, #116]	; (8001f2c <MX_GPIO_Init+0x1bc>)
 8001eb8:	f006 f8e2 	bl	8008080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	2006      	movs	r0, #6
 8001ec2:	f004 fc9a 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ec6:	2006      	movs	r0, #6
 8001ec8:	f004 fcb1 	bl	800682e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2102      	movs	r1, #2
 8001ed0:	2007      	movs	r0, #7
 8001ed2:	f004 fc92 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ed6:	2007      	movs	r0, #7
 8001ed8:	f004 fca9 	bl	800682e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2102      	movs	r1, #2
 8001ee0:	2008      	movs	r0, #8
 8001ee2:	f004 fc8a 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ee6:	2008      	movs	r0, #8
 8001ee8:	f004 fca1 	bl	800682e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2102      	movs	r1, #2
 8001ef0:	2009      	movs	r0, #9
 8001ef2:	f004 fc82 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ef6:	2009      	movs	r0, #9
 8001ef8:	f004 fc99 	bl	800682e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2102      	movs	r1, #2
 8001f00:	2017      	movs	r0, #23
 8001f02:	f004 fc7a 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f06:	2017      	movs	r0, #23
 8001f08:	f004 fc91 	bl	800682e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2103      	movs	r1, #3
 8001f10:	2028      	movs	r0, #40	; 0x28
 8001f12:	f004 fc72 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f16:	2028      	movs	r0, #40	; 0x28
 8001f18:	f004 fc89 	bl	800682e <HAL_NVIC_EnableIRQ>

}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	48000400 	.word	0x48000400

08001f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f34:	b672      	cpsid	i
}
 8001f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	//TODO here send some error Code to the App.
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <Error_Handler+0x8>
	...

08001f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_MspInit+0x58>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <HAL_MspInit+0x58>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_MspInit+0x58>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_MspInit+0x58>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <HAL_MspInit+0x58>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6593      	str	r3, [r2, #88]	; 0x58
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_MspInit+0x58>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2102      	movs	r1, #2
 8001f76:	f06f 0004 	mvn.w	r0, #4
 8001f7a:	f004 fc3e 	bl	80067fa <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2102      	movs	r1, #2
 8001f82:	f06f 0003 	mvn.w	r0, #3
 8001f86:	f004 fc38 	bl	80067fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_DAC_MspInit+0x84>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d12c      	bne.n	8002014 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_DAC_MspInit+0x88>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_DAC_MspInit+0x88>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_DAC_MspInit+0x88>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_DAC_MspInit+0x88>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <HAL_DAC_MspInit+0x88>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_DAC_MspInit+0x88>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT_Pin|DAC2_OUT_Pin;
 8001fea:	2330      	movs	r3, #48	; 0x30
 8001fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002000:	f006 f83e 	bl	8008080 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	2036      	movs	r0, #54	; 0x36
 800200a:	f004 fbf6 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800200e:	2036      	movs	r0, #54	; 0x36
 8002010:	f004 fc0d 	bl	800682e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002014:	bf00      	nop
 8002016:	3728      	adds	r7, #40	; 0x28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	50000800 	.word	0x50000800
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b09a      	sub	sp, #104	; 0x68
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	2244      	movs	r2, #68	; 0x44
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f00b fa71 	bl	800d52c <memset>
  if(hfdcan->Instance==FDCAN1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <HAL_FDCAN_MspInit+0xbc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d141      	bne.n	80020d8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002058:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800205a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4618      	mov	r0, r3
 8002066:	f007 fec7 	bl	8009df8 <HAL_RCCEx_PeriphCLKConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002070:	f7ff ff5e 	bl	8001f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_FDCAN_MspInit+0xc0>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <HAL_FDCAN_MspInit+0xc0>)
 800207a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800207e:	6593      	str	r3, [r2, #88]	; 0x58
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_FDCAN_MspInit+0xc0>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_FDCAN_MspInit+0xc0>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_FDCAN_MspInit+0xc0>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_FDCAN_MspInit+0xc0>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80020b6:	2309      	movs	r3, #9
 80020b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c4:	f005 ffdc 	bl	8008080 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2015      	movs	r0, #21
 80020ce:	f004 fb94 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80020d2:	2015      	movs	r0, #21
 80020d4:	f004 fbab 	bl	800682e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80020d8:	bf00      	nop
 80020da:	3768      	adds	r7, #104	; 0x68
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40006400 	.word	0x40006400
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b09a      	sub	sp, #104	; 0x68
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	2244      	movs	r2, #68	; 0x44
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f00b fa0f 	bl	800d52c <memset>
  if(hi2c->Instance==I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <HAL_I2C_MspInit+0xa8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d137      	bne.n	8002188 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4618      	mov	r0, r3
 8002126:	f007 fe67 	bl	8009df8 <HAL_RCCEx_PeriphCLKConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002130:	f7ff fefe 	bl	8001f30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_I2C_MspInit+0xac>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	4a16      	ldr	r2, [pc, #88]	; (8002194 <HAL_I2C_MspInit+0xac>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <HAL_I2C_MspInit+0xac>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800214c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002150:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002152:	2312      	movs	r3, #18
 8002154:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800215e:	2304      	movs	r3, #4
 8002160:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002166:	4619      	mov	r1, r3
 8002168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216c:	f005 ff88 	bl	8008080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_I2C_MspInit+0xac>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_I2C_MspInit+0xac>)
 8002176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_I2C_MspInit+0xac>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002188:	bf00      	nop
 800218a:	3768      	adds	r7, #104	; 0x68
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40005800 	.word	0x40005800
 8002194:	40021000 	.word	0x40021000

08002198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a41      	ldr	r2, [pc, #260]	; (80022ac <HAL_TIM_Base_MspInit+0x114>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d114      	bne.n	80021d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	4a40      	ldr	r2, [pc, #256]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 80021b0:	f043 0310 	orr.w	r3, r3, #16
 80021b4:	6593      	str	r3, [r2, #88]	; 0x58
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	2036      	movs	r0, #54	; 0x36
 80021c8:	f004 fb17 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021cc:	2036      	movs	r0, #54	; 0x36
 80021ce:	f004 fb2e 	bl	800682e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80021d2:	e066      	b.n	80022a2 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM7)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a36      	ldr	r2, [pc, #216]	; (80022b4 <HAL_TIM_Base_MspInit+0x11c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d114      	bne.n	8002208 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a33      	ldr	r2, [pc, #204]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 80021e4:	f043 0320 	orr.w	r3, r3, #32
 80021e8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ea:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2037      	movs	r0, #55	; 0x37
 80021fc:	f004 fafd 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002200:	2037      	movs	r0, #55	; 0x37
 8002202:	f004 fb14 	bl	800682e <HAL_NVIC_EnableIRQ>
}
 8002206:	e04c      	b.n	80022a2 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM15)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2a      	ldr	r2, [pc, #168]	; (80022b8 <HAL_TIM_Base_MspInit+0x120>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d114      	bne.n	800223c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6613      	str	r3, [r2, #96]	; 0x60
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	2018      	movs	r0, #24
 8002230:	f004 fae3 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002234:	2018      	movs	r0, #24
 8002236:	f004 fafa 	bl	800682e <HAL_NVIC_EnableIRQ>
}
 800223a:	e032      	b.n	80022a2 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM16)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <HAL_TIM_Base_MspInit+0x124>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d114      	bne.n	8002270 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	6613      	str	r3, [r2, #96]	; 0x60
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2101      	movs	r1, #1
 8002262:	2019      	movs	r0, #25
 8002264:	f004 fac9 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002268:	2019      	movs	r0, #25
 800226a:	f004 fae0 	bl	800682e <HAL_NVIC_EnableIRQ>
}
 800226e:	e018      	b.n	80022a2 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM17)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_TIM_Base_MspInit+0x128>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d113      	bne.n	80022a2 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002284:	6613      	str	r3, [r2, #96]	; 0x60
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_TIM_Base_MspInit+0x118>)
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2105      	movs	r1, #5
 8002296:	201a      	movs	r0, #26
 8002298:	f004 faaf 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800229c:	201a      	movs	r0, #26
 800229e:	f004 fac6 	bl	800682e <HAL_NVIC_EnableIRQ>
}
 80022a2:	bf00      	nop
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40001000 	.word	0x40001000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40001400 	.word	0x40001400
 80022b8:	40014000 	.word	0x40014000
 80022bc:	40014400 	.word	0x40014400
 80022c0:	40014800 	.word	0x40014800

080022c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b09c      	sub	sp, #112	; 0x70
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022dc:	f107 0318 	add.w	r3, r7, #24
 80022e0:	2244      	movs	r2, #68	; 0x44
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f00b f921 	bl	800d52c <memset>
  if(huart->Instance==USART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a6d      	ldr	r2, [pc, #436]	; (80024a4 <HAL_UART_MspInit+0x1e0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d167      	bne.n	80023c4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022f4:	2301      	movs	r3, #1
 80022f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fc:	f107 0318 	add.w	r3, r7, #24
 8002300:	4618      	mov	r0, r3
 8002302:	f007 fd79 	bl	8009df8 <HAL_RCCEx_PeriphCLKConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800230c:	f7ff fe10 	bl	8001f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002310:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 8002312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002314:	4a64      	ldr	r2, [pc, #400]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 8002316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231a:	6613      	str	r3, [r2, #96]	; 0x60
 800231c:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 800231e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002334:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BT_USART1_TX_Pin|BT_USART1_RX_Pin;
 8002340:	23c0      	movs	r3, #192	; 0xc0
 8002342:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002350:	2307      	movs	r3, #7
 8002352:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002354:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002358:	4619      	mov	r1, r3
 800235a:	4854      	ldr	r0, [pc, #336]	; (80024ac <HAL_UART_MspInit+0x1e8>)
 800235c:	f005 fe90 	bl	8008080 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 8002362:	4a54      	ldr	r2, [pc, #336]	; (80024b4 <HAL_UART_MspInit+0x1f0>)
 8002364:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002366:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 8002368:	2218      	movs	r2, #24
 800236a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002372:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002378:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237e:	4b4c      	ldr	r3, [pc, #304]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002384:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800238a:	4b49      	ldr	r3, [pc, #292]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002390:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002396:	4846      	ldr	r0, [pc, #280]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 8002398:	f004 fc9c 	bl	8006cd4 <HAL_DMA_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80023a2:	f7ff fdc5 	bl	8001f30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 80023aa:	67da      	str	r2, [r3, #124]	; 0x7c
 80023ac:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_UART_MspInit+0x1ec>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2101      	movs	r1, #1
 80023b6:	2025      	movs	r0, #37	; 0x25
 80023b8:	f004 fa1f 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023bc:	2025      	movs	r0, #37	; 0x25
 80023be:	f004 fa36 	bl	800682e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023c2:	e06b      	b.n	800249c <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3b      	ldr	r2, [pc, #236]	; (80024b8 <HAL_UART_MspInit+0x1f4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d166      	bne.n	800249c <HAL_UART_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d6:	f107 0318 	add.w	r3, r7, #24
 80023da:	4618      	mov	r0, r3
 80023dc:	f007 fd0c 	bl	8009df8 <HAL_RCCEx_PeriphCLKConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_UART_MspInit+0x126>
      Error_Handler();
 80023e6:	f7ff fda3 	bl	8001f30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	4a2e      	ldr	r2, [pc, #184]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_UART_MspInit+0x1e4>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DBG_USART2_TX_Pin|DBG_USART2_RX_Pin;
 800241a:	2318      	movs	r3, #24
 800241c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800242a:	2307      	movs	r3, #7
 800242c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002432:	4619      	mov	r1, r3
 8002434:	481d      	ldr	r0, [pc, #116]	; (80024ac <HAL_UART_MspInit+0x1e8>)
 8002436:	f005 fe23 	bl	8008080 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 800243c:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <HAL_UART_MspInit+0x1fc>)
 800243e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 8002442:	221b      	movs	r2, #27
 8002444:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 8002448:	2210      	movs	r2, #16
 800244a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002470:	4812      	ldr	r0, [pc, #72]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 8002472:	f004 fc2f 	bl	8006cd4 <HAL_DMA_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 800247c:	f7ff fd58 	bl	8001f30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 8002484:	679a      	str	r2, [r3, #120]	; 0x78
 8002486:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <HAL_UART_MspInit+0x1f8>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	210f      	movs	r1, #15
 8002490:	2026      	movs	r0, #38	; 0x26
 8002492:	f004 f9b2 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002496:	2026      	movs	r0, #38	; 0x26
 8002498:	f004 f9c9 	bl	800682e <HAL_NVIC_EnableIRQ>
}
 800249c:	bf00      	nop
 800249e:	3770      	adds	r7, #112	; 0x70
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40021000 	.word	0x40021000
 80024ac:	48000400 	.word	0x48000400
 80024b0:	20000560 	.word	0x20000560
 80024b4:	40020008 	.word	0x40020008
 80024b8:	40004400 	.word	0x40004400
 80024bc:	200005c0 	.word	0x200005c0
 80024c0:	4002001c 	.word	0x4002001c

080024c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <NMI_Handler+0x4>

080024ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <MemManage_Handler+0x4>

080024d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <BusFault_Handler+0x4>

080024dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <UsageFault_Handler+0x4>

080024e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  onems_counter++;
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <SysTick_Handler+0x2c>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <SysTick_Handler+0x2c>)
 800251a:	801a      	strh	r2, [r3, #0]
  if (BTCmd.btTickOn){
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <SysTick_Handler+0x30>)
 800251e:	7c1b      	ldrb	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <SysTick_Handler+0x24>
  	  BTCmd.btTick++;
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <SysTick_Handler+0x30>)
 8002526:	8a5b      	ldrh	r3, [r3, #18]
 8002528:	3301      	adds	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <SysTick_Handler+0x30>)
 800252e:	825a      	strh	r2, [r3, #18]
    }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002530:	f004 f848 	bl	80065c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20001236 	.word	0x20001236
 800253c:	2000089c 	.word	0x2000089c

08002540 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(YELLOW_Pin);
 8002544:	2001      	movs	r0, #1
 8002546:	f005 ff67 	bl	8008418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}

0800254e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GREEN_Pin);
 8002552:	2002      	movs	r0, #2
 8002554:	f005 ff60 	bl	8008418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RED_Pin);
 8002560:	2004      	movs	r0, #4
 8002562:	f005 ff59 	bl	8008418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}

0800256a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROTARY_Pin);
 800256e:	2008      	movs	r0, #8
 8002570:	f005 ff52 	bl	8008418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}

08002578 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <DMA1_Channel1_IRQHandler+0x10>)
 800257e:	f004 fd8c 	bl	800709a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000560 	.word	0x20000560

0800258c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <DMA1_Channel2_IRQHandler+0x10>)
 8002592:	f004 fd82 	bl	800709a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200005c0 	.word	0x200005c0

080025a0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <FDCAN1_IT0_IRQHandler+0x10>)
 80025a6:	f005 faf7 	bl	8007b98 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000214 	.word	0x20000214

080025b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SMPS_OK_IP_Pin);
 80025b8:	2040      	movs	r0, #64	; 0x40
 80025ba:	f005 ff2d 	bl	8008418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80025ca:	f007 fef6 	bl	800a3ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000035c 	.word	0x2000035c

080025d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80025de:	f007 feec 	bl	800a3ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200003a8 	.word	0x200003a8

080025ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80025f2:	f007 fee2 	bl	800a3ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200003f4 	.word	0x200003f4

08002600 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002604:	4808      	ldr	r0, [pc, #32]	; (8002628 <USART1_IRQHandler+0x28>)
 8002606:	f008 fde1 	bl	800b1cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){   //Judging whether it is idle interruption
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <USART1_IRQHandler+0x28>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b10      	cmp	r3, #16
 8002616:	d105      	bne.n	8002624 <USART1_IRQHandler+0x24>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);                     //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <USART1_IRQHandler+0x28>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2210      	movs	r2, #16
 800261e:	621a      	str	r2, [r3, #32]
	  UART_IDLECallback();                          //Call interrupt handler
 8002620:	f000 f856 	bl	80026d0 <UART_IDLECallback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000440 	.word	0x20000440

0800262c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <USART2_IRQHandler+0x10>)
 8002632:	f008 fdcb 	bl	800b1cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200004d0 	.word	0x200004d0

08002640 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_B_Pin);
 8002644:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002648:	f005 fee6 	bl	8008418 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_A_Pin);
 800264c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002650:	f005 fee2 	bl	8008418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}

08002658 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800265c:	4803      	ldr	r0, [pc, #12]	; (800266c <TIM6_DAC_IRQHandler+0x14>)
 800265e:	f007 feac 	bl	800a3ba <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002662:	4803      	ldr	r0, [pc, #12]	; (8002670 <TIM6_DAC_IRQHandler+0x18>)
 8002664:	f004 f91f 	bl	80068a6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	200002c4 	.word	0x200002c4
 8002670:	20000200 	.word	0x20000200

08002674 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM7_IRQHandler+0x10>)
 800267a:	f007 fe9e 	bl	800a3ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000310 	.word	0x20000310

08002688 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART1){
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_UART_TxCpltCallback+0x38>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d102      	bne.n	80026a0 <HAL_UART_TxCpltCallback+0x18>
		 S.BT_transmission_over = 1;
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_UART_TxCpltCallback+0x3c>)
 800269c:	2201      	movs	r2, #1
 800269e:	755a      	strb	r2, [r3, #21]
	 }
	 if (huart->Instance == USART2){
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <HAL_UART_TxCpltCallback+0x40>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d103      	bne.n	80026b2 <HAL_UART_TxCpltCallback+0x2a>
		 L.DMA_transferOver = 1;
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_UART_TxCpltCallback+0x44>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	 }

 }
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40013800 	.word	0x40013800
 80026c4:	20000738 	.word	0x20000738
 80026c8:	40004400 	.word	0x40004400
 80026cc:	200008d8 	.word	0x200008d8

080026d0 <UART_IDLECallback>:


void UART_IDLECallback(void){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
	uint8_t data_length  = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdMsgRecieved = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	71bb      	strb	r3, [r7, #6]
	//Stop this DMA transmission
	HAL_UART_DMAStop(&huart1);
 80026de:	4842      	ldr	r0, [pc, #264]	; (80027e8 <UART_IDLECallback+0x118>)
 80026e0:	f008 fce0 	bl	800b0a4 <HAL_UART_DMAStop>
	cmdMsgRecieved = ParseCmdModeMsg(&BTCmd);
 80026e4:	4841      	ldr	r0, [pc, #260]	; (80027ec <UART_IDLECallback+0x11c>)
 80026e6:	f000 ff75 	bl	80035d4 <ParseCmdModeMsg>
 80026ea:	4603      	mov	r3, r0
 80026ec:	71bb      	strb	r3, [r7, #6]
	if (cmdMsgRecieved == 0){
 80026ee:	79bb      	ldrb	r3, [r7, #6]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d160      	bne.n	80027b6 <UART_IDLECallback+0xe6>
		ParseBTMsg();
 80026f4:	f001 fa5e 	bl	8003bb4 <ParseBTMsg>
		if (BT.BTmsgGood){
 80026f8:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <UART_IDLECallback+0x120>)
 80026fa:	79db      	ldrb	r3, [r3, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d05a      	beq.n	80027b6 <UART_IDLECallback+0xe6>
			  if (BT.information == PAIRED_FROM_PHONE){
 8002700:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <UART_IDLECallback+0x120>)
 8002702:	78db      	ldrb	r3, [r3, #3]
 8002704:	2b99      	cmp	r3, #153	; 0x99
 8002706:	d103      	bne.n	8002710 <UART_IDLECallback+0x40>
				  S.BT_paired = 1;
 8002708:	4b3a      	ldr	r3, [pc, #232]	; (80027f4 <UART_IDLECallback+0x124>)
 800270a:	2201      	movs	r2, #1
 800270c:	751a      	strb	r2, [r3, #20]
 800270e:	e04f      	b.n	80027b0 <UART_IDLECallback+0xe0>
			  }
			  else if (BT.information == REQ_SETTINGS_FROM_APP){
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <UART_IDLECallback+0x120>)
 8002712:	78db      	ldrb	r3, [r3, #3]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d103      	bne.n	8002720 <UART_IDLECallback+0x50>
				  S.switchState = TO_SETTINGS; // only check for this in IDLE STATE
 8002718:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <UART_IDLECallback+0x124>)
 800271a:	2201      	movs	r2, #1
 800271c:	70da      	strb	r2, [r3, #3]
 800271e:	e047      	b.n	80027b0 <UART_IDLECallback+0xe0>
			  }
			  else if (BT.information == SETTINGS_FROM_APP){
 8002720:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <UART_IDLECallback+0x120>)
 8002722:	78db      	ldrb	r3, [r3, #3]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10a      	bne.n	800273e <UART_IDLECallback+0x6e>
				  S.BT_dataOK = BT_MC_parse_Settings(&msp_BT); // we have to parse inside this function because it needs buffer Rec
 8002728:	4833      	ldr	r0, [pc, #204]	; (80027f8 <UART_IDLECallback+0x128>)
 800272a:	f002 f891 	bl	8004850 <BT_MC_parse_Settings>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <UART_IDLECallback+0x124>)
 8002734:	719a      	strb	r2, [r3, #6]
				  S.switchState = TO_SETTINGS; // only check for this in IDLE STATE
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <UART_IDLECallback+0x124>)
 8002738:	2201      	movs	r2, #1
 800273a:	70da      	strb	r2, [r3, #3]
 800273c:	e038      	b.n	80027b0 <UART_IDLECallback+0xe0>
			  }
			  else if (BT.information == DIAGNOSTICS_FROM_APP){
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <UART_IDLECallback+0x120>)
 8002740:	78db      	ldrb	r3, [r3, #3]
 8002742:	2b04      	cmp	r3, #4
 8002744:	d11f      	bne.n	8002786 <UART_IDLECallback+0xb6>
				  //7E240401064102014002014204001E4304005A7E
				  if (BT.subState == BT_DIAGNOSTIC_RUN){
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <UART_IDLECallback+0x120>)
 8002748:	791b      	ldrb	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d110      	bne.n	8002770 <UART_IDLECallback+0xa0>
					  S.BT_dataOK = ParseDiagnostics();
 800274e:	f001 fc0b 	bl	8003f68 <ParseDiagnostics>
 8002752:	4603      	mov	r3, r0
 8002754:	461a      	mov	r2, r3
 8002756:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <UART_IDLECallback+0x124>)
 8002758:	719a      	strb	r2, [r3, #6]
					  if (S.BT_dataOK){
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <UART_IDLECallback+0x124>)
 800275c:	799b      	ldrb	r3, [r3, #6]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d026      	beq.n	80027b0 <UART_IDLECallback+0xe0>
						  S.switchState = TO_DIAGNOSTICS;
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <UART_IDLECallback+0x124>)
 8002764:	2202      	movs	r2, #2
 8002766:	70da      	strb	r2, [r3, #3]
						  D.stopTest = 0;
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <UART_IDLECallback+0x12c>)
 800276a:	2200      	movs	r2, #0
 800276c:	751a      	strb	r2, [r3, #20]
 800276e:	e01f      	b.n	80027b0 <UART_IDLECallback+0xe0>
					  }
				  }else if (BT.subState == BT_DIAGNOSTIC_STOP){
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <UART_IDLECallback+0x120>)
 8002772:	791b      	ldrb	r3, [r3, #4]
 8002774:	2b06      	cmp	r3, #6
 8002776:	d11b      	bne.n	80027b0 <UART_IDLECallback+0xe0>
					  //within Diagnostics already
					  D.stopTest = 1;
 8002778:	4b20      	ldr	r3, [pc, #128]	; (80027fc <UART_IDLECallback+0x12c>)
 800277a:	2201      	movs	r2, #1
 800277c:	751a      	strb	r2, [r3, #20]
					  S.oneTime = 1;
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <UART_IDLECallback+0x124>)
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e014      	b.n	80027b0 <UART_IDLECallback+0xe0>
				  }
			  }
			  else if (BT.information == CAROUSAL_INFO){
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <UART_IDLECallback+0x120>)
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	2b07      	cmp	r3, #7
 800278c:	d110      	bne.n	80027b0 <UART_IDLECallback+0xe0>
				  S.BT_runInfoToSend = BT.subState;
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <UART_IDLECallback+0x120>)
 8002790:	791a      	ldrb	r2, [r3, #4]
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <UART_IDLECallback+0x124>)
 8002794:	749a      	strb	r2, [r3, #18]
				  if (S.BT_runInfoToSend != RUN_PRODUCTION_DATA){
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <UART_IDLECallback+0x124>)
 8002798:	7c9b      	ldrb	r3, [r3, #18]
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d008      	beq.n	80027b0 <UART_IDLECallback+0xe0>
					  S.BT_runInfowhichMotor = GetMotorId_from_CarousalID(S.BT_runInfoToSend);
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <UART_IDLECallback+0x124>)
 80027a0:	7c9b      	ldrb	r3, [r3, #18]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 f9a8 	bl	8004af8 <GetMotorId_from_CarousalID>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <UART_IDLECallback+0x124>)
 80027ae:	74da      	strb	r2, [r3, #19]
				  }
			  }
			  else{}
			  BT.BTmsgGood = 0;
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <UART_IDLECallback+0x120>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	71da      	strb	r2, [r3, #7]
		}//closes if BTMsg Good
	} // closes if cmd msg == 0

	//Calculate the length of the received data
	data_length  = 150 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <UART_IDLECallback+0x130>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	f06f 0369 	mvn.w	r3, #105	; 0x69
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	71fb      	strb	r3, [r7, #7]
	//Zero Receiving Buffer
	memset(BufferRec,0,data_length);
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	461a      	mov	r2, r3
 80027ca:	2100      	movs	r1, #0
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <UART_IDLECallback+0x134>)
 80027ce:	f00a fead 	bl	800d52c <memset>
	data_length = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	71fb      	strb	r3, [r7, #7]

	//Restart to start DMA transmission of 255 bytes of data at a time
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)BufferRec, 150);
 80027d6:	2296      	movs	r2, #150	; 0x96
 80027d8:	490a      	ldr	r1, [pc, #40]	; (8002804 <UART_IDLECallback+0x134>)
 80027da:	4803      	ldr	r0, [pc, #12]	; (80027e8 <UART_IDLECallback+0x118>)
 80027dc:	f008 fc0c 	bl	800aff8 <HAL_UART_Receive_DMA>

}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000440 	.word	0x20000440
 80027ec:	2000089c 	.word	0x2000089c
 80027f0:	20000894 	.word	0x20000894
 80027f4:	20000738 	.word	0x20000738
 80027f8:	20000640 	.word	0x20000640
 80027fc:	20000754 	.word	0x20000754
 8002800:	20000560 	.word	0x20000560
 8002804:	20000904 	.word	0x20000904

08002808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_kill>:

int _kill(int pid, int sig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002822:	f00a fe59 	bl	800d4d8 <__errno>
 8002826:	4603      	mov	r3, r0
 8002828:	2216      	movs	r2, #22
 800282a:	601a      	str	r2, [r3, #0]
	return -1;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_exit>:

void _exit (int status)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe7 	bl	8002818 <_kill>
	while (1) {}		/* Make sure we hang here */
 800284a:	e7fe      	b.n	800284a <_exit+0x12>

0800284c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e00a      	b.n	8002874 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800285e:	f3af 8000 	nop.w
 8002862:	4601      	mov	r1, r0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	60ba      	str	r2, [r7, #8]
 800286a:	b2ca      	uxtb	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	dbf0      	blt.n	800285e <_read+0x12>
	}

return len;
 800287c:	687b      	ldr	r3, [r7, #4]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e009      	b.n	80028ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	60ba      	str	r2, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	dbf1      	blt.n	8002898 <_write+0x12>
	}
	return len;
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <_close>:

int _close(int file)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	return -1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e6:	605a      	str	r2, [r3, #4]
	return 0;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <_isatty>:

int _isatty(int file)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
	return 1;
 80028fe:	2301      	movs	r3, #1
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
	return 0;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <_sbrk+0x5c>)
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <_sbrk+0x60>)
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <_sbrk+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <_sbrk+0x64>)
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <_sbrk+0x68>)
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	429a      	cmp	r2, r3
 8002956:	d207      	bcs.n	8002968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002958:	f00a fdbe 	bl	800d4d8 <__errno>
 800295c:	4603      	mov	r3, r0
 800295e:	220c      	movs	r2, #12
 8002960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002966:	e009      	b.n	800297c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <_sbrk+0x64>)
 8002978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20008000 	.word	0x20008000
 8002988:	00000400 	.word	0x00000400
 800298c:	20001238 	.word	0x20001238
 8002990:	20001308 	.word	0x20001308

08002994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <SystemInit+0x20>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <SystemInit+0x20>)
 80029a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <DebugState>:
uint16_t errSource1 = 0 ;

uint8_t SMPS_on,SMPS_off;

extern UART_HandleTypeDef huart1;
void DebugState(void){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0

	while(1){


		if (SMPS_on){
 80029bc:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <DebugState+0x1d4>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <DebugState+0x16>
			SMPS_TurnOn();
 80029c4:	f003 fd80 	bl	80064c8 <SMPS_TurnOn>
			SMPS_on = 0;
 80029c8:	4b70      	ldr	r3, [pc, #448]	; (8002b8c <DebugState+0x1d4>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
		}
		if (SMPS_off){
 80029ce:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <DebugState+0x1d8>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <DebugState+0x28>
			SMPS_TurnOff();
 80029d6:	f003 fd8d 	bl	80064f4 <SMPS_TurnOff>
			SMPS_off = 0;
 80029da:	4b6d      	ldr	r3, [pc, #436]	; (8002b90 <DebugState+0x1d8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
		}

		if(dbg_Start){
 80029e0:	4b6c      	ldr	r3, [pc, #432]	; (8002b94 <DebugState+0x1dc>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00d      	beq.n	8002a04 <DebugState+0x4c>
			response = SendCommands_To_MultipleMotors(motors,noOfMotors,START);
 80029e8:	4b6b      	ldr	r3, [pc, #428]	; (8002b98 <DebugState+0x1e0>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2202      	movs	r2, #2
 80029ee:	4619      	mov	r1, r3
 80029f0:	486a      	ldr	r0, [pc, #424]	; (8002b9c <DebugState+0x1e4>)
 80029f2:	f003 fabf 	bl	8005f74 <SendCommands_To_MultipleMotors>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b69      	ldr	r3, [pc, #420]	; (8002ba0 <DebugState+0x1e8>)
 80029fc:	701a      	strb	r2, [r3, #0]
			dbg_Start = 0;
 80029fe:	4b65      	ldr	r3, [pc, #404]	; (8002b94 <DebugState+0x1dc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
		}

		if (dbg_pause){
 8002a04:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <DebugState+0x1ec>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <DebugState+0x70>
			response = SendCommands_To_MultipleMotors(motors,noOfMotors,RAMPDOWN_STOP);
 8002a0c:	4b62      	ldr	r3, [pc, #392]	; (8002b98 <DebugState+0x1e0>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2203      	movs	r2, #3
 8002a12:	4619      	mov	r1, r3
 8002a14:	4861      	ldr	r0, [pc, #388]	; (8002b9c <DebugState+0x1e4>)
 8002a16:	f003 faad 	bl	8005f74 <SendCommands_To_MultipleMotors>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b60      	ldr	r3, [pc, #384]	; (8002ba0 <DebugState+0x1e8>)
 8002a20:	701a      	strb	r2, [r3, #0]
			dbg_pause =0;
 8002a22:	4b60      	ldr	r3, [pc, #384]	; (8002ba4 <DebugState+0x1ec>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
		}

		if (dbg_resume){
 8002a28:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <DebugState+0x1f0>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <DebugState+0x94>
			response = SendCommands_To_MultipleMotors(motors,noOfMotors,RESUME);
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <DebugState+0x1e0>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2206      	movs	r2, #6
 8002a36:	4619      	mov	r1, r3
 8002a38:	4858      	ldr	r0, [pc, #352]	; (8002b9c <DebugState+0x1e4>)
 8002a3a:	f003 fa9b 	bl	8005f74 <SendCommands_To_MultipleMotors>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b57      	ldr	r3, [pc, #348]	; (8002ba0 <DebugState+0x1e8>)
 8002a44:	701a      	strb	r2, [r3, #0]
			dbg_resume = 0;
 8002a46:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <DebugState+0x1f0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
		}

		if (dbg_stop){
 8002a4c:	4b57      	ldr	r3, [pc, #348]	; (8002bac <DebugState+0x1f4>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <DebugState+0xb8>
			response = SendCommands_To_MultipleMotors(motors,noOfMotors,EMERGENCY_STOP);
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <DebugState+0x1e0>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	484f      	ldr	r0, [pc, #316]	; (8002b9c <DebugState+0x1e4>)
 8002a5e:	f003 fa89 	bl	8005f74 <SendCommands_To_MultipleMotors>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b4e      	ldr	r3, [pc, #312]	; (8002ba0 <DebugState+0x1e8>)
 8002a68:	701a      	strb	r2, [r3, #0]
			dbg_stop = 0;
 8002a6a:	4b50      	ldr	r3, [pc, #320]	; (8002bac <DebugState+0x1f4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
		}

		//BT command mode commands
		if (sendBTCmd){
 8002a70:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <DebugState+0x1f8>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00b      	beq.n	8002a90 <DebugState+0xd8>
			btReturn = BTConsole_WriteCMD(btCmd);
 8002a78:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <DebugState+0x1fc>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fe7b 	bl	8003778 <BTConsole_WriteCMD>
 8002a82:	4603      	mov	r3, r0
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4b4c      	ldr	r3, [pc, #304]	; (8002bb8 <DebugState+0x200>)
 8002a88:	701a      	strb	r2, [r3, #0]
			sendBTCmd = 0;
 8002a8a:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <DebugState+0x1f8>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
		}

		if (BT_errDbg){
 8002a90:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <DebugState+0x204>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d02d      	beq.n	8002af4 <DebugState+0x13c>
			if (ME.errType1 == ERR_MOTOR_SOURCE){
 8002a98:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <DebugState+0x208>)
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10a      	bne.n	8002ab6 <DebugState+0xfe>
				errSource1 = GetBTMotorID_from_Motor_ID(ME.errSource1);
 8002aa0:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <DebugState+0x208>)
 8002aa2:	885b      	ldrh	r3, [r3, #2]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 fffc 	bl	8004aa4 <GetBTMotorID_from_Motor_ID>
 8002aac:	4603      	mov	r3, r0
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	4b44      	ldr	r3, [pc, #272]	; (8002bc4 <DebugState+0x20c>)
 8002ab2:	801a      	strh	r2, [r3, #0]
 8002ab4:	e003      	b.n	8002abe <DebugState+0x106>
			}else{
				errSource1 = ME.errSource1;
 8002ab6:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <DebugState+0x208>)
 8002ab8:	885a      	ldrh	r2, [r3, #2]
 8002aba:	4b42      	ldr	r3, [pc, #264]	; (8002bc4 <DebugState+0x20c>)
 8002abc:	801a      	strh	r2, [r3, #0]
			}
			SetBTErrors(&ME,ME.errReason1,errSource1,ME.errCode1);
 8002abe:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <DebugState+0x208>)
 8002ac0:	8899      	ldrh	r1, [r3, #4]
 8002ac2:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <DebugState+0x20c>)
 8002ac4:	881a      	ldrh	r2, [r3, #0]
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <DebugState+0x208>)
 8002ac8:	88db      	ldrh	r3, [r3, #6]
 8002aca:	483d      	ldr	r0, [pc, #244]	; (8002bc0 <DebugState+0x208>)
 8002acc:	f002 fe9f 	bl	800580e <SetBTErrors>
			BTpacketSize = BT_MC_generateStatusMsg(BT_STOP);
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f001 fc07 	bl	80042e4 <BT_MC_generateStatusMsg>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <DebugState+0x210>)
 8002adc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,BTpacketSize);
 8002ade:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <DebugState+0x210>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4939      	ldr	r1, [pc, #228]	; (8002bcc <DebugState+0x214>)
 8002ae8:	4839      	ldr	r0, [pc, #228]	; (8002bd0 <DebugState+0x218>)
 8002aea:	f008 f94b 	bl	800ad84 <HAL_UART_Transmit_IT>
			BT_errDbg = 0;
 8002aee:	4b33      	ldr	r3, [pc, #204]	; (8002bbc <DebugState+0x204>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
		}

		if (BT_pauseDbg){
 8002af4:	4b37      	ldr	r3, [pc, #220]	; (8002bd4 <DebugState+0x21c>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d011      	beq.n	8002b20 <DebugState+0x168>
			BTpacketSize = BT_MC_generateStatusMsg(BT_PAUSE);
 8002afc:	2002      	movs	r0, #2
 8002afe:	f001 fbf1 	bl	80042e4 <BT_MC_generateStatusMsg>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <DebugState+0x210>)
 8002b08:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,BTpacketSize);
 8002b0a:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <DebugState+0x210>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	492e      	ldr	r1, [pc, #184]	; (8002bcc <DebugState+0x214>)
 8002b14:	482e      	ldr	r0, [pc, #184]	; (8002bd0 <DebugState+0x218>)
 8002b16:	f008 f935 	bl	800ad84 <HAL_UART_Transmit_IT>
			BT_pauseDbg = 0;
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <DebugState+0x21c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
		}

		if ((S.BT_sendState == 1) && (S.BT_transmission_over == 1)){
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <DebugState+0x220>)
 8002b22:	7c1b      	ldrb	r3, [r3, #16]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d106      	bne.n	8002b36 <DebugState+0x17e>
 8002b28:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <DebugState+0x220>)
 8002b2a:	7d5b      	ldrb	r3, [r3, #21]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d102      	bne.n	8002b36 <DebugState+0x17e>
			BT_runDbg = 1;
 8002b30:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <DebugState+0x224>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
		}
		if (BT_runDbg){
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <DebugState+0x224>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d017      	beq.n	8002b6e <DebugState+0x1b6>
			BTpacketSize = BT_MC_generateStatusMsg(BT_RUN);
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f001 fbd0 	bl	80042e4 <BT_MC_generateStatusMsg>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <DebugState+0x210>)
 8002b4a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,BTpacketSize);
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <DebugState+0x210>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	491d      	ldr	r1, [pc, #116]	; (8002bcc <DebugState+0x214>)
 8002b56:	481e      	ldr	r0, [pc, #120]	; (8002bd0 <DebugState+0x218>)
 8002b58:	f008 f914 	bl	800ad84 <HAL_UART_Transmit_IT>
			BT_runDbg = 0;
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <DebugState+0x224>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
			S.BT_transmission_over = 0;
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <DebugState+0x220>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	755a      	strb	r2, [r3, #21]
			S.BT_sendState = 0;
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <DebugState+0x220>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	741a      	strb	r2, [r3, #16]
		}

		if (S.switchState == TO_SETTINGS){
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <DebugState+0x220>)
 8002b70:	78db      	ldrb	r3, [r3, #3]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	f47f af22 	bne.w	80029bc <DebugState+0x4>
			ChangeState(&S,SETTINGS_STATE);
 8002b78:	2108      	movs	r1, #8
 8002b7a:	4817      	ldr	r0, [pc, #92]	; (8002bd8 <DebugState+0x220>)
 8002b7c:	f7fe fb87 	bl	800128e <ChangeState>
			S.switchState = 0;
 8002b80:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <DebugState+0x220>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	70da      	strb	r2, [r3, #3]
			break;
 8002b86:	bf00      	nop
		}


	}//closes while

}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	2000124e 	.word	0x2000124e
 8002b90:	2000124f 	.word	0x2000124f
 8002b94:	2000123c 	.word	0x2000123c
 8002b98:	20000004 	.word	0x20000004
 8002b9c:	20001244 	.word	0x20001244
 8002ba0:	20001240 	.word	0x20001240
 8002ba4:	2000123e 	.word	0x2000123e
 8002ba8:	2000123f 	.word	0x2000123f
 8002bac:	2000123d 	.word	0x2000123d
 8002bb0:	20001245 	.word	0x20001245
 8002bb4:	20001247 	.word	0x20001247
 8002bb8:	20001246 	.word	0x20001246
 8002bbc:	20001248 	.word	0x20001248
 8002bc0:	20000684 	.word	0x20000684
 8002bc4:	2000124c 	.word	0x2000124c
 8002bc8:	2000124b 	.word	0x2000124b
 8002bcc:	2000099c 	.word	0x2000099c
 8002bd0:	20000440 	.word	0x20000440
 8002bd4:	20001249 	.word	0x20001249
 8002bd8:	20000738 	.word	0x20000738
 8002bdc:	2000124a 	.word	0x2000124a

08002be0 <DiagnosticsState>:
#include "Log.h"


extern TIM_HandleTypeDef htim15;

void DiagnosticsState(){
 8002be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002be4:	b087      	sub	sp, #28
 8002be6:	af00      	add	r7, sp, #0
	uint8_t motorID = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	74bb      	strb	r3, [r7, #18]
	uint8_t noOfMotors = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	74fb      	strb	r3, [r7, #19]
	uint8_t response = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	747b      	strb	r3, [r7, #17]
	uint8_t motors[2] = {0,0};
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	80bb      	strh	r3, [r7, #4]
	 *
	 */

	while (1){

		if (usrBtns.redBtn == BTN_PRESSED){
 8002bf8:	4b5d      	ldr	r3, [pc, #372]	; (8002d70 <DiagnosticsState+0x190>)
 8002bfa:	885b      	ldrh	r3, [r3, #2]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d108      	bne.n	8002c12 <DiagnosticsState+0x32>
			usrBtns.redBtn = BTN_IDLE;
 8002c00:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <DiagnosticsState+0x190>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	805a      	strh	r2, [r3, #2]
			//STOP
			S.oneTime = 1;
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <DiagnosticsState+0x194>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
			D.stopTest = 1;
 8002c0c:	4b5a      	ldr	r3, [pc, #360]	; (8002d78 <DiagnosticsState+0x198>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	751a      	strb	r2, [r3, #20]
			}

		if(S.oneTime == 1){
 8002c12:	4b58      	ldr	r3, [pc, #352]	; (8002d74 <DiagnosticsState+0x194>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 8093 	bne.w	8002d42 <DiagnosticsState+0x162>
			if (D.stopTest == 0){	// if stop == 0, means its a start command.
 8002c1c:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <DiagnosticsState+0x198>)
 8002c1e:	7d1b      	ldrb	r3, [r3, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d133      	bne.n	8002c8c <DiagnosticsState+0xac>
				//all single motors.
				motorID = GetMotorID_from_BTMotor_ID(D.motorID);
 8002c24:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <DiagnosticsState+0x198>)
 8002c26:	785b      	ldrb	r3, [r3, #1]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 ff11 	bl	8004a50 <GetMotorID_from_BTMotor_ID>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	74bb      	strb	r3, [r7, #18]
				motors[0] = motorID;
 8002c32:	7cbb      	ldrb	r3, [r7, #18]
 8002c34:	713b      	strb	r3, [r7, #4]
				noOfMotors = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	74fb      	strb	r3, [r7, #19]
				response = Send_DiagCommands_To_MultipleMotors(motors,noOfMotors,START);
 8002c3a:	7cf9      	ldrb	r1, [r7, #19]
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	2202      	movs	r2, #2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f003 fb6b 	bl	800631c <Send_DiagCommands_To_MultipleMotors>
 8002c46:	4603      	mov	r3, r0
 8002c48:	747b      	strb	r3, [r7, #17]
				if (response!= 2){
 8002c4a:	7c7b      	ldrb	r3, [r7, #17]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d00b      	beq.n	8002c68 <DiagnosticsState+0x88>
					SO_enableCANObservers(&SO,motors,noOfMotors);
 8002c50:	7cfa      	ldrb	r2, [r7, #19]
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4849      	ldr	r0, [pc, #292]	; (8002d7c <DiagnosticsState+0x19c>)
 8002c58:	f00a faa8 	bl	800d1ac <SO_enableCANObservers>
					Log_setUpLogging(&L,motors,noOfMotors);
 8002c5c:	7cfa      	ldrb	r2, [r7, #19]
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4847      	ldr	r0, [pc, #284]	; (8002d80 <DiagnosticsState+0x1a0>)
 8002c64:	f00a f92a 	bl	800cebc <Log_setUpLogging>
				}
				//TODO - what do you want to do if you get a 2?

				//Start Timer that sends runtime Data to app
				htim15.Instance->SR &= ~TIM_SR_UIF; // Clear pending flag of timer15
 8002c68:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <DiagnosticsState+0x1a4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <DiagnosticsState+0x1a4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim15);
 8002c78:	4842      	ldr	r0, [pc, #264]	; (8002d84 <DiagnosticsState+0x1a4>)
 8002c7a:	f007 fb05 	bl	800a288 <HAL_TIM_Base_Start_IT>
				S.oneTime = 0;
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <DiagnosticsState+0x194>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
				S.BT_dataOK = 0;
 8002c84:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <DiagnosticsState+0x194>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	719a      	strb	r2, [r3, #6]
 8002c8a:	e05a      	b.n	8002d42 <DiagnosticsState+0x162>
			}else{
 8002c8c:	466b      	mov	r3, sp
 8002c8e:	461e      	mov	r6, r3
				//if we get a stop command, and its not for lift, send a stop to only the motors
				// weve started , otherwise we ll get no Ack error, and then go back to idle
				HAL_TIM_Base_Stop_IT(&htim15); // stop sending data to the app
 8002c90:	483c      	ldr	r0, [pc, #240]	; (8002d84 <DiagnosticsState+0x1a4>)
 8002c92:	f007 fb63 	bl	800a35c <HAL_TIM_Base_Stop_IT>
				//calculate which motors need to be stopped
				uint8_t motorStop_Array[noOfMotors];
 8002c96:	7cf9      	ldrb	r1, [r7, #19]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	b2cb      	uxtb	r3, r1
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	4615      	mov	r5, r2
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	00eb      	lsls	r3, r5, #3
 8002cb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb4:	00e2      	lsls	r2, r4, #3
 8002cb6:	b2cb      	uxtb	r3, r1
 8002cb8:	2200      	movs	r2, #0
 8002cba:	4698      	mov	r8, r3
 8002cbc:	4691      	mov	r9, r2
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	3307      	adds	r3, #7
 8002cd6:	08db      	lsrs	r3, r3, #3
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	ebad 0d03 	sub.w	sp, sp, r3
 8002cde:	466b      	mov	r3, sp
 8002ce0:	3300      	adds	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
				for (int i=0;i<noOfMotors;i++){
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e00b      	b.n	8002d02 <DiagnosticsState+0x122>
					motorStop_Array[i] = motors[i];
 8002cea:	1d3a      	adds	r2, r7, #4
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	4413      	add	r3, r2
 8002cf0:	7819      	ldrb	r1, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	701a      	strb	r2, [r3, #0]
				for (int i=0;i<noOfMotors;i++){
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	dbef      	blt.n	8002cea <DiagnosticsState+0x10a>
				}
				Send_DiagCommands_To_MultipleMotors(motorStop_Array,noOfMotors,EMERGENCY_STOP);
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4619      	mov	r1, r3
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	f003 fb03 	bl	800631c <Send_DiagCommands_To_MultipleMotors>
				SO_disableAndResetCANObservers(&SO);
 8002d16:	4819      	ldr	r0, [pc, #100]	; (8002d7c <DiagnosticsState+0x19c>)
 8002d18:	f00a fa88 	bl	800d22c <SO_disableAndResetCANObservers>
				Log_disableLogging(&L);
 8002d1c:	4818      	ldr	r0, [pc, #96]	; (8002d80 <DiagnosticsState+0x1a0>)
 8002d1e:	f00a f919 	bl	800cf54 <Log_disableLogging>
				D.stopTest = 0;
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <DiagnosticsState+0x198>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	751a      	strb	r2, [r3, #20]
				S.oneTime = 0;
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <DiagnosticsState+0x194>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
				S.switchState = 0; // needed for the bad case when u disconnect while within the diag state and need to come out
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <DiagnosticsState+0x194>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	70da      	strb	r2, [r3, #3]
				ChangeState(&S,IDLE_STATE);
 8002d34:	2102      	movs	r1, #2
 8002d36:	480f      	ldr	r0, [pc, #60]	; (8002d74 <DiagnosticsState+0x194>)
 8002d38:	f7fe faa9 	bl	800128e <ChangeState>
				break;
 8002d3c:	bf00      	nop
 8002d3e:	46b5      	mov	sp, r6
		}


	} // closes while loop

}
 8002d40:	e011      	b.n	8002d66 <DiagnosticsState+0x186>
		if(ME.ErrorFlag == 1){
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <DiagnosticsState+0x1a8>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d105      	bne.n	8002d56 <DiagnosticsState+0x176>
			ChangeState(&S,ERROR_STATE);
 8002d4a:	2107      	movs	r1, #7
 8002d4c:	4809      	ldr	r0, [pc, #36]	; (8002d74 <DiagnosticsState+0x194>)
 8002d4e:	f7fe fa9e 	bl	800128e <ChangeState>
			break;
 8002d52:	bf00      	nop
}
 8002d54:	e007      	b.n	8002d66 <DiagnosticsState+0x186>
		if (S.LOG_enabled){
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <DiagnosticsState+0x194>)
 8002d58:	7e9b      	ldrb	r3, [r3, #26]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f43f af4c 	beq.w	8002bf8 <DiagnosticsState+0x18>
			Log_DoOneCycle();
 8002d60:	f00a f92a 	bl	800cfb8 <Log_DoOneCycle>
		if (usrBtns.redBtn == BTN_PRESSED){
 8002d64:	e748      	b.n	8002bf8 <DiagnosticsState+0x18>
}
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d6e:	bf00      	nop
 8002d70:	200008b0 	.word	0x200008b0
 8002d74:	20000738 	.word	0x20000738
 8002d78:	20000754 	.word	0x20000754
 8002d7c:	20000874 	.word	0x20000874
 8002d80:	200008d8 	.word	0x200008d8
 8002d84:	2000035c 	.word	0x2000035c
 8002d88:	20000684 	.word	0x20000684

08002d8c <ErrorState>:
#include "mcp23017.h"
#include "Log.h"

extern UART_HandleTypeDef huart1;

void ErrorState(void){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
	/* when you enter this state, start the motors. if the rotary switch is on,
	 * When you press the yellow button, Pause.When u press the green, Resume.
	 * The red btn, doesnt care about the position of the rotary switch and will stop the run
	 * and go back to idle.
	 */
	uint8_t noOfMotors = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75bb      	strb	r3, [r7, #22]
	uint8_t BTpacketSize = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	757b      	strb	r3, [r7, #21]
	uint8_t SMPS_turnOff_oneTime = 1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
	uint8_t BTmotorID = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	753b      	strb	r3, [r7, #20]
	while(1){

		if (S.oneTime){
 8002da2:	4b60      	ldr	r3, [pc, #384]	; (8002f24 <ErrorState+0x198>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 808e 	beq.w	8002ec8 <ErrorState+0x13c>
			/* System Errors like ACK, CAN CUT error and SMPS errors take
			 * precedence over motor Errors and lift relative errors. these errors means we have
			 * to switch off the SMPS, so we check if any of the two errors are that.We also then
			 * set the BT msg to indicate that command, instead of the motor command.
			 */
			if (ME.errType1 == ERR_SYSTEM_LEVEL_SOURCE){
 8002dac:	4b5e      	ldr	r3, [pc, #376]	; (8002f28 <ErrorState+0x19c>)
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d112      	bne.n	8002dda <ErrorState+0x4e>
				if (ME.errReason1 != SYS_LIFT_RELATIVE_ERROR){
 8002db4:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <ErrorState+0x19c>)
 8002db6:	889b      	ldrh	r3, [r3, #4]
 8002db8:	2b63      	cmp	r3, #99	; 0x63
 8002dba:	d004      	beq.n	8002dc6 <ErrorState+0x3a>
					SMPS_TurnOff(); // ACK err, CAN cut error and SMPS Err
 8002dbc:	f003 fb9a 	bl	80064f4 <SMPS_TurnOff>
					S.SMPS_switchOff = 0;
 8002dc0:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <ErrorState+0x198>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	765a      	strb	r2, [r3, #25]
				}
				SetBTErrors(&ME,ME.errReason1,ME.errSource1,ME.errCode1);
 8002dc6:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <ErrorState+0x19c>)
 8002dc8:	8899      	ldrh	r1, [r3, #4]
 8002dca:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <ErrorState+0x19c>)
 8002dcc:	885a      	ldrh	r2, [r3, #2]
 8002dce:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <ErrorState+0x19c>)
 8002dd0:	88db      	ldrh	r3, [r3, #6]
 8002dd2:	4855      	ldr	r0, [pc, #340]	; (8002f28 <ErrorState+0x19c>)
 8002dd4:	f002 fd1b 	bl	800580e <SetBTErrors>
 8002dd8:	e061      	b.n	8002e9e <ErrorState+0x112>

			}else if (ME.errType2 == ERR_SYSTEM_LEVEL_SOURCE){
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <ErrorState+0x19c>)
 8002ddc:	7a1b      	ldrb	r3, [r3, #8]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d112      	bne.n	8002e08 <ErrorState+0x7c>
				if (ME.errReason1 != SYS_LIFT_RELATIVE_ERROR){
 8002de2:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <ErrorState+0x19c>)
 8002de4:	889b      	ldrh	r3, [r3, #4]
 8002de6:	2b63      	cmp	r3, #99	; 0x63
 8002de8:	d004      	beq.n	8002df4 <ErrorState+0x68>
					SMPS_TurnOff(); // ACK err, CAN cut error and SMPS Err
 8002dea:	f003 fb83 	bl	80064f4 <SMPS_TurnOff>
					S.SMPS_switchOff = 0;
 8002dee:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <ErrorState+0x198>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	765a      	strb	r2, [r3, #25]
				}
				SetBTErrors(&ME,ME.errReason2,ME.errSource2,ME.errCode2);
 8002df4:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <ErrorState+0x19c>)
 8002df6:	8999      	ldrh	r1, [r3, #12]
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <ErrorState+0x19c>)
 8002dfa:	895a      	ldrh	r2, [r3, #10]
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <ErrorState+0x19c>)
 8002dfe:	89db      	ldrh	r3, [r3, #14]
 8002e00:	4849      	ldr	r0, [pc, #292]	; (8002f28 <ErrorState+0x19c>)
 8002e02:	f002 fd04 	bl	800580e <SetBTErrors>
 8002e06:	e04a      	b.n	8002e9e <ErrorState+0x112>

			}else if (ME.errType1 == ERR_MOTOR_SOURCE){
 8002e08:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <ErrorState+0x19c>)
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d122      	bne.n	8002e56 <ErrorState+0xca>
				//send the Stop commands
				uint8_t motors[] = {CARDING_CYLINDER,BEATER_CYLINDER,CARDING_FEED,BEATER_FEED,CAGE,COILER};
 8002e10:	4a46      	ldr	r2, [pc, #280]	; (8002f2c <ErrorState+0x1a0>)
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e1a:	6018      	str	r0, [r3, #0]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	8019      	strh	r1, [r3, #0]
				noOfMotors = 6;
 8002e20:	2306      	movs	r3, #6
 8002e22:	75bb      	strb	r3, [r7, #22]
				SendCommands_To_MultipleMotors(motors,noOfMotors,EMERGENCY_STOP);
 8002e24:	7db9      	ldrb	r1, [r7, #22]
 8002e26:	f107 030c 	add.w	r3, r7, #12
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 f8a1 	bl	8005f74 <SendCommands_To_MultipleMotors>

				BTmotorID = GetBTMotorID_from_Motor_ID(ME.errSource1);
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <ErrorState+0x19c>)
 8002e34:	885b      	ldrh	r3, [r3, #2]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 fe33 	bl	8004aa4 <GetBTMotorID_from_Motor_ID>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	753b      	strb	r3, [r7, #20]
				SetBTErrors(&ME,ME.errReason1,BTmotorID,ME.errCode1);
 8002e42:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <ErrorState+0x19c>)
 8002e44:	8899      	ldrh	r1, [r3, #4]
 8002e46:	7d3b      	ldrb	r3, [r7, #20]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <ErrorState+0x19c>)
 8002e4c:	88db      	ldrh	r3, [r3, #6]
 8002e4e:	4836      	ldr	r0, [pc, #216]	; (8002f28 <ErrorState+0x19c>)
 8002e50:	f002 fcdd 	bl	800580e <SetBTErrors>
 8002e54:	e023      	b.n	8002e9e <ErrorState+0x112>
			}else if (ME.errType2 == ERR_MOTOR_SOURCE){
 8002e56:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <ErrorState+0x19c>)
 8002e58:	7a1b      	ldrb	r3, [r3, #8]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d11f      	bne.n	8002e9e <ErrorState+0x112>
				//send the Stop commands
				uint8_t motors[] = {CARDING_CYLINDER,BEATER_CYLINDER,CARDING_FEED,BEATER_FEED,CAGE,COILER};
 8002e5e:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <ErrorState+0x1a0>)
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e66:	6018      	str	r0, [r3, #0]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	8019      	strh	r1, [r3, #0]
				noOfMotors = 3;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	75bb      	strb	r3, [r7, #22]
				SendCommands_To_MultipleMotors(motors,noOfMotors,EMERGENCY_STOP);
 8002e70:	7db9      	ldrb	r1, [r7, #22]
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	2201      	movs	r2, #1
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 f87c 	bl	8005f74 <SendCommands_To_MultipleMotors>

				BTmotorID = GetBTMotorID_from_Motor_ID(ME.errSource2);
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <ErrorState+0x19c>)
 8002e7e:	895b      	ldrh	r3, [r3, #10]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 fe0e 	bl	8004aa4 <GetBTMotorID_from_Motor_ID>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	753b      	strb	r3, [r7, #20]
				SetBTErrors(&ME,ME.errReason2,BTmotorID,ME.errCode2);
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <ErrorState+0x19c>)
 8002e8e:	8999      	ldrh	r1, [r3, #12]
 8002e90:	7d3b      	ldrb	r3, [r7, #20]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <ErrorState+0x19c>)
 8002e96:	89db      	ldrh	r3, [r3, #14]
 8002e98:	4823      	ldr	r0, [pc, #140]	; (8002f28 <ErrorState+0x19c>)
 8002e9a:	f002 fcb8 	bl	800580e <SetBTErrors>
			}
			TowerLamp_SetState(&hmcp, &mcp_portB,BUZZER_OFF,RED_ON,GREEN_OFF,AMBER_OFF);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4921      	ldr	r1, [pc, #132]	; (8002f30 <ErrorState+0x1a4>)
 8002eac:	4821      	ldr	r0, [pc, #132]	; (8002f34 <ErrorState+0x1a8>)
 8002eae:	f00a fa48 	bl	800d342 <TowerLamp_SetState>
			TowerLamp_ApplyState(&hmcp,&mcp_portB);
 8002eb2:	491f      	ldr	r1, [pc, #124]	; (8002f30 <ErrorState+0x1a4>)
 8002eb4:	481f      	ldr	r0, [pc, #124]	; (8002f34 <ErrorState+0x1a8>)
 8002eb6:	f00a fa96 	bl	800d3e6 <TowerLamp_ApplyState>

			L.logRunStateChange = 1;
 8002eba:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <ErrorState+0x1ac>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			S.oneTime = 0;
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <ErrorState+0x198>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
		}


		//comes From Ack and SMPS short after the initial error has run through
		// for instance the lift relative error ack error comes
		if ((S.SMPS_switchOff) && (SMPS_turnOff_oneTime == 1)){
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <ErrorState+0x198>)
 8002eca:	7e5b      	ldrb	r3, [r3, #25]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <ErrorState+0x152>
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d103      	bne.n	8002ede <ErrorState+0x152>
			SMPS_TurnOff();
 8002ed6:	f003 fb0d 	bl	80064f4 <SMPS_TurnOff>
			SMPS_turnOff_oneTime = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]
		}

		// 1s timer.
		if ((S.BT_sendState == 1) && (S.BT_transmission_over == 1)){
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <ErrorState+0x198>)
 8002ee0:	7c1b      	ldrb	r3, [r3, #16]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d115      	bne.n	8002f12 <ErrorState+0x186>
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <ErrorState+0x198>)
 8002ee8:	7d5b      	ldrb	r3, [r3, #21]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d111      	bne.n	8002f12 <ErrorState+0x186>
			BTpacketSize = BT_MC_generateStatusMsg(BT_STOP);
 8002eee:	2003      	movs	r0, #3
 8002ef0:	f001 f9f8 	bl	80042e4 <BT_MC_generateStatusMsg>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	757b      	strb	r3, [r7, #21]
			HAL_UART_Transmit_IT(&huart1, (uint8_t*) BufferTransmit,BTpacketSize);
 8002ef8:	7d7b      	ldrb	r3, [r7, #21]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	490f      	ldr	r1, [pc, #60]	; (8002f3c <ErrorState+0x1b0>)
 8002f00:	480f      	ldr	r0, [pc, #60]	; (8002f40 <ErrorState+0x1b4>)
 8002f02:	f007 ff3f 	bl	800ad84 <HAL_UART_Transmit_IT>
			S.BT_transmission_over = 0;
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <ErrorState+0x198>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	755a      	strb	r2, [r3, #21]
			S.BT_sendState = 0;
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <ErrorState+0x198>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	741a      	strb	r2, [r3, #16]
		}

		if (S.LOG_enabled){
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <ErrorState+0x198>)
 8002f14:	7e9b      	ldrb	r3, [r3, #26]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f43f af43 	beq.w	8002da2 <ErrorState+0x16>
			Log_DoOneCycle();
 8002f1c:	f00a f84c 	bl	800cfb8 <Log_DoOneCycle>
		if (S.oneTime){
 8002f20:	e73f      	b.n	8002da2 <ErrorState+0x16>
 8002f22:	bf00      	nop
 8002f24:	20000738 	.word	0x20000738
 8002f28:	20000684 	.word	0x20000684
 8002f2c:	08011e60 	.word	0x08011e60
 8002f30:	200008c8 	.word	0x200008c8
 8002f34:	200008bc 	.word	0x200008bc
 8002f38:	200008d8 	.word	0x200008d8
 8002f3c:	2000099c 	.word	0x2000099c
 8002f40:	20000440 	.word	0x20000440

08002f44 <FinishState>:
#include "mcp23017.h"
#include "Log.h"

extern UART_HandleTypeDef huart1;

void FinishState(void){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
	/* when you enter this state, start the motors. if the rotary switch is on,
	 * When you press the yellow button, Pause.When u press the green, Resume.
	 * The red btn, doesnt care about the position of the rotary switch and will stop the run
	 * and go back to idle.
	 */
	uint8_t noOfMotors = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73bb      	strb	r3, [r7, #14]
	uint8_t BTpacketSize = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	737b      	strb	r3, [r7, #13]
	uint8_t buzzerCounter = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]

	while(1){

		if (S.oneTime){
 8002f56:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <FinishState+0xac>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01f      	beq.n	8002f9e <FinishState+0x5a>
			uint8_t motors[] = {CARDING_CYLINDER,BEATER_CYLINDER,CARDING_FEED,BEATER_FEED,CAGE,COILER};
 8002f5e:	4a25      	ldr	r2, [pc, #148]	; (8002ff4 <FinishState+0xb0>)
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f66:	6018      	str	r0, [r3, #0]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	8019      	strh	r1, [r3, #0]
			noOfMotors = 6;
 8002f6c:	2306      	movs	r3, #6
 8002f6e:	73bb      	strb	r3, [r7, #14]
			SendCommands_To_MultipleMotors(motors,noOfMotors,RAMPDOWN_STOP);
 8002f70:	7bb9      	ldrb	r1, [r7, #14]
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	2203      	movs	r2, #3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 fffc 	bl	8005f74 <SendCommands_To_MultipleMotors>

			TowerLamp_SetState(&hmcp, &mcp_portB,BUZZER_OFF,RED_ON,GREEN_ON,AMBER_ON);
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	2301      	movs	r3, #1
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2301      	movs	r3, #1
 8002f86:	2200      	movs	r2, #0
 8002f88:	491b      	ldr	r1, [pc, #108]	; (8002ff8 <FinishState+0xb4>)
 8002f8a:	481c      	ldr	r0, [pc, #112]	; (8002ffc <FinishState+0xb8>)
 8002f8c:	f00a f9d9 	bl	800d342 <TowerLamp_SetState>
			TowerLamp_ApplyState(&hmcp,&mcp_portB);
 8002f90:	4919      	ldr	r1, [pc, #100]	; (8002ff8 <FinishState+0xb4>)
 8002f92:	481a      	ldr	r0, [pc, #104]	; (8002ffc <FinishState+0xb8>)
 8002f94:	f00a fa27 	bl	800d3e6 <TowerLamp_ApplyState>

			S.oneTime = 0;
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <FinishState+0xac>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
		}


		// 1s timer.
		if ((S.BT_sendState == 1) && (S.BT_transmission_over == 1)){
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <FinishState+0xac>)
 8002fa0:	7c1b      	ldrb	r3, [r3, #16]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d1d7      	bne.n	8002f56 <FinishState+0x12>
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <FinishState+0xac>)
 8002fa8:	7d5b      	ldrb	r3, [r3, #21]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d1d3      	bne.n	8002f56 <FinishState+0x12>
			BTpacketSize = BT_MC_generateStatusMsg(BT_FINISH);
 8002fae:	2006      	movs	r0, #6
 8002fb0:	f001 f998 	bl	80042e4 <BT_MC_generateStatusMsg>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	737b      	strb	r3, [r7, #13]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,BTpacketSize);
 8002fb8:	7b7b      	ldrb	r3, [r7, #13]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4910      	ldr	r1, [pc, #64]	; (8003000 <FinishState+0xbc>)
 8002fc0:	4810      	ldr	r0, [pc, #64]	; (8003004 <FinishState+0xc0>)
 8002fc2:	f007 fedf 	bl	800ad84 <HAL_UART_Transmit_IT>
			S.BT_transmission_over = 0;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <FinishState+0xac>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	755a      	strb	r2, [r3, #21]
			S.BT_sendState = 0;
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <FinishState+0xac>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	741a      	strb	r2, [r3, #16]
			if (buzzerCounter == 2){
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d1be      	bne.n	8002f56 <FinishState+0x12>
				TowerLamp_NegateState(&hmcp,&mcp_portB,TOWER_BUZZER);
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4907      	ldr	r1, [pc, #28]	; (8002ff8 <FinishState+0xb4>)
 8002fdc:	4807      	ldr	r0, [pc, #28]	; (8002ffc <FinishState+0xb8>)
 8002fde:	f00a fa16 	bl	800d40e <TowerLamp_NegateState>
				TowerLamp_ApplyState(&hmcp,&mcp_portB);
 8002fe2:	4905      	ldr	r1, [pc, #20]	; (8002ff8 <FinishState+0xb4>)
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <FinishState+0xb8>)
 8002fe6:	f00a f9fe 	bl	800d3e6 <TowerLamp_ApplyState>
				buzzerCounter = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
		if (S.oneTime){
 8002fee:	e7b2      	b.n	8002f56 <FinishState+0x12>
 8002ff0:	20000738 	.word	0x20000738
 8002ff4:	08011e68 	.word	0x08011e68
 8002ff8:	200008c8 	.word	0x200008c8
 8002ffc:	200008bc 	.word	0x200008bc
 8003000:	2000099c 	.word	0x2000099c
 8003004:	20000440 	.word	0x20000440

08003008 <IdleState>:
#include "MachineSensors.h"
#include "Log.h"

extern UART_HandleTypeDef huart1;

void IdleState(void){
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af02      	add	r7, sp, #8
	 * and save. Only for Carding you can change even in run mode
	 *
	 * When u press the red Btn in runState you come back to idle. At that point we want to clear
	 * any runTime vars so that user is force to start a new run.
	 */
	uint8_t response = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	71fb      	strb	r3, [r7, #7]
	uint8_t BTpacketSize = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	71bb      	strb	r3, [r7, #6]
	while(1){

		if (S.oneTime){
 8003016:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <IdleState+0x13c>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d024      	beq.n	8003068 <IdleState+0x60>
			TowerLamp_SetState(&hmcp, &mcp_portB,BUZZER_OFF,RED_OFF,GREEN_OFF,AMBER_ON);
 800301e:	2301      	movs	r3, #1
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	2300      	movs	r3, #0
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	2300      	movs	r3, #0
 8003028:	2200      	movs	r2, #0
 800302a:	4947      	ldr	r1, [pc, #284]	; (8003148 <IdleState+0x140>)
 800302c:	4847      	ldr	r0, [pc, #284]	; (800314c <IdleState+0x144>)
 800302e:	f00a f988 	bl	800d342 <TowerLamp_SetState>
			TowerLamp_ApplyState(&hmcp,&mcp_portB);
 8003032:	4945      	ldr	r1, [pc, #276]	; (8003148 <IdleState+0x140>)
 8003034:	4845      	ldr	r0, [pc, #276]	; (800314c <IdleState+0x144>)
 8003036:	f00a f9d6 	bl	800d3e6 <TowerLamp_ApplyState>

			CalculateMachineParameters(&msp,&mcParams);
 800303a:	4945      	ldr	r1, [pc, #276]	; (8003150 <IdleState+0x148>)
 800303c:	4845      	ldr	r0, [pc, #276]	; (8003154 <IdleState+0x14c>)
 800303e:	f002 fe07 	bl	8005c50 <CalculateMachineParameters>
			ReadySetupCommand_AllMotors(&msp,&mcParams);
 8003042:	4943      	ldr	r1, [pc, #268]	; (8003150 <IdleState+0x148>)
 8003044:	4843      	ldr	r0, [pc, #268]	; (8003154 <IdleState+0x14c>)
 8003046:	f002 ff2d 	bl	8005ea4 <ReadySetupCommand_AllMotors>
			//Reset Run machine Parameters
			mcParams.currentMtrsRun = 0;
 800304a:	4b41      	ldr	r3, [pc, #260]	; (8003150 <IdleState+0x148>)
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	619a      	str	r2, [r3, #24]

			L.logRunStateChange = 1;
 8003052:	4b41      	ldr	r3, [pc, #260]	; (8003158 <IdleState+0x150>)
 8003054:	2201      	movs	r2, #1
 8003056:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			L.flushBuffer = 1;
 800305a:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <IdleState+0x150>)
 800305c:	2201      	movs	r2, #1
 800305e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			S.oneTime  = 0;
 8003062:	4b38      	ldr	r3, [pc, #224]	; (8003144 <IdleState+0x13c>)
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
		}

		if (usrBtns.rotarySwitch == ROTARY_SWITCH_ON){
 8003068:	4b3c      	ldr	r3, [pc, #240]	; (800315c <IdleState+0x154>)
 800306a:	799b      	ldrb	r3, [r3, #6]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <IdleState+0x70>
			SetCoilerSensorState(&sensor,SENSOR_ENABLE);
 8003070:	2101      	movs	r1, #1
 8003072:	483b      	ldr	r0, [pc, #236]	; (8003160 <IdleState+0x158>)
 8003074:	f002 fc06 	bl	8005884 <SetCoilerSensorState>
		}

		if (usrBtns.rotarySwitch == ROTARY_SWITCH_OFF){
 8003078:	4b38      	ldr	r3, [pc, #224]	; (800315c <IdleState+0x154>)
 800307a:	799b      	ldrb	r3, [r3, #6]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d103      	bne.n	8003088 <IdleState+0x80>
			SetCoilerSensorState(&sensor,SENSOR_DISABLE);
 8003080:	2102      	movs	r1, #2
 8003082:	4837      	ldr	r0, [pc, #220]	; (8003160 <IdleState+0x158>)
 8003084:	f002 fbfe 	bl	8005884 <SetCoilerSensorState>
		}

		if (usrBtns.greenBtn == BTN_PRESSED){
 8003088:	4b34      	ldr	r3, [pc, #208]	; (800315c <IdleState+0x154>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <IdleState+0xa4>
			usrBtns.greenBtn = BTN_IDLE;
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <IdleState+0x154>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
			if (S.HomingDone){
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <IdleState+0x13c>)
 8003098:	7a5b      	ldrb	r3, [r3, #9]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d006      	beq.n	80030ac <IdleState+0xa4>
				Log_ResetRunTimeRdngNos(); //
 800309e:	f00a f84d 	bl	800d13c <Log_ResetRunTimeRdngNos>
				ChangeState(&S,RUN_STATE);
 80030a2:	2103      	movs	r1, #3
 80030a4:	4827      	ldr	r0, [pc, #156]	; (8003144 <IdleState+0x13c>)
 80030a6:	f7fe f8f2 	bl	800128e <ChangeState>
				break;
 80030aa:	e046      	b.n	800313a <IdleState+0x132>
			}
		}

		//----------- go to other places-------

		if (S.switchState == TO_SETTINGS){
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <IdleState+0x13c>)
 80030ae:	78db      	ldrb	r3, [r3, #3]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <IdleState+0xbc>
			ChangeState(&S,SETTINGS_STATE);
 80030b4:	2108      	movs	r1, #8
 80030b6:	4823      	ldr	r0, [pc, #140]	; (8003144 <IdleState+0x13c>)
 80030b8:	f7fe f8e9 	bl	800128e <ChangeState>
			S.switchState = 0;
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <IdleState+0x13c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	70da      	strb	r2, [r3, #3]
			break;
 80030c2:	e03a      	b.n	800313a <IdleState+0x132>
		}else if (S.switchState == TO_DIAGNOSTICS){
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <IdleState+0x13c>)
 80030c6:	78db      	ldrb	r3, [r3, #3]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d107      	bne.n	80030dc <IdleState+0xd4>
			ChangeState(&S,DIAGNOSTICS_STATE);
 80030cc:	2104      	movs	r1, #4
 80030ce:	481d      	ldr	r0, [pc, #116]	; (8003144 <IdleState+0x13c>)
 80030d0:	f7fe f8dd 	bl	800128e <ChangeState>
			S.switchState = 0;
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <IdleState+0x13c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	70da      	strb	r2, [r3, #3]
			break;
 80030da:	e02e      	b.n	800313a <IdleState+0x132>
			//Setup command Error. No motor would have started. just
			//Send a snackbar to the app
		}

		//Error State
		if(ME.ErrorFlag == 1){
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <IdleState+0x15c>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d104      	bne.n	80030ee <IdleState+0xe6>
			ChangeState(&S,ERROR_STATE);
 80030e4:	2107      	movs	r1, #7
 80030e6:	4817      	ldr	r0, [pc, #92]	; (8003144 <IdleState+0x13c>)
 80030e8:	f7fe f8d1 	bl	800128e <ChangeState>
			break;
 80030ec:	e025      	b.n	800313a <IdleState+0x132>
		}

		//--------sending BT info--------
		// 500ms timer.
		if ((S.BT_sendState == 1) && (S.BT_transmission_over == 1)){
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <IdleState+0x13c>)
 80030f0:	7c1b      	ldrb	r3, [r3, #16]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d115      	bne.n	8003122 <IdleState+0x11a>
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <IdleState+0x13c>)
 80030f8:	7d5b      	ldrb	r3, [r3, #21]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d111      	bne.n	8003122 <IdleState+0x11a>
				BTpacketSize = BT_MC_generateStatusMsg(BT_IDLE);
 80030fe:	2000      	movs	r0, #0
 8003100:	f001 f8f0 	bl	80042e4 <BT_MC_generateStatusMsg>
 8003104:	4603      	mov	r3, r0
 8003106:	71bb      	strb	r3, [r7, #6]

			HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,BTpacketSize);
 8003108:	79bb      	ldrb	r3, [r7, #6]
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	4916      	ldr	r1, [pc, #88]	; (8003168 <IdleState+0x160>)
 8003110:	4816      	ldr	r0, [pc, #88]	; (800316c <IdleState+0x164>)
 8003112:	f007 fe37 	bl	800ad84 <HAL_UART_Transmit_IT>
			S.BT_transmission_over = 0;
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <IdleState+0x13c>)
 8003118:	2200      	movs	r2, #0
 800311a:	755a      	strb	r2, [r3, #21]
			S.BT_sendState = 0;
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <IdleState+0x13c>)
 800311e:	2200      	movs	r2, #0
 8003120:	741a      	strb	r2, [r3, #16]
		}

		//in idle only the state change gets logged. no motor running
		if (S.LOG_enabled){
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <IdleState+0x13c>)
 8003124:	7e9b      	ldrb	r3, [r3, #26]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <IdleState+0x126>
			Log_DoOneCycle();
 800312a:	f009 ff45 	bl	800cfb8 <Log_DoOneCycle>
		}

		//-------for Manual change--------
		if (S.current_state != IDLE_STATE){
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <IdleState+0x13c>)
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d100      	bne.n	8003138 <IdleState+0x130>
		if (S.oneTime){
 8003136:	e76e      	b.n	8003016 <IdleState+0xe>
			break;
 8003138:	bf00      	nop
		}


	}//closes while

}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000738 	.word	0x20000738
 8003148:	200008c8 	.word	0x200008c8
 800314c:	200008bc 	.word	0x200008bc
 8003150:	20000660 	.word	0x20000660
 8003154:	20000620 	.word	0x20000620
 8003158:	200008d8 	.word	0x200008d8
 800315c:	200008b0 	.word	0x200008b0
 8003160:	200008d0 	.word	0x200008d0
 8003164:	20000684 	.word	0x20000684
 8003168:	2000099c 	.word	0x2000099c
 800316c:	20000440 	.word	0x20000440

08003170 <RunState>:
#include "MachineSensors.h"
#include "Log.h"

extern UART_HandleTypeDef huart1;

void RunState(void){
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
	 * cylinders
	 * if the duct sensor triggers, turn off the beater feed motor, and wait till it releases before you turn it
	 * back on again.
	 * also need to check if the production limit has been reached and stop the motors if you have.
	 */
	uint8_t response = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	75bb      	strb	r3, [r7, #22]
	uint8_t noOfMotors = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	757b      	strb	r3, [r7, #21]
	uint8_t BTpacketSize = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
	while(1){

		if (S.oneTime){
 8003182:	4b9b      	ldr	r3, [pc, #620]	; (80033f0 <RunState+0x280>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d054      	beq.n	8003234 <RunState+0xc4>
			//send the start commands
			uint8_t motors[] = {CARDING_CYLINDER,BEATER_CYLINDER};
 800318a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800318e:	823b      	strh	r3, [r7, #16]
			noOfMotors = 2;
 8003190:	2302      	movs	r3, #2
 8003192:	757b      	strb	r3, [r7, #21]
			response = SendCommands_To_MultipleMotors(motors,noOfMotors,START);
 8003194:	7d79      	ldrb	r1, [r7, #21]
 8003196:	f107 0310 	add.w	r3, r7, #16
 800319a:	2202      	movs	r2, #2
 800319c:	4618      	mov	r0, r3
 800319e:	f002 fee9 	bl	8005f74 <SendCommands_To_MultipleMotors>
 80031a2:	4603      	mov	r3, r0
 80031a4:	75bb      	strb	r3, [r7, #22]
			if (response!= 2){
 80031a6:	7dbb      	ldrb	r3, [r7, #22]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d006      	beq.n	80031ba <RunState+0x4a>
				SO_enableCANObservers(&SO,motors,noOfMotors);
 80031ac:	7d7a      	ldrb	r2, [r7, #21]
 80031ae:	f107 0310 	add.w	r3, r7, #16
 80031b2:	4619      	mov	r1, r3
 80031b4:	488f      	ldr	r0, [pc, #572]	; (80033f4 <RunState+0x284>)
 80031b6:	f009 fff9 	bl	800d1ac <SO_enableCANObservers>
			}

			S.runMode = RUN_OPERATING;
 80031ba:	4b8d      	ldr	r3, [pc, #564]	; (80033f0 <RunState+0x280>)
 80031bc:	2201      	movs	r2, #1
 80031be:	715a      	strb	r2, [r3, #5]
			mcParams.allMotorsOn = 0;
 80031c0:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <RunState+0x288>)
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]

			Log_setUpLogging(&L,motors,noOfMotors);
 80031c8:	7d7a      	ldrb	r2, [r7, #21]
 80031ca:	f107 0310 	add.w	r3, r7, #16
 80031ce:	4619      	mov	r1, r3
 80031d0:	488a      	ldr	r0, [pc, #552]	; (80033fc <RunState+0x28c>)
 80031d2:	f009 fe73 	bl	800cebc <Log_setUpLogging>
			Log_ResetBufferIndex(&L);
 80031d6:	4889      	ldr	r0, [pc, #548]	; (80033fc <RunState+0x28c>)
 80031d8:	f009 ffce 	bl	800d178 <Log_ResetBufferIndex>
			if (S.LOG_enabled){
 80031dc:	4b84      	ldr	r3, [pc, #528]	; (80033f0 <RunState+0x280>)
 80031de:	7e9b      	ldrb	r3, [r3, #26]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d016      	beq.n	8003212 <RunState+0xa2>
				L.bufferIdx += Log_addSettingsDataToBuffer(&msp,L.bufferIdx);
 80031e4:	4b85      	ldr	r3, [pc, #532]	; (80033fc <RunState+0x28c>)
 80031e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031e8:	4619      	mov	r1, r3
 80031ea:	4885      	ldr	r0, [pc, #532]	; (8003400 <RunState+0x290>)
 80031ec:	f009 fdc6 	bl	800cd7c <Log_addSettingsDataToBuffer>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4619      	mov	r1, r3
 80031f4:	4b81      	ldr	r3, [pc, #516]	; (80033fc <RunState+0x28c>)
 80031f6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80031f8:	b28b      	uxth	r3, r1
 80031fa:	4413      	add	r3, r2
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	4b7f      	ldr	r3, [pc, #508]	; (80033fc <RunState+0x28c>)
 8003200:	849a      	strh	r2, [r3, #36]	; 0x24
				L.logLayerChange = 1; //one time set it here so that when we start we get 0th layer rdngs.
 8003202:	4b7e      	ldr	r3, [pc, #504]	; (80033fc <RunState+0x28c>)
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				L.logRunStateChange = 1;
 800320a:	4b7c      	ldr	r3, [pc, #496]	; (80033fc <RunState+0x28c>)
 800320c:	2201      	movs	r2, #1
 800320e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			}
			//when u start your in the run mode
			TowerLamp_SetState(&hmcp, &mcp_portB,BUZZER_OFF,RED_OFF,GREEN_ON,AMBER_OFF);
 8003212:	2300      	movs	r3, #0
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	2301      	movs	r3, #1
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	2200      	movs	r2, #0
 800321e:	4979      	ldr	r1, [pc, #484]	; (8003404 <RunState+0x294>)
 8003220:	4879      	ldr	r0, [pc, #484]	; (8003408 <RunState+0x298>)
 8003222:	f00a f88e 	bl	800d342 <TowerLamp_SetState>
			TowerLamp_ApplyState(&hmcp,&mcp_portB);
 8003226:	4977      	ldr	r1, [pc, #476]	; (8003404 <RunState+0x294>)
 8003228:	4877      	ldr	r0, [pc, #476]	; (8003408 <RunState+0x298>)
 800322a:	f00a f8dc 	bl	800d3e6 <TowerLamp_ApplyState>

			S.oneTime = 0;
 800322e:	4b70      	ldr	r3, [pc, #448]	; (80033f0 <RunState+0x280>)
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
		}

		if ((usrBtns.yellowBtn == BTN_PRESSED) && (S.runMode == RUN_OPERATING)){
 8003234:	4b75      	ldr	r3, [pc, #468]	; (800340c <RunState+0x29c>)
 8003236:	889b      	ldrh	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d12e      	bne.n	800329a <RunState+0x12a>
 800323c:	4b6c      	ldr	r3, [pc, #432]	; (80033f0 <RunState+0x280>)
 800323e:	795b      	ldrb	r3, [r3, #5]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d12a      	bne.n	800329a <RunState+0x12a>
			usrBtns.yellowBtn = BTN_IDLE;
 8003244:	4b71      	ldr	r3, [pc, #452]	; (800340c <RunState+0x29c>)
 8003246:	2201      	movs	r2, #1
 8003248:	809a      	strh	r2, [r3, #4]
			//Pause
			uint8_t motors[] = {CARDING_FEED,BEATER_FEED,CAGE,COILER};
 800324a:	4b71      	ldr	r3, [pc, #452]	; (8003410 <RunState+0x2a0>)
 800324c:	60fb      	str	r3, [r7, #12]
			noOfMotors = 4;
 800324e:	2304      	movs	r3, #4
 8003250:	757b      	strb	r3, [r7, #21]
			response = SendCommands_To_MultipleMotors(motors,noOfMotors,RAMPDOWN_STOP);
 8003252:	7d79      	ldrb	r1, [r7, #21]
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	2203      	movs	r2, #3
 800325a:	4618      	mov	r0, r3
 800325c:	f002 fe8a 	bl	8005f74 <SendCommands_To_MultipleMotors>
 8003260:	4603      	mov	r3, r0
 8003262:	75bb      	strb	r3, [r7, #22]
			TowerLamp_SetState(&hmcp, &mcp_portB,BUZZER_OFF,RED_OFF,GREEN_OFF,AMBER_ON);
 8003264:	2301      	movs	r3, #1
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2300      	movs	r3, #0
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	2200      	movs	r2, #0
 8003270:	4964      	ldr	r1, [pc, #400]	; (8003404 <RunState+0x294>)
 8003272:	4865      	ldr	r0, [pc, #404]	; (8003408 <RunState+0x298>)
 8003274:	f00a f865 	bl	800d342 <TowerLamp_SetState>
			TowerLamp_ApplyState(&hmcp,&mcp_portB);
 8003278:	4962      	ldr	r1, [pc, #392]	; (8003404 <RunState+0x294>)
 800327a:	4863      	ldr	r0, [pc, #396]	; (8003408 <RunState+0x298>)
 800327c:	f00a f8b3 	bl	800d3e6 <TowerLamp_ApplyState>

			//TODO - later make it such that once the CAN starts it never needs to stop.
			SO_disableAndResetCANObservers(&SO);
 8003280:	485c      	ldr	r0, [pc, #368]	; (80033f4 <RunState+0x284>)
 8003282:	f009 ffd3 	bl	800d22c <SO_disableAndResetCANObservers>

			S.runMode = RUN_PAUSED;
 8003286:	4b5a      	ldr	r3, [pc, #360]	; (80033f0 <RunState+0x280>)
 8003288:	2202      	movs	r2, #2
 800328a:	715a      	strb	r2, [r3, #5]
			S.BT_pauseReason = BT_PAUSE_USER_PRESSED;
 800328c:	4b58      	ldr	r3, [pc, #352]	; (80033f0 <RunState+0x280>)
 800328e:	2201      	movs	r2, #1
 8003290:	745a      	strb	r2, [r3, #17]
			L.logRunStateChange = 1;
 8003292:	4b5a      	ldr	r3, [pc, #360]	; (80033fc <RunState+0x28c>)
 8003294:	2201      	movs	r2, #1
 8003296:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		}

		if ((usrBtns.greenBtn == BTN_PRESSED)  && (S.runMode == RUN_PAUSED)){
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <RunState+0x29c>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d132      	bne.n	8003308 <RunState+0x198>
 80032a2:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <RunState+0x280>)
 80032a4:	795b      	ldrb	r3, [r3, #5]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d12e      	bne.n	8003308 <RunState+0x198>
			usrBtns.greenBtn = BTN_IDLE;
 80032aa:	4b58      	ldr	r3, [pc, #352]	; (800340c <RunState+0x29c>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
			//RESUME
			uint8_t motors[] = {CARDING_FEED,BEATER_FEED,CAGE,COILER};
 80032b0:	4b57      	ldr	r3, [pc, #348]	; (8003410 <RunState+0x2a0>)
 80032b2:	60bb      	str	r3, [r7, #8]
			noOfMotors = 4;
 80032b4:	2304      	movs	r3, #4
 80032b6:	757b      	strb	r3, [r7, #21]
			response = SendCommands_To_MultipleMotors(motors,noOfMotors,RESUME);
 80032b8:	7d79      	ldrb	r1, [r7, #21]
 80032ba:	f107 0308 	add.w	r3, r7, #8
 80032be:	2206      	movs	r2, #6
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 fe57 	bl	8005f74 <SendCommands_To_MultipleMotors>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75bb      	strb	r3, [r7, #22]

			//TODO - later make it such that once the CAN starts it never needs to stop.
			// so we will not have this statement.
			if (response!= 2){
 80032ca:	7dbb      	ldrb	r3, [r7, #22]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d006      	beq.n	80032de <RunState+0x16e>
				SO_enableCANObservers(&SO,motors,noOfMotors);
 80032d0:	7d7a      	ldrb	r2, [r7, #21]
 80032d2:	f107 0308 	add.w	r3, r7, #8
 80032d6:	4619      	mov	r1, r3
 80032d8:	4846      	ldr	r0, [pc, #280]	; (80033f4 <RunState+0x284>)
 80032da:	f009 ff67 	bl	800d1ac <SO_enableCANObservers>
			}
			S.runMode = RUN_OPERATING;
 80032de:	4b44      	ldr	r3, [pc, #272]	; (80033f0 <RunState+0x280>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	715a      	strb	r2, [r3, #5]

			TowerLamp_SetState(&hmcp, &mcp_portB,BUZZER_OFF,RED_OFF,GREEN_ON,AMBER_OFF);
 80032e4:	2300      	movs	r3, #0
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2301      	movs	r3, #1
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	2200      	movs	r2, #0
 80032f0:	4944      	ldr	r1, [pc, #272]	; (8003404 <RunState+0x294>)
 80032f2:	4845      	ldr	r0, [pc, #276]	; (8003408 <RunState+0x298>)
 80032f4:	f00a f825 	bl	800d342 <TowerLamp_SetState>
			TowerLamp_ApplyState(&hmcp,&mcp_portB);
 80032f8:	4942      	ldr	r1, [pc, #264]	; (8003404 <RunState+0x294>)
 80032fa:	4843      	ldr	r0, [pc, #268]	; (8003408 <RunState+0x298>)
 80032fc:	f00a f873 	bl	800d3e6 <TowerLamp_ApplyState>
			L.logRunStateChange = 1;
 8003300:	4b3e      	ldr	r3, [pc, #248]	; (80033fc <RunState+0x28c>)
 8003302:	2201      	movs	r2, #1
 8003304:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		}

		if ((usrBtns.rotarySwitch == ROTARY_SWITCH_ON) && (sensor.coilerSensor_activated == 0)){
 8003308:	4b40      	ldr	r3, [pc, #256]	; (800340c <RunState+0x29c>)
 800330a:	799b      	ldrb	r3, [r3, #6]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <RunState+0x1b0>
 8003310:	4b40      	ldr	r3, [pc, #256]	; (8003414 <RunState+0x2a4>)
 8003312:	789b      	ldrb	r3, [r3, #2]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d103      	bne.n	8003320 <RunState+0x1b0>
			SetCoilerSensorState(&sensor,SENSOR_ENABLE);
 8003318:	2101      	movs	r1, #1
 800331a:	483e      	ldr	r0, [pc, #248]	; (8003414 <RunState+0x2a4>)
 800331c:	f002 fab2 	bl	8005884 <SetCoilerSensorState>
		}

		if ((usrBtns.rotarySwitch == ROTARY_SWITCH_OFF) && (sensor.coilerSensor_activated == 1)){
 8003320:	4b3a      	ldr	r3, [pc, #232]	; (800340c <RunState+0x29c>)
 8003322:	799b      	ldrb	r3, [r3, #6]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d107      	bne.n	8003338 <RunState+0x1c8>
 8003328:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <RunState+0x2a4>)
 800332a:	789b      	ldrb	r3, [r3, #2]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d103      	bne.n	8003338 <RunState+0x1c8>
			SetCoilerSensorState(&sensor,SENSOR_DISABLE);
 8003330:	2102      	movs	r1, #2
 8003332:	4838      	ldr	r0, [pc, #224]	; (8003414 <RunState+0x2a4>)
 8003334:	f002 faa6 	bl	8005884 <SetCoilerSensorState>
		}

		// stop btn
		if (usrBtns.redBtn == BTN_PRESSED){
 8003338:	4b34      	ldr	r3, [pc, #208]	; (800340c <RunState+0x29c>)
 800333a:	885b      	ldrh	r3, [r3, #2]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d136      	bne.n	80033ae <RunState+0x23e>
			usrBtns.redBtn = BTN_IDLE;
 8003340:	4b32      	ldr	r3, [pc, #200]	; (800340c <RunState+0x29c>)
 8003342:	2201      	movs	r2, #1
 8003344:	805a      	strh	r2, [r3, #2]
			//STOP
			uint8_t motors[] = {CARDING_CYLINDER,BEATER_CYLINDER,CARDING_FEED,BEATER_FEED,CAGE,COILER};
 8003346:	4a34      	ldr	r2, [pc, #208]	; (8003418 <RunState+0x2a8>)
 8003348:	463b      	mov	r3, r7
 800334a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800334e:	6018      	str	r0, [r3, #0]
 8003350:	3304      	adds	r3, #4
 8003352:	8019      	strh	r1, [r3, #0]
			noOfMotors = 6;
 8003354:	2306      	movs	r3, #6
 8003356:	757b      	strb	r3, [r7, #21]
			response = SendCommands_To_MultipleMotors(motors,noOfMotors,EMERGENCY_STOP);
 8003358:	7d79      	ldrb	r1, [r7, #21]
 800335a:	463b      	mov	r3, r7
 800335c:	2201      	movs	r2, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f002 fe08 	bl	8005f74 <SendCommands_To_MultipleMotors>
 8003364:	4603      	mov	r3, r0
 8003366:	75bb      	strb	r3, [r7, #22]
			S.runMode = RUN_STOPPED ;
 8003368:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <RunState+0x280>)
 800336a:	2203      	movs	r2, #3
 800336c:	715a      	strb	r2, [r3, #5]
			S.BT_pauseReason = 0;
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <RunState+0x280>)
 8003370:	2200      	movs	r2, #0
 8003372:	745a      	strb	r2, [r3, #17]

			SO_disableAndResetCANObservers(&SO);
 8003374:	481f      	ldr	r0, [pc, #124]	; (80033f4 <RunState+0x284>)
 8003376:	f009 ff59 	bl	800d22c <SO_disableAndResetCANObservers>

			//beep once when we go to idle
			TowerLamp_SetState(&hmcp,&mcp_portB,BUZZER_ON,RED_OFF,GREEN_OFF,AMBER_OFF);
 800337a:	2300      	movs	r3, #0
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2300      	movs	r3, #0
 8003384:	2201      	movs	r2, #1
 8003386:	491f      	ldr	r1, [pc, #124]	; (8003404 <RunState+0x294>)
 8003388:	481f      	ldr	r0, [pc, #124]	; (8003408 <RunState+0x298>)
 800338a:	f009 ffda 	bl	800d342 <TowerLamp_SetState>
			TowerLamp_ApplyState(&hmcp,&mcp_portB);
 800338e:	491d      	ldr	r1, [pc, #116]	; (8003404 <RunState+0x294>)
 8003390:	481d      	ldr	r0, [pc, #116]	; (8003408 <RunState+0x298>)
 8003392:	f00a f828 	bl	800d3e6 <TowerLamp_ApplyState>
			HAL_Delay(1000); // to hear the beep
 8003396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800339a:	f003 f931 	bl	8006600 <HAL_Delay>

			ChangeState(&S,IDLE_STATE);
 800339e:	2102      	movs	r1, #2
 80033a0:	4813      	ldr	r0, [pc, #76]	; (80033f0 <RunState+0x280>)
 80033a2:	f7fd ff74 	bl	800128e <ChangeState>
			SO_Reset_InitialLiftPosRecieved(&SO);
 80033a6:	4813      	ldr	r0, [pc, #76]	; (80033f4 <RunState+0x284>)
 80033a8:	f009 fef3 	bl	800d192 <SO_Reset_InitialLiftPosRecieved>
			break;
 80033ac:	e05e      	b.n	800346c <RunState+0x2fc>
		}
		*/
		//--------ways to go into Error State--------

		//Error State
		if(ME.ErrorFlag == 1){
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <RunState+0x2ac>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d104      	bne.n	80033c0 <RunState+0x250>
			ChangeState(&S,ERROR_STATE);
 80033b6:	2107      	movs	r1, #7
 80033b8:	480d      	ldr	r0, [pc, #52]	; (80033f0 <RunState+0x280>)
 80033ba:	f7fd ff68 	bl	800128e <ChangeState>
			break;
 80033be:	e055      	b.n	800346c <RunState+0x2fc>
		}

		if (S.LOG_enabled){
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <RunState+0x280>)
 80033c2:	7e9b      	ldrb	r3, [r3, #26]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <RunState+0x25c>
			Log_DoOneCycle();
 80033c8:	f009 fdf6 	bl	800cfb8 <Log_DoOneCycle>
		}

		//--------sending BT info--------
		// 500ms timer.
		if ((S.BT_sendState == 1) && (S.BT_transmission_over == 1)){
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <RunState+0x280>)
 80033ce:	7c1b      	ldrb	r3, [r3, #16]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d137      	bne.n	8003444 <RunState+0x2d4>
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <RunState+0x280>)
 80033d6:	7d5b      	ldrb	r3, [r3, #21]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d133      	bne.n	8003444 <RunState+0x2d4>
			if (S.runMode == RUN_OPERATING ){
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <RunState+0x280>)
 80033de:	795b      	ldrb	r3, [r3, #5]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d11d      	bne.n	8003420 <RunState+0x2b0>
				BTpacketSize = BT_MC_generateStatusMsg(BT_RUN);
 80033e4:	2001      	movs	r0, #1
 80033e6:	f000 ff7d 	bl	80042e4 <BT_MC_generateStatusMsg>
 80033ea:	4603      	mov	r3, r0
 80033ec:	75fb      	strb	r3, [r7, #23]
 80033ee:	e01c      	b.n	800342a <RunState+0x2ba>
 80033f0:	20000738 	.word	0x20000738
 80033f4:	20000874 	.word	0x20000874
 80033f8:	20000660 	.word	0x20000660
 80033fc:	200008d8 	.word	0x200008d8
 8003400:	20000620 	.word	0x20000620
 8003404:	200008c8 	.word	0x200008c8
 8003408:	200008bc 	.word	0x200008bc
 800340c:	200008b0 	.word	0x200008b0
 8003410:	05020403 	.word	0x05020403
 8003414:	200008d0 	.word	0x200008d0
 8003418:	08011e70 	.word	0x08011e70
 800341c:	20000684 	.word	0x20000684
			}else{
				BTpacketSize = BT_MC_generateStatusMsg(BT_PAUSE);
 8003420:	2002      	movs	r0, #2
 8003422:	f000 ff5f 	bl	80042e4 <BT_MC_generateStatusMsg>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]
			}
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,BTpacketSize);
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	b29b      	uxth	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	4910      	ldr	r1, [pc, #64]	; (8003474 <RunState+0x304>)
 8003432:	4811      	ldr	r0, [pc, #68]	; (8003478 <RunState+0x308>)
 8003434:	f007 fca6 	bl	800ad84 <HAL_UART_Transmit_IT>
			S.BT_transmission_over = 0;
 8003438:	4b10      	ldr	r3, [pc, #64]	; (800347c <RunState+0x30c>)
 800343a:	2200      	movs	r2, #0
 800343c:	755a      	strb	r2, [r3, #21]
			S.BT_sendState = 0;
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <RunState+0x30c>)
 8003440:	2200      	movs	r2, #0
 8003442:	741a      	strb	r2, [r3, #16]
		}

		//TODO:TO STOP WHEN LENGTH FINISHED
		if (mcParams.currentMtrsRun >= msp.lengthLimit){
 8003444:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <RunState+0x310>)
 8003446:	ed93 7a06 	vldr	s14, [r3, #24]
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <RunState+0x314>)
 800344c:	8b5b      	ldrh	r3, [r3, #26]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	db04      	blt.n	800346a <RunState+0x2fa>
			ChangeState(&S,FINISHED_STATE);
 8003460:	2106      	movs	r1, #6
 8003462:	4806      	ldr	r0, [pc, #24]	; (800347c <RunState+0x30c>)
 8003464:	f7fd ff13 	bl	800128e <ChangeState>
			break;
 8003468:	e000      	b.n	800346c <RunState+0x2fc>
		if (S.oneTime){
 800346a:	e68a      	b.n	8003182 <RunState+0x12>



	}//closes while

}
 800346c:	bf00      	nop
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000099c 	.word	0x2000099c
 8003478:	20000440 	.word	0x20000440
 800347c:	20000738 	.word	0x20000738
 8003480:	20000660 	.word	0x20000660
 8003484:	20000620 	.word	0x20000620

08003488 <SettingsState>:
#include "stm32g4xx_hal.h"
#include "StateMachine.h"

extern UART_HandleTypeDef huart1;

void SettingsState(void){
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0

	uint8_t success = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	71fb      	strb	r3, [r7, #7]

	if (BT.information == REQ_SETTINGS_FROM_APP){
 8003492:	4b33      	ldr	r3, [pc, #204]	; (8003560 <SettingsState+0xd8>)
 8003494:	78db      	ldrb	r3, [r3, #3]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d113      	bne.n	80034c2 <SettingsState+0x3a>
		  uint8_t packetSize = BT_MC_generateSettingsMsg(&msp);
 800349a:	4832      	ldr	r0, [pc, #200]	; (8003564 <SettingsState+0xdc>)
 800349c:	f001 f8e2 	bl	8004664 <BT_MC_generateSettingsMsg>
 80034a0:	4603      	mov	r3, r0
 80034a2:	71bb      	strb	r3, [r7, #6]
		  while(S.BT_transmission_over != 1){};
 80034a4:	bf00      	nop
 80034a6:	4b30      	ldr	r3, [pc, #192]	; (8003568 <SettingsState+0xe0>)
 80034a8:	7d5b      	ldrb	r3, [r3, #21]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d1fb      	bne.n	80034a6 <SettingsState+0x1e>
		  HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,packetSize);
 80034ae:	79bb      	ldrb	r3, [r7, #6]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	492d      	ldr	r1, [pc, #180]	; (800356c <SettingsState+0xe4>)
 80034b6:	482e      	ldr	r0, [pc, #184]	; (8003570 <SettingsState+0xe8>)
 80034b8:	f007 fc64 	bl	800ad84 <HAL_UART_Transmit_IT>
		  S.BT_transmission_over = 0;
 80034bc:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <SettingsState+0xe0>)
 80034be:	2200      	movs	r2, #0
 80034c0:	755a      	strb	r2, [r3, #21]
	}

	if (BT.information == SETTINGS_FROM_APP){
 80034c2:	4b27      	ldr	r3, [pc, #156]	; (8003560 <SettingsState+0xd8>)
 80034c4:	78db      	ldrb	r3, [r3, #3]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d140      	bne.n	800354c <SettingsState+0xc4>
	  if (S.BT_dataOK){
 80034ca:	4b27      	ldr	r3, [pc, #156]	; (8003568 <SettingsState+0xe0>)
 80034cc:	799b      	ldrb	r3, [r3, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d02e      	beq.n	8003530 <SettingsState+0xa8>
		  if (BT.subState == SAVE_CARDING_SETTINGS){
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <SettingsState+0xd8>)
 80034d4:	791b      	ldrb	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d104      	bne.n	80034e4 <SettingsState+0x5c>
			  success = BT_MC_Save_Settings();
 80034da:	f001 fa4b 	bl	8004974 <BT_MC_Save_Settings>
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
 80034e2:	e007      	b.n	80034f4 <SettingsState+0x6c>
		  }else if (BT.subState == UPDATE_CARDING_SETTINGS){
 80034e4:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <SettingsState+0xd8>)
 80034e6:	791b      	ldrb	r3, [r3, #4]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d103      	bne.n	80034f4 <SettingsState+0x6c>
			  success = BT_MC_Update_Settings();
 80034ec:	f001 fa80 	bl	80049f0 <BT_MC_Update_Settings>
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
		  }else{}
		  if (success == 0){
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10e      	bne.n	8003518 <SettingsState+0x90>
			MBE.AppSettings_eepromWriteFailure += 1;
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <SettingsState+0xec>)
 80034fc:	78db      	ldrb	r3, [r3, #3]
 80034fe:	3301      	adds	r3, #1
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <SettingsState+0xec>)
 8003504:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit_IT(&huart1,(uint8_t*)SAVINGFAILURE,6);
 8003506:	2206      	movs	r2, #6
 8003508:	491b      	ldr	r1, [pc, #108]	; (8003578 <SettingsState+0xf0>)
 800350a:	4819      	ldr	r0, [pc, #100]	; (8003570 <SettingsState+0xe8>)
 800350c:	f007 fc3a 	bl	800ad84 <HAL_UART_Transmit_IT>
			S.BT_transmission_over = 1;
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <SettingsState+0xe0>)
 8003512:	2201      	movs	r2, #1
 8003514:	755a      	strb	r2, [r3, #21]
 8003516:	e007      	b.n	8003528 <SettingsState+0xa0>
		 }else{
			 // send success msg to App
			 HAL_UART_Transmit_IT(&huart1,(uint8_t*)SAVINGSUCCESS,6);
 8003518:	2206      	movs	r2, #6
 800351a:	4918      	ldr	r1, [pc, #96]	; (800357c <SettingsState+0xf4>)
 800351c:	4814      	ldr	r0, [pc, #80]	; (8003570 <SettingsState+0xe8>)
 800351e:	f007 fc31 	bl	800ad84 <HAL_UART_Transmit_IT>
			 S.BT_transmission_over = 1;
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <SettingsState+0xe0>)
 8003524:	2201      	movs	r2, #1
 8003526:	755a      	strb	r2, [r3, #21]
		 }
		  S.BT_dataOK = 0;
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <SettingsState+0xe0>)
 800352a:	2200      	movs	r2, #0
 800352c:	719a      	strb	r2, [r3, #6]
 800352e:	e00d      	b.n	800354c <SettingsState+0xc4>
	  }else{
		  S.BT_transmission_over = 0;
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <SettingsState+0xe0>)
 8003532:	2200      	movs	r2, #0
 8003534:	755a      	strb	r2, [r3, #21]
		  MBE.AppSettings_parsingFailure += 1;
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <SettingsState+0xec>)
 8003538:	789b      	ldrb	r3, [r3, #2]
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <SettingsState+0xec>)
 8003540:	709a      	strb	r2, [r3, #2]
		  HAL_UART_Transmit_IT(&huart1,(uint8_t*)SAVINGFAILURE,6);
 8003542:	2206      	movs	r2, #6
 8003544:	490c      	ldr	r1, [pc, #48]	; (8003578 <SettingsState+0xf0>)
 8003546:	480a      	ldr	r0, [pc, #40]	; (8003570 <SettingsState+0xe8>)
 8003548:	f007 fc1c 	bl	800ad84 <HAL_UART_Transmit_IT>
	}
	  /* go back to the idle state. the new values get integrated into the
	   * machine parameters struct in the idle state when you first enter it
	   */

	  ChangeState(&S,S.prev_state);
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <SettingsState+0xe0>)
 800354e:	789b      	ldrb	r3, [r3, #2]
 8003550:	4619      	mov	r1, r3
 8003552:	4805      	ldr	r0, [pc, #20]	; (8003568 <SettingsState+0xe0>)
 8003554:	f7fd fe9b 	bl	800128e <ChangeState>
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20000894 	.word	0x20000894
 8003564:	20000620 	.word	0x20000620
 8003568:	20000738 	.word	0x20000738
 800356c:	2000099c 	.word	0x2000099c
 8003570:	20000440 	.word	0x20000440
 8003574:	20000680 	.word	0x20000680
 8003578:	08011e78 	.word	0x08011e78
 800357c:	08011e80 	.word	0x08011e80

08003580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003580:	480d      	ldr	r0, [pc, #52]	; (80035b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003582:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003584:	480d      	ldr	r0, [pc, #52]	; (80035bc <LoopForever+0x6>)
  ldr r1, =_edata
 8003586:	490e      	ldr	r1, [pc, #56]	; (80035c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003588:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <LoopForever+0xe>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800358c:	e002      	b.n	8003594 <LoopCopyDataInit>

0800358e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800358e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003592:	3304      	adds	r3, #4

08003594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003598:	d3f9      	bcc.n	800358e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800359a:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800359c:	4c0b      	ldr	r4, [pc, #44]	; (80035cc <LoopForever+0x16>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a0:	e001      	b.n	80035a6 <LoopFillZerobss>

080035a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a4:	3204      	adds	r2, #4

080035a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a8:	d3fb      	bcc.n	80035a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035aa:	f7ff f9f3 	bl	8002994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ae:	f009 ff99 	bl	800d4e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035b2:	f7fd ffc7 	bl	8001544 <main>

080035b6 <LoopForever>:

LoopForever:
    b LoopForever
 80035b6:	e7fe      	b.n	80035b6 <LoopForever>
  ldr   r0, =_estack
 80035b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80035bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035c0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80035c4:	080124ec 	.word	0x080124ec
  ldr r2, =_sbss
 80035c8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80035cc:	20001304 	.word	0x20001304

080035d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035d0:	e7fe      	b.n	80035d0 <ADC1_2_IRQHandler>
	...

080035d4 <ParseCmdModeMsg>:
#include "BT_Console.h"
extern UART_HandleTypeDef huart1;

char BTCmdString[8];

uint8_t ParseCmdModeMsg(BTConsole *btc){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	if (btc->btPaired == 0){
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	7b9b      	ldrb	r3, [r3, #14]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 809b 	bne.w	800371c <ParseCmdModeMsg+0x148>
		if (btc->inCMDMode == 0){
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7a5b      	ldrb	r3, [r3, #9]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d12e      	bne.n	800364c <ParseCmdModeMsg+0x78>
			if (btc->cmdModeMsgSent == BTCMD_ENTER){
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7a9b      	ldrb	r3, [r3, #10]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d114      	bne.n	8003620 <ParseCmdModeMsg+0x4c>
				strncpy(BTCmdString,BufferRec,4);
 80035f6:	2204      	movs	r2, #4
 80035f8:	4955      	ldr	r1, [pc, #340]	; (8003750 <ParseCmdModeMsg+0x17c>)
 80035fa:	4856      	ldr	r0, [pc, #344]	; (8003754 <ParseCmdModeMsg+0x180>)
 80035fc:	f00a fe3e 	bl	800e27c <strncpy>
				BTCmdString[4] = '\0';
 8003600:	4b54      	ldr	r3, [pc, #336]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003602:	2200      	movs	r2, #0
 8003604:	711a      	strb	r2, [r3, #4]
				if (strcmp(BTCmdString,CMD_MODE_RESPONSE_STRING) == 0){
 8003606:	4954      	ldr	r1, [pc, #336]	; (8003758 <ParseCmdModeMsg+0x184>)
 8003608:	4852      	ldr	r0, [pc, #328]	; (8003754 <ParseCmdModeMsg+0x180>)
 800360a:	f7fc fe09 	bl	8000220 <strcmp>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 8098 	bne.w	8003746 <ParseCmdModeMsg+0x172>
					btc->inCMDMode = 1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	725a      	strb	r2, [r3, #9]
					return 1;
 800361c:	2301      	movs	r3, #1
 800361e:	e093      	b.n	8003748 <ParseCmdModeMsg+0x174>
				}
			}
			else{
				strncpy(BTCmdString,BufferRec+1,8);
 8003620:	4b4e      	ldr	r3, [pc, #312]	; (800375c <ParseCmdModeMsg+0x188>)
 8003622:	2208      	movs	r2, #8
 8003624:	4619      	mov	r1, r3
 8003626:	484b      	ldr	r0, [pc, #300]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003628:	f00a fe28 	bl	800e27c <strncpy>
				BTCmdString[7] = '\0';
 800362c:	4b49      	ldr	r3, [pc, #292]	; (8003754 <ParseCmdModeMsg+0x180>)
 800362e:	2200      	movs	r2, #0
 8003630:	71da      	strb	r2, [r3, #7]
				if (strcmp(BTCmdString,BT_CONNECT_MSG) == 0){
 8003632:	494b      	ldr	r1, [pc, #300]	; (8003760 <ParseCmdModeMsg+0x18c>)
 8003634:	4847      	ldr	r0, [pc, #284]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003636:	f7fc fdf3 	bl	8000220 <strcmp>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	f040 8082 	bne.w	8003746 <ParseCmdModeMsg+0x172>
					btc->btPaired = 1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	739a      	strb	r2, [r3, #14]
					return 1;
 8003648:	2301      	movs	r3, #1
 800364a:	e07d      	b.n	8003748 <ParseCmdModeMsg+0x174>
				}
			}
		}else{
			if (btc->cmdModeMsgSent == BTCMD_EXIT){
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7a9b      	ldrb	r3, [r3, #10]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d113      	bne.n	800367c <ParseCmdModeMsg+0xa8>
				strncpy(BTCmdString,BufferRec,3);
 8003654:	2203      	movs	r2, #3
 8003656:	493e      	ldr	r1, [pc, #248]	; (8003750 <ParseCmdModeMsg+0x17c>)
 8003658:	483e      	ldr	r0, [pc, #248]	; (8003754 <ParseCmdModeMsg+0x180>)
 800365a:	f00a fe0f 	bl	800e27c <strncpy>
				BTCmdString[3] = '\0';
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003660:	2200      	movs	r2, #0
 8003662:	70da      	strb	r2, [r3, #3]
				if (strcmp(BTCmdString,CMD_MODE_END_STRING) == 0){
 8003664:	493f      	ldr	r1, [pc, #252]	; (8003764 <ParseCmdModeMsg+0x190>)
 8003666:	483b      	ldr	r0, [pc, #236]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003668:	f7fc fdda 	bl	8000220 <strcmp>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d169      	bne.n	8003746 <ParseCmdModeMsg+0x172>
					btc->inCMDMode = 0;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	725a      	strb	r2, [r3, #9]
					return 1;
 8003678:	2301      	movs	r3, #1
 800367a:	e065      	b.n	8003748 <ParseCmdModeMsg+0x174>
				}
			}else if (btc->cmdModeMsgSent == BTCMD_REBOOT){
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7a9b      	ldrb	r3, [r3, #10]
 8003680:	2b05      	cmp	r3, #5
 8003682:	d11f      	bne.n	80036c4 <ParseCmdModeMsg+0xf0>
				strncpy(BTCmdString,BufferRec,6);
 8003684:	2206      	movs	r2, #6
 8003686:	4932      	ldr	r1, [pc, #200]	; (8003750 <ParseCmdModeMsg+0x17c>)
 8003688:	4832      	ldr	r0, [pc, #200]	; (8003754 <ParseCmdModeMsg+0x180>)
 800368a:	f00a fdf7 	bl	800e27c <strncpy>
				BTCmdString[6] = '\0';
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003690:	2200      	movs	r2, #0
 8003692:	719a      	strb	r2, [r3, #6]
				if (strcmp(BTCmdString,CMD_MODE_REBOOT_STRING) == 0){
 8003694:	4934      	ldr	r1, [pc, #208]	; (8003768 <ParseCmdModeMsg+0x194>)
 8003696:	482f      	ldr	r0, [pc, #188]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003698:	f7fc fdc2 	bl	8000220 <strcmp>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d151      	bne.n	8003746 <ParseCmdModeMsg+0x172>
					btc->btRebooted = 1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	731a      	strb	r2, [r3, #12]
					btc->inCMDMode = 0;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	725a      	strb	r2, [r3, #9]
					//make all other vars also 0
					btc->cmdModeMsgSent = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	729a      	strb	r2, [r3, #10]
					btc->btNameSameAsMachineName = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	73da      	strb	r2, [r3, #15]
					btc->btSetCmdApplied = 0;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	735a      	strb	r2, [r3, #13]
					return 1;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e041      	b.n	8003748 <ParseCmdModeMsg+0x174>
				}
			}else if (btc->cmdModeMsgSent == BTCMD_GETNAME){
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7a9b      	ldrb	r3, [r3, #10]
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d113      	bne.n	80036f4 <ParseCmdModeMsg+0x120>
				strncpy(BTCmdString,BufferRec,NAME_STR_LEN);
 80036cc:	2207      	movs	r2, #7
 80036ce:	4920      	ldr	r1, [pc, #128]	; (8003750 <ParseCmdModeMsg+0x17c>)
 80036d0:	4820      	ldr	r0, [pc, #128]	; (8003754 <ParseCmdModeMsg+0x180>)
 80036d2:	f00a fdd3 	bl	800e27c <strncpy>
				BTCmdString[NAME_STR_LEN] = '\0';
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <ParseCmdModeMsg+0x180>)
 80036d8:	2200      	movs	r2, #0
 80036da:	71da      	strb	r2, [r3, #7]
				if (strcmp(BTCmdString,MACHINENAME) == 0){
 80036dc:	4923      	ldr	r1, [pc, #140]	; (800376c <ParseCmdModeMsg+0x198>)
 80036de:	481d      	ldr	r0, [pc, #116]	; (8003754 <ParseCmdModeMsg+0x180>)
 80036e0:	f7fc fd9e 	bl	8000220 <strcmp>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d12d      	bne.n	8003746 <ParseCmdModeMsg+0x172>
					btc->btNameSameAsMachineName = 1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	73da      	strb	r2, [r3, #15]
					return 1;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e029      	b.n	8003748 <ParseCmdModeMsg+0x174>
				}
			}else{
				strncpy(BTCmdString,BufferRec,3);
 80036f4:	2203      	movs	r2, #3
 80036f6:	4916      	ldr	r1, [pc, #88]	; (8003750 <ParseCmdModeMsg+0x17c>)
 80036f8:	4816      	ldr	r0, [pc, #88]	; (8003754 <ParseCmdModeMsg+0x180>)
 80036fa:	f00a fdbf 	bl	800e27c <strncpy>
				BTCmdString[3] = '\0';
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003700:	2200      	movs	r2, #0
 8003702:	70da      	strb	r2, [r3, #3]
				if (strcmp(BTCmdString,CMD_MODE_AOK_STRING) == 0){
 8003704:	491a      	ldr	r1, [pc, #104]	; (8003770 <ParseCmdModeMsg+0x19c>)
 8003706:	4813      	ldr	r0, [pc, #76]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003708:	f7fc fd8a 	bl	8000220 <strcmp>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d119      	bne.n	8003746 <ParseCmdModeMsg+0x172>
					btc->btSetCmdApplied = 1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	735a      	strb	r2, [r3, #13]
					return 1;
 8003718:	2301      	movs	r3, #1
 800371a:	e015      	b.n	8003748 <ParseCmdModeMsg+0x174>
				}
			}
		}
	}else{ // closes if bt paired == 0
		//TAKES SOME TIME FOR THE MSG TO COME
		strncpy(BTCmdString,BufferRec+1,8);
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <ParseCmdModeMsg+0x188>)
 800371e:	2208      	movs	r2, #8
 8003720:	4619      	mov	r1, r3
 8003722:	480c      	ldr	r0, [pc, #48]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003724:	f00a fdaa 	bl	800e27c <strncpy>
		BTCmdString[7] = '\0';
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <ParseCmdModeMsg+0x180>)
 800372a:	2200      	movs	r2, #0
 800372c:	71da      	strb	r2, [r3, #7]
		if (strcmp(BTCmdString,BT_DISCONNECT_MSG) == 0){
 800372e:	4911      	ldr	r1, [pc, #68]	; (8003774 <ParseCmdModeMsg+0x1a0>)
 8003730:	4808      	ldr	r0, [pc, #32]	; (8003754 <ParseCmdModeMsg+0x180>)
 8003732:	f7fc fd75 	bl	8000220 <strcmp>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <ParseCmdModeMsg+0x172>
			btc->btPaired = 0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	739a      	strb	r2, [r3, #14]
			return 1;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <ParseCmdModeMsg+0x174>
		}
	}
	return 0;
 8003746:	2300      	movs	r3, #0
} // closes Fn
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000904 	.word	0x20000904
 8003754:	20001250 	.word	0x20001250
 8003758:	08011e88 	.word	0x08011e88
 800375c:	20000905 	.word	0x20000905
 8003760:	08011e90 	.word	0x08011e90
 8003764:	08011e98 	.word	0x08011e98
 8003768:	08011e9c 	.word	0x08011e9c
 800376c:	08011ea4 	.word	0x08011ea4
 8003770:	08011eac 	.word	0x08011eac
 8003774:	08011eb0 	.word	0x08011eb0

08003778 <BTConsole_WriteCMD>:


uint8_t BTConsole_WriteCMD(uint8_t command){
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
	BTCmd.btTickOn = 1;
 8003786:	4b69      	ldr	r3, [pc, #420]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003788:	2201      	movs	r2, #1
 800378a:	741a      	strb	r2, [r3, #16]
	if (command==BTCMD_ENTER){
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d11c      	bne.n	80037cc <BTConsole_WriteCMD+0x54>
		BTCmd.cmdModeMsgSent = BTCMD_ENTER;
 8003792:	4b66      	ldr	r3, [pc, #408]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003794:	2201      	movs	r2, #1
 8003796:	729a      	strb	r2, [r3, #10]
		sprintf(BufferTransmit,"$$$\r\n");
 8003798:	4965      	ldr	r1, [pc, #404]	; (8003930 <BTConsole_WriteCMD+0x1b8>)
 800379a:	4866      	ldr	r0, [pc, #408]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 800379c:	f00a fd4e 	bl	800e23c <siprintf>
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,5);
 80037a0:	2205      	movs	r2, #5
 80037a2:	4964      	ldr	r1, [pc, #400]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 80037a4:	4864      	ldr	r0, [pc, #400]	; (8003938 <BTConsole_WriteCMD+0x1c0>)
 80037a6:	f007 faed 	bl	800ad84 <HAL_UART_Transmit_IT>
		BTCmd.btTick = 0;
 80037aa:	4b60      	ldr	r3, [pc, #384]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	825a      	strh	r2, [r3, #18]
		while(BTCmd.btTick<500){}
 80037b0:	bf00      	nop
 80037b2:	4b5e      	ldr	r3, [pc, #376]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80037b4:	8a5b      	ldrh	r3, [r3, #18]
 80037b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80037ba:	d3fa      	bcc.n	80037b2 <BTConsole_WriteCMD+0x3a>
		if (BTCmd.inCMDMode){
 80037bc:	4b5b      	ldr	r3, [pc, #364]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80037be:	7a5b      	ldrb	r3, [r3, #9]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80ab 	beq.w	800391c <BTConsole_WriteCMD+0x1a4>
			result = 1;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	e0a7      	b.n	800391c <BTConsole_WriteCMD+0x1a4>
		}
	}else if (command == BTCMD_EXIT){
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d11c      	bne.n	800380c <BTConsole_WriteCMD+0x94>
		BTCmd.cmdModeMsgSent = BTCMD_EXIT;
 80037d2:	4b56      	ldr	r3, [pc, #344]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80037d4:	2202      	movs	r2, #2
 80037d6:	729a      	strb	r2, [r3, #10]
		sprintf(BufferTransmit,"---\r\n");
 80037d8:	4958      	ldr	r1, [pc, #352]	; (800393c <BTConsole_WriteCMD+0x1c4>)
 80037da:	4856      	ldr	r0, [pc, #344]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 80037dc:	f00a fd2e 	bl	800e23c <siprintf>
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,5);
 80037e0:	2205      	movs	r2, #5
 80037e2:	4954      	ldr	r1, [pc, #336]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 80037e4:	4854      	ldr	r0, [pc, #336]	; (8003938 <BTConsole_WriteCMD+0x1c0>)
 80037e6:	f007 facd 	bl	800ad84 <HAL_UART_Transmit_IT>
		BTCmd.btTick = 0;
 80037ea:	4b50      	ldr	r3, [pc, #320]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	825a      	strh	r2, [r3, #18]
		while(BTCmd.btTick<500){}
 80037f0:	bf00      	nop
 80037f2:	4b4e      	ldr	r3, [pc, #312]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80037f4:	8a5b      	ldrh	r3, [r3, #18]
 80037f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80037fa:	d3fa      	bcc.n	80037f2 <BTConsole_WriteCMD+0x7a>
		if (BTCmd.inCMDMode==0){
 80037fc:	4b4b      	ldr	r3, [pc, #300]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80037fe:	7a5b      	ldrb	r3, [r3, #9]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 808b 	bne.w	800391c <BTConsole_WriteCMD+0x1a4>
			result = 1;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	e087      	b.n	800391c <BTConsole_WriteCMD+0x1a4>
		}
	}else if (command == BTCMD_SG){
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d11e      	bne.n	8003850 <BTConsole_WriteCMD+0xd8>
		BTCmd.cmdModeMsgSent = BTCMD_SG;
 8003812:	4b46      	ldr	r3, [pc, #280]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003814:	2203      	movs	r2, #3
 8003816:	729a      	strb	r2, [r3, #10]
		BTCmd.btSetCmdApplied = 0;
 8003818:	4b44      	ldr	r3, [pc, #272]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 800381a:	2200      	movs	r2, #0
 800381c:	735a      	strb	r2, [r3, #13]
		sprintf(BufferTransmit,"SG,2\r\n");//bluetooth classic only
 800381e:	4948      	ldr	r1, [pc, #288]	; (8003940 <BTConsole_WriteCMD+0x1c8>)
 8003820:	4844      	ldr	r0, [pc, #272]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 8003822:	f00a fd0b 	bl	800e23c <siprintf>
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,6);
 8003826:	2206      	movs	r2, #6
 8003828:	4942      	ldr	r1, [pc, #264]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 800382a:	4843      	ldr	r0, [pc, #268]	; (8003938 <BTConsole_WriteCMD+0x1c0>)
 800382c:	f007 faaa 	bl	800ad84 <HAL_UART_Transmit_IT>
		BTCmd.btTick = 0;
 8003830:	4b3e      	ldr	r3, [pc, #248]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003832:	2200      	movs	r2, #0
 8003834:	825a      	strh	r2, [r3, #18]
		while(BTCmd.btTick<500){}
 8003836:	bf00      	nop
 8003838:	4b3c      	ldr	r3, [pc, #240]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 800383a:	8a5b      	ldrh	r3, [r3, #18]
 800383c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003840:	d3fa      	bcc.n	8003838 <BTConsole_WriteCMD+0xc0>
		if (BTCmd.btSetCmdApplied==1){
 8003842:	4b3a      	ldr	r3, [pc, #232]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003844:	7b5b      	ldrb	r3, [r3, #13]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d168      	bne.n	800391c <BTConsole_WriteCMD+0x1a4>
			result = 1;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	e065      	b.n	800391c <BTConsole_WriteCMD+0x1a4>
		}
	}else if (command == BTCMD_RENAME){
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	2b04      	cmp	r3, #4
 8003854:	d11f      	bne.n	8003896 <BTConsole_WriteCMD+0x11e>
		BTCmd.cmdModeMsgSent = BTCMD_RENAME;
 8003856:	4b35      	ldr	r3, [pc, #212]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003858:	2204      	movs	r2, #4
 800385a:	729a      	strb	r2, [r3, #10]
		BTCmd.btSetCmdApplied = 0;
 800385c:	4b33      	ldr	r3, [pc, #204]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 800385e:	2200      	movs	r2, #0
 8003860:	735a      	strb	r2, [r3, #13]
		sprintf(BufferTransmit,"S-,%s\r\n",MACHINENAME);// rename, only 11 chars for the name, then appends "-ABCD" to get unique name
 8003862:	4a38      	ldr	r2, [pc, #224]	; (8003944 <BTConsole_WriteCMD+0x1cc>)
 8003864:	4938      	ldr	r1, [pc, #224]	; (8003948 <BTConsole_WriteCMD+0x1d0>)
 8003866:	4833      	ldr	r0, [pc, #204]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 8003868:	f00a fce8 	bl	800e23c <siprintf>
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,NAME_STR_LEN + 5);
 800386c:	220c      	movs	r2, #12
 800386e:	4931      	ldr	r1, [pc, #196]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 8003870:	4831      	ldr	r0, [pc, #196]	; (8003938 <BTConsole_WriteCMD+0x1c0>)
 8003872:	f007 fa87 	bl	800ad84 <HAL_UART_Transmit_IT>
		BTCmd.btTick = 0;
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003878:	2200      	movs	r2, #0
 800387a:	825a      	strh	r2, [r3, #18]
		while(BTCmd.btTick<500){}
 800387c:	bf00      	nop
 800387e:	4b2b      	ldr	r3, [pc, #172]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003880:	8a5b      	ldrh	r3, [r3, #18]
 8003882:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003886:	d3fa      	bcc.n	800387e <BTConsole_WriteCMD+0x106>
		if (BTCmd.btSetCmdApplied==1){
 8003888:	4b28      	ldr	r3, [pc, #160]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 800388a:	7b5b      	ldrb	r3, [r3, #13]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d145      	bne.n	800391c <BTConsole_WriteCMD+0x1a4>
			result = 1;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	e042      	b.n	800391c <BTConsole_WriteCMD+0x1a4>
		}
	}else if (command == BTCMD_REBOOT){
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	2b05      	cmp	r3, #5
 800389a:	d11e      	bne.n	80038da <BTConsole_WriteCMD+0x162>
		BTCmd.cmdModeMsgSent = BTCMD_REBOOT;
 800389c:	4b23      	ldr	r3, [pc, #140]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 800389e:	2205      	movs	r2, #5
 80038a0:	729a      	strb	r2, [r3, #10]
		BTCmd.btRebooted = 0;
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	731a      	strb	r2, [r3, #12]
		sprintf(BufferTransmit,"R,1\r\n");// rebooth and apply the Set commands
 80038a8:	4928      	ldr	r1, [pc, #160]	; (800394c <BTConsole_WriteCMD+0x1d4>)
 80038aa:	4822      	ldr	r0, [pc, #136]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 80038ac:	f00a fcc6 	bl	800e23c <siprintf>
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,5);
 80038b0:	2205      	movs	r2, #5
 80038b2:	4920      	ldr	r1, [pc, #128]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 80038b4:	4820      	ldr	r0, [pc, #128]	; (8003938 <BTConsole_WriteCMD+0x1c0>)
 80038b6:	f007 fa65 	bl	800ad84 <HAL_UART_Transmit_IT>
		BTCmd.btTick = 0;
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80038bc:	2200      	movs	r2, #0
 80038be:	825a      	strh	r2, [r3, #18]
		while(BTCmd.btTick<500){}
 80038c0:	bf00      	nop
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80038c4:	8a5b      	ldrh	r3, [r3, #18]
 80038c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80038ca:	d3fa      	bcc.n	80038c2 <BTConsole_WriteCMD+0x14a>
		if (BTCmd.btRebooted==1){
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80038ce:	7b1b      	ldrb	r3, [r3, #12]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d123      	bne.n	800391c <BTConsole_WriteCMD+0x1a4>
			result = 1;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e020      	b.n	800391c <BTConsole_WriteCMD+0x1a4>
		}
	}else if (command == BTCMD_GETNAME){
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	2b06      	cmp	r3, #6
 80038de:	d11d      	bne.n	800391c <BTConsole_WriteCMD+0x1a4>
		BTCmd.cmdModeMsgSent = BTCMD_GETNAME;
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80038e2:	2206      	movs	r2, #6
 80038e4:	729a      	strb	r2, [r3, #10]
		BTCmd.btNameSameAsMachineName = 0;
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	73da      	strb	r2, [r3, #15]
		sprintf(BufferTransmit,"GN\r\n");// GetName
 80038ec:	4918      	ldr	r1, [pc, #96]	; (8003950 <BTConsole_WriteCMD+0x1d8>)
 80038ee:	4811      	ldr	r0, [pc, #68]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 80038f0:	f00a fca4 	bl	800e23c <siprintf>
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)BufferTransmit,4);
 80038f4:	2204      	movs	r2, #4
 80038f6:	490f      	ldr	r1, [pc, #60]	; (8003934 <BTConsole_WriteCMD+0x1bc>)
 80038f8:	480f      	ldr	r0, [pc, #60]	; (8003938 <BTConsole_WriteCMD+0x1c0>)
 80038fa:	f007 fa43 	bl	800ad84 <HAL_UART_Transmit_IT>
		BTCmd.btTick = 0;
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003900:	2200      	movs	r2, #0
 8003902:	825a      	strh	r2, [r3, #18]
		while(BTCmd.btTick<500){}
 8003904:	bf00      	nop
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003908:	8a5b      	ldrh	r3, [r3, #18]
 800390a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800390e:	d3fa      	bcc.n	8003906 <BTConsole_WriteCMD+0x18e>
		if (BTCmd.btNameSameAsMachineName==1){
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 8003912:	7bdb      	ldrb	r3, [r3, #15]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <BTConsole_WriteCMD+0x1a4>
			result = 1;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
		}
	}else{}

	BTCmd.btTickOn = 0;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <BTConsole_WriteCMD+0x1b4>)
 800391e:	2200      	movs	r2, #0
 8003920:	741a      	strb	r2, [r3, #16]

	return result;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	2000089c 	.word	0x2000089c
 8003930:	08011eb8 	.word	0x08011eb8
 8003934:	2000099c 	.word	0x2000099c
 8003938:	20000440 	.word	0x20000440
 800393c:	08011ec0 	.word	0x08011ec0
 8003940:	08011ec8 	.word	0x08011ec8
 8003944:	08011ea4 	.word	0x08011ea4
 8003948:	08011ed0 	.word	0x08011ed0
 800394c:	08011ed8 	.word	0x08011ed8
 8003950:	08011ee0 	.word	0x08011ee0

08003954 <BT_SetupDevice>:



int BT_SetupDevice(void){
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
	uint8_t btResult;
	btResult = BTConsole_WriteCMD(BTCMD_ENTER);
 800395a:	2001      	movs	r0, #1
 800395c:	f7ff ff0c 	bl	8003778 <BTConsole_WriteCMD>
 8003960:	4603      	mov	r3, r0
 8003962:	71fb      	strb	r3, [r7, #7]
	if (btResult == 0){
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <BT_SetupDevice+0x1c>
		return -1;}
 800396a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800396e:	e034      	b.n	80039da <BT_SetupDevice+0x86>
	btResult = BTConsole_WriteCMD(BTCMD_GETNAME);
 8003970:	2006      	movs	r0, #6
 8003972:	f7ff ff01 	bl	8003778 <BTConsole_WriteCMD>
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
	if (btResult == 0){	// if 1 theres nothing to do, we can exit the cmd mode
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d120      	bne.n	80039c2 <BT_SetupDevice+0x6e>
		// means name is not same as machine name.
		btResult = BTConsole_WriteCMD(BTCMD_SG);
 8003980:	2003      	movs	r0, #3
 8003982:	f7ff fef9 	bl	8003778 <BTConsole_WriteCMD>
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
		if (btResult == 0){
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <BT_SetupDevice+0x42>
			return -2;}
 8003990:	f06f 0301 	mvn.w	r3, #1
 8003994:	e021      	b.n	80039da <BT_SetupDevice+0x86>
		btResult = BTConsole_WriteCMD(BTCMD_RENAME);
 8003996:	2004      	movs	r0, #4
 8003998:	f7ff feee 	bl	8003778 <BTConsole_WriteCMD>
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
		if (btResult == 0){
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <BT_SetupDevice+0x58>
			return -3;}
 80039a6:	f06f 0302 	mvn.w	r3, #2
 80039aa:	e016      	b.n	80039da <BT_SetupDevice+0x86>
		btResult = BTConsole_WriteCMD(BTCMD_REBOOT);
 80039ac:	2005      	movs	r0, #5
 80039ae:	f7ff fee3 	bl	8003778 <BTConsole_WriteCMD>
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
		if (btResult == 0){
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10d      	bne.n	80039d8 <BT_SetupDevice+0x84>
			return -4;}
 80039bc:	f06f 0303 	mvn.w	r3, #3
 80039c0:	e00b      	b.n	80039da <BT_SetupDevice+0x86>
	}else{
		btResult = BTConsole_WriteCMD(BTCMD_EXIT);
 80039c2:	2002      	movs	r0, #2
 80039c4:	f7ff fed8 	bl	8003778 <BTConsole_WriteCMD>
 80039c8:	4603      	mov	r3, r0
 80039ca:	71fb      	strb	r3, [r7, #7]
		if (btResult == 0){
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <BT_SetupDevice+0x84>
			return -5;}
 80039d2:	f06f 0304 	mvn.w	r3, #4
 80039d6:	e000      	b.n	80039da <BT_SetupDevice+0x86>
	}

	return 1;
 80039d8:	2301      	movs	r3, #1

}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <charToHexDigit>:
char information[2];
char subState[2];
char attributeCount[2];

char charToHexDigit(char c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
	if(islower(c)){
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	3301      	adds	r3, #1
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <charToHexDigit+0x5c>)
 80039f4:	4413      	add	r3, r2
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d10f      	bne.n	8003a20 <charToHexDigit+0x3c>
			c = toupper(c);
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	3301      	adds	r3, #1
 8003a08:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <charToHexDigit+0x5c>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d102      	bne.n	8003a1c <charToHexDigit+0x38>
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	3b20      	subs	r3, #32
 8003a1a:	e000      	b.n	8003a1e <charToHexDigit+0x3a>
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	71fb      	strb	r3, [r7, #7]
	}

	if (c >= 'A'){
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	2b40      	cmp	r3, #64	; 0x40
 8003a24:	d903      	bls.n	8003a2e <charToHexDigit+0x4a>
		return c - 'A' + 10;}
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	3b37      	subs	r3, #55	; 0x37
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	e002      	b.n	8003a34 <charToHexDigit+0x50>
	else{
		return c - '0';
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	3b30      	subs	r3, #48	; 0x30
 8003a32:	b2db      	uxtb	r3, r3
	}
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	08012030 	.word	0x08012030

08003a44 <StringToHex>:

char StringToHex(char c[2])
{
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return charToHexDigit(c[1]) + 16 * charToHexDigit(c[0]);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ffc6 	bl	80039e4 <charToHexDigit>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	461c      	mov	r4, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ffbf 	bl	80039e4 <charToHexDigit>
 8003a66:	4603      	mov	r3, r0
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4423      	add	r3, r4
 8003a6e:	b2db      	uxtb	r3, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd90      	pop	{r4, r7, pc}

08003a78 <stringToINT>:

uint16_t stringToINT(char c[4])
{
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  return charToHexDigit(c[3]) + 16 * charToHexDigit(c[2]) + 256 * charToHexDigit(c[1])  + 4096 * charToHexDigit(c[0]);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3303      	adds	r3, #3
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ffac 	bl	80039e4 <charToHexDigit>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	b29c      	uxth	r4, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3301      	adds	r3, #1
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ffa4 	bl	80039e4 <charToHexDigit>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	b29d      	uxth	r5, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff9d 	bl	80039e4 <charToHexDigit>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	442b      	add	r3, r5
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	b29d      	uxth	r5, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3302      	adds	r3, #2
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff8f 	bl	80039e4 <charToHexDigit>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	442b      	add	r3, r5
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4423      	add	r3, r4
 8003ad4:	b29b      	uxth	r3, r3
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bdb0      	pop	{r4, r5, r7, pc}

08003ade <DecodeStringAsUint8>:

uint8_t DecodeStringAsUint8(char c[2]){
 8003ade:	b590      	push	{r4, r7, lr}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
	return charToHexDigit(c[1]) + charToHexDigit(c[0])*10;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff79 	bl	80039e4 <charToHexDigit>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461c      	mov	r4, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ff72 	bl	80039e4 <charToHexDigit>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	0092      	lsls	r2, r2, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4423      	add	r3, r4
 8003b0e:	b2db      	uxtb	r3, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd90      	pop	{r4, r7, pc}

08003b18 <stringToFLOAT>:
  return charToHexDigit(c[3]) + charToHexDigit(c[2])*10 + charToHexDigit(c[1]) * 100 + charToHexDigit(c[0])*1000;

}

unsigned long stringToFLOAT(char c[8])
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  return charToHexDigit(c[7]) + 16 * charToHexDigit(c[6]) + 256 * charToHexDigit(c[5])  + 4096 * charToHexDigit(c[4]) + 65536 * charToHexDigit(c[3]) + 1048576 * charToHexDigit(c[2]) + 16777216 * charToHexDigit(c[1])  +  268435456 * charToHexDigit(c[0]);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3307      	adds	r3, #7
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff ff5c 	bl	80039e4 <charToHexDigit>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461c      	mov	r4, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3306      	adds	r3, #6
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff ff54 	bl	80039e4 <charToHexDigit>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	441c      	add	r4, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3305      	adds	r3, #5
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff4b 	bl	80039e4 <charToHexDigit>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	441c      	add	r4, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ff42 	bl	80039e4 <charToHexDigit>
 8003b60:	4603      	mov	r3, r0
 8003b62:	031b      	lsls	r3, r3, #12
 8003b64:	441c      	add	r4, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3303      	adds	r3, #3
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff39 	bl	80039e4 <charToHexDigit>
 8003b72:	4603      	mov	r3, r0
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	441c      	add	r4, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff ff30 	bl	80039e4 <charToHexDigit>
 8003b84:	4603      	mov	r3, r0
 8003b86:	051b      	lsls	r3, r3, #20
 8003b88:	441c      	add	r4, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff27 	bl	80039e4 <charToHexDigit>
 8003b96:	4603      	mov	r3, r0
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	441c      	add	r4, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ff1f 	bl	80039e4 <charToHexDigit>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	071b      	lsls	r3, r3, #28
 8003baa:	4423      	add	r3, r4
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd90      	pop	{r4, r7, pc}

08003bb4 <ParseBTMsg>:


void ParseBTMsg(void){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	//check last byte is 7E
	//get information and subState Bytes
	//get attribute Count
	//put TLV data raw data in another location.

	strncpy(sof,BufferRec,2);
 8003bb8:	2202      	movs	r2, #2
 8003bba:	4938      	ldr	r1, [pc, #224]	; (8003c9c <ParseBTMsg+0xe8>)
 8003bbc:	4838      	ldr	r0, [pc, #224]	; (8003ca0 <ParseBTMsg+0xec>)
 8003bbe:	f00a fb5d 	bl	800e27c <strncpy>
	strncpy(msgLength,BufferRec+2,2);
 8003bc2:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <ParseBTMsg+0xf0>)
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4837      	ldr	r0, [pc, #220]	; (8003ca8 <ParseBTMsg+0xf4>)
 8003bca:	f00a fb57 	bl	800e27c <strncpy>
	BT.sof = StringToHex(sof);
 8003bce:	4834      	ldr	r0, [pc, #208]	; (8003ca0 <ParseBTMsg+0xec>)
 8003bd0:	f7ff ff38 	bl	8003a44 <StringToHex>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b34      	ldr	r3, [pc, #208]	; (8003cac <ParseBTMsg+0xf8>)
 8003bda:	701a      	strb	r2, [r3, #0]
	BT.length = StringToHex(msgLength);
 8003bdc:	4832      	ldr	r0, [pc, #200]	; (8003ca8 <ParseBTMsg+0xf4>)
 8003bde:	f7ff ff31 	bl	8003a44 <StringToHex>
 8003be2:	4603      	mov	r3, r0
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b31      	ldr	r3, [pc, #196]	; (8003cac <ParseBTMsg+0xf8>)
 8003be8:	705a      	strb	r2, [r3, #1]
	strncpy(eof,BufferRec+4+BT.length-2,2);
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <ParseBTMsg+0xf8>)
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	3302      	adds	r3, #2
 8003bf0:	4a2a      	ldr	r2, [pc, #168]	; (8003c9c <ParseBTMsg+0xe8>)
 8003bf2:	4413      	add	r3, r2
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	482d      	ldr	r0, [pc, #180]	; (8003cb0 <ParseBTMsg+0xfc>)
 8003bfa:	f00a fb3f 	bl	800e27c <strncpy>
	BT.eof = StringToHex(eof);
 8003bfe:	482c      	ldr	r0, [pc, #176]	; (8003cb0 <ParseBTMsg+0xfc>)
 8003c00:	f7ff ff20 	bl	8003a44 <StringToHex>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	4b28      	ldr	r3, [pc, #160]	; (8003cac <ParseBTMsg+0xf8>)
 8003c0a:	709a      	strb	r2, [r3, #2]
	strncpy(information,BufferRec+4,2);
 8003c0c:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <ParseBTMsg+0x100>)
 8003c0e:	2202      	movs	r2, #2
 8003c10:	4619      	mov	r1, r3
 8003c12:	4829      	ldr	r0, [pc, #164]	; (8003cb8 <ParseBTMsg+0x104>)
 8003c14:	f00a fb32 	bl	800e27c <strncpy>
	strncpy(subState,BufferRec+6,2);
 8003c18:	4b28      	ldr	r3, [pc, #160]	; (8003cbc <ParseBTMsg+0x108>)
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4828      	ldr	r0, [pc, #160]	; (8003cc0 <ParseBTMsg+0x10c>)
 8003c20:	f00a fb2c 	bl	800e27c <strncpy>
	strncpy(attributeCount,BufferRec+8,2);
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <ParseBTMsg+0x110>)
 8003c26:	2202      	movs	r2, #2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4827      	ldr	r0, [pc, #156]	; (8003cc8 <ParseBTMsg+0x114>)
 8003c2c:	f00a fb26 	bl	800e27c <strncpy>
	BT.information = StringToHex(information);
 8003c30:	4821      	ldr	r0, [pc, #132]	; (8003cb8 <ParseBTMsg+0x104>)
 8003c32:	f7ff ff07 	bl	8003a44 <StringToHex>
 8003c36:	4603      	mov	r3, r0
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <ParseBTMsg+0xf8>)
 8003c3c:	70da      	strb	r2, [r3, #3]
	BT.subState = StringToHex(subState);
 8003c3e:	4820      	ldr	r0, [pc, #128]	; (8003cc0 <ParseBTMsg+0x10c>)
 8003c40:	f7ff ff00 	bl	8003a44 <StringToHex>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <ParseBTMsg+0xf8>)
 8003c4a:	711a      	strb	r2, [r3, #4]
	BT.attributeCnt = DecodeStringAsUint8(attributeCount);
 8003c4c:	481e      	ldr	r0, [pc, #120]	; (8003cc8 <ParseBTMsg+0x114>)
 8003c4e:	f7ff ff46 	bl	8003ade <DecodeStringAsUint8>
 8003c52:	4603      	mov	r3, r0
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <ParseBTMsg+0xf8>)
 8003c58:	715a      	strb	r2, [r3, #5]
	BT.TLVsLength = BT.length-8; // 2 each for info, substate,attrCnt,and EOF
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <ParseBTMsg+0xf8>)
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	3b08      	subs	r3, #8
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <ParseBTMsg+0xf8>)
 8003c64:	719a      	strb	r2, [r3, #6]

	if ((BT.sof == 0x7E) & (BT.eof == 0x7E)){
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <ParseBTMsg+0xf8>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b7e      	cmp	r3, #126	; 0x7e
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <ParseBTMsg+0xf8>)
 8003c76:	789b      	ldrb	r3, [r3, #2]
 8003c78:	2b7e      	cmp	r3, #126	; 0x7e
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4013      	ands	r3, r2
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <ParseBTMsg+0xde>
		BT.BTmsgGood = 1;
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <ParseBTMsg+0xf8>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	71da      	strb	r2, [r3, #7]
	}
	else{
		BT.BTmsgGood = 0;
	}

}
 8003c90:	e002      	b.n	8003c98 <ParseBTMsg+0xe4>
		BT.BTmsgGood = 0;
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <ParseBTMsg+0xf8>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	71da      	strb	r2, [r3, #7]
}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000904 	.word	0x20000904
 8003ca0:	20001258 	.word	0x20001258
 8003ca4:	20000906 	.word	0x20000906
 8003ca8:	2000125c 	.word	0x2000125c
 8003cac:	20000894 	.word	0x20000894
 8003cb0:	20001260 	.word	0x20001260
 8003cb4:	20000908 	.word	0x20000908
 8003cb8:	20001264 	.word	0x20001264
 8003cbc:	2000090a 	.word	0x2000090a
 8003cc0:	20001268 	.word	0x20001268
 8003cc4:	2000090c 	.word	0x2000090c
 8003cc8:	2000126c 	.word	0x2000126c

08003ccc <generateTLV_C>:

// functions to generate TLV
void generateTLV_C(char *buffer, uint8_t ID,uint16_t value){
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	803b      	strh	r3, [r7, #0]
	sprintf(buffer,"%02X%02X%02X",ID,2,value);
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	883b      	ldrh	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <generateTLV_C+0x28>)
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f00a faa8 	bl	800e23c <siprintf>
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	08011ee8 	.word	0x08011ee8

08003cf8 <generateTLV_I>:

// functions to generate TLV
void generateTLV_I(char *buffer, uint8_t ID,uint16_t value){
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
 8003d04:	4613      	mov	r3, r2
 8003d06:	803b      	strh	r3, [r7, #0]
	sprintf(buffer,"%02X%02X%04X",ID,4,value);
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	883b      	ldrh	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2304      	movs	r3, #4
 8003d10:	4903      	ldr	r1, [pc, #12]	; (8003d20 <generateTLV_I+0x28>)
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f00a fa92 	bl	800e23c <siprintf>
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	08011ef8 	.word	0x08011ef8

08003d24 <generateTLV_F>:

void generateTLV_F(char *buffer, uint8_t ID,float valueF){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d32:	72fb      	strb	r3, [r7, #11]
	sprintf(buffer,"%02X%02X%X",ID,8,*(unsigned int*)&valueF);
 8003d34:	7afa      	ldrb	r2, [r7, #11]
 8003d36:	1d3b      	adds	r3, r7, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	4904      	ldr	r1, [pc, #16]	; (8003d50 <generateTLV_F+0x2c>)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f00a fa7b 	bl	800e23c <siprintf>
}
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	08011f08 	.word	0x08011f08

08003d54 <add_TLVBuf_To_TxBuf>:

void add_TLVBuf_To_TxBuf(char *TLVbuf,uint8_t copySize,uint8_t TXBuf_location){
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
 8003d60:	4613      	mov	r3, r2
 8003d62:	70bb      	strb	r3, [r7, #2]
	for (int i = 0;i<copySize;i++){
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e00b      	b.n	8003d82 <add_TLVBuf_To_TxBuf+0x2e>
		BufferTransmit[TXBuf_location + i] = TLVbuf[i];
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	441a      	add	r2, r3
 8003d70:	78b9      	ldrb	r1, [r7, #2]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	440b      	add	r3, r1
 8003d76:	7811      	ldrb	r1, [r2, #0]
 8003d78:	4a07      	ldr	r2, [pc, #28]	; (8003d98 <add_TLVBuf_To_TxBuf+0x44>)
 8003d7a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0;i<copySize;i++){
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	dbef      	blt.n	8003d6a <add_TLVBuf_To_TxBuf+0x16>
	}
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	2000099c 	.word	0x2000099c

08003d9c <Init_TXBuf_Frame>:

uint8_t Init_TXBuf_Frame(uint8_t information,uint8_t substate,uint8_t TLV_count){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af04      	add	r7, sp, #16
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
 8003da6:	460b      	mov	r3, r1
 8003da8:	71bb      	strb	r3, [r7, #6]
 8003daa:	4613      	mov	r3, r2
 8003dac:	717b      	strb	r3, [r7, #5]
	sprintf(BufferTransmit,"%02X%02X%02X%02X%02d",FRAME_DELIMITER,0,information,substate,TLV_count);
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	79ba      	ldrb	r2, [r7, #6]
 8003db2:	7979      	ldrb	r1, [r7, #5]
 8003db4:	9102      	str	r1, [sp, #8]
 8003db6:	9201      	str	r2, [sp, #4]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	227e      	movs	r2, #126	; 0x7e
 8003dbe:	4904      	ldr	r1, [pc, #16]	; (8003dd0 <Init_TXBuf_Frame+0x34>)
 8003dc0:	4804      	ldr	r0, [pc, #16]	; (8003dd4 <Init_TXBuf_Frame+0x38>)
 8003dc2:	f00a fa3b 	bl	800e23c <siprintf>
	return 10;
 8003dc6:	230a      	movs	r3, #10
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	08011f14 	.word	0x08011f14
 8003dd4:	2000099c 	.word	0x2000099c

08003dd8 <addEOF>:

uint8_t addEOF(uint8_t location){
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
	BufferTransmit[location] = '7';
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <addEOF+0x2c>)
 8003de6:	2137      	movs	r1, #55	; 0x37
 8003de8:	54d1      	strb	r1, [r2, r3]
	BufferTransmit[location+1] = 'E';
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	3301      	adds	r3, #1
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <addEOF+0x2c>)
 8003df0:	2145      	movs	r1, #69	; 0x45
 8003df2:	54d1      	strb	r1, [r2, r3]
	return 2;
 8003df4:	2302      	movs	r3, #2
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	2000099c 	.word	0x2000099c

08003e08 <correctLengthInFrame>:

void correctLengthInFrame(uint8_t initLength,uint8_t TLV_length,uint8_t eof_length){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
 8003e12:	460b      	mov	r3, r1
 8003e14:	71bb      	strb	r3, [r7, #6]
 8003e16:	4613      	mov	r3, r2
 8003e18:	717b      	strb	r3, [r7, #5]
	uint8_t framelength = TLV_length + eof_length + (initLength - 4);
 8003e1a:	79ba      	ldrb	r2, [r7, #6]
 8003e1c:	797b      	ldrb	r3, [r7, #5]
 8003e1e:	4413      	add	r3, r2
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	4413      	add	r3, r2
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	3b04      	subs	r3, #4
 8003e2a:	73fb      	strb	r3, [r7, #15]
	char buffer[3];
	sprintf(buffer,"%02X",framelength);
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4907      	ldr	r1, [pc, #28]	; (8003e50 <correctLengthInFrame+0x48>)
 8003e34:	4618      	mov	r0, r3
 8003e36:	f00a fa01 	bl	800e23c <siprintf>
	BufferTransmit[2] = buffer[0];
 8003e3a:	7b3a      	ldrb	r2, [r7, #12]
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <correctLengthInFrame+0x4c>)
 8003e3e:	709a      	strb	r2, [r3, #2]
	BufferTransmit[3] = buffer[1];
 8003e40:	7b7a      	ldrb	r2, [r7, #13]
 8003e42:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <correctLengthInFrame+0x4c>)
 8003e44:	70da      	strb	r2, [r3, #3]
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	08011f2c 	.word	0x08011f2c
 8003e54:	2000099c 	.word	0x2000099c

08003e58 <parseTLV>:


uint8_t parseTLV(TLVStruct_TypeDef *T, uint8_t startLocation){
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	70fb      	strb	r3, [r7, #3]
	char len[2];
	char V_C[2];
	char V_I[4];
	char V_F[8];
	unsigned long float_hex;
	uint8_t TLV_size = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	strncpy(type,BufferRec+startLocation,2);
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	4a3d      	ldr	r2, [pc, #244]	; (8003f64 <parseTLV+0x10c>)
 8003e6e:	1899      	adds	r1, r3, r2
 8003e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e74:	2202      	movs	r2, #2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f00a fa00 	bl	800e27c <strncpy>
	strncpy(len,BufferRec+startLocation+2,2);
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	3302      	adds	r3, #2
 8003e80:	4a38      	ldr	r2, [pc, #224]	; (8003f64 <parseTLV+0x10c>)
 8003e82:	1899      	adds	r1, r3, r2
 8003e84:	f107 0320 	add.w	r3, r7, #32
 8003e88:	2202      	movs	r2, #2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f00a f9f6 	bl	800e27c <strncpy>
	T->type = StringToHex(type);
 8003e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fdd5 	bl	8003a44 <StringToHex>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	701a      	strb	r2, [r3, #0]
	T->length = StringToHex(len);
 8003ea2:	f107 0320 	add.w	r3, r7, #32
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fdcc 	bl	8003a44 <StringToHex>
 8003eac:	4603      	mov	r3, r0
 8003eae:	461a      	mov	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	705a      	strb	r2, [r3, #1]
	if (T->length == 2){
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d115      	bne.n	8003ee8 <parseTLV+0x90>
		strncpy(V_C,BufferRec+startLocation+4,2);
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <parseTLV+0x10c>)
 8003ec2:	1899      	adds	r1, r3, r2
 8003ec4:	f107 031c 	add.w	r3, r7, #28
 8003ec8:	2202      	movs	r2, #2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f00a f9d6 	bl	800e27c <strncpy>
		T->value_int = StringToHex(V_C);
 8003ed0:	f107 031c 	add.w	r3, r7, #28
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fdb5 	bl	8003a44 <StringToHex>
 8003eda:	4603      	mov	r3, r0
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	805a      	strh	r2, [r3, #2]
		TLV_size = 6;
 8003ee2:	2306      	movs	r3, #6
 8003ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	if (T->length == 4){
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d116      	bne.n	8003f1e <parseTLV+0xc6>
		strncpy(V_I,BufferRec+startLocation+4,4);
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4a1b      	ldr	r2, [pc, #108]	; (8003f64 <parseTLV+0x10c>)
 8003ef6:	1899      	adds	r1, r3, r2
 8003ef8:	f107 0318 	add.w	r3, r7, #24
 8003efc:	2204      	movs	r2, #4
 8003efe:	4618      	mov	r0, r3
 8003f00:	f00a f9bc 	bl	800e27c <strncpy>
		T->value_int = stringToINT(V_I);
 8003f04:	f107 0318 	add.w	r3, r7, #24
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fdb5 	bl	8003a78 <stringToINT>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	805a      	strh	r2, [r3, #2]
		TLV_size = 8;
 8003f16:	2308      	movs	r3, #8
 8003f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f1c:	e01c      	b.n	8003f58 <parseTLV+0x100>
	}else if (T->length == 8){
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d118      	bne.n	8003f58 <parseTLV+0x100>
		strncpy(V_F,BufferRec+startLocation+4,8);
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <parseTLV+0x10c>)
 8003f2c:	1899      	adds	r1, r3, r2
 8003f2e:	f107 0310 	add.w	r3, r7, #16
 8003f32:	2208      	movs	r2, #8
 8003f34:	4618      	mov	r0, r3
 8003f36:	f00a f9a1 	bl	800e27c <strncpy>
		float_hex = stringToFLOAT(V_F);
 8003f3a:	f107 0310 	add.w	r3, r7, #16
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fdea 	bl	8003b18 <stringToFLOAT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	60fb      	str	r3, [r7, #12]
		T->value_f = *((float*)&float_hex);
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	605a      	str	r2, [r3, #4]
		TLV_size = 12;
 8003f52:	230c      	movs	r3, #12
 8003f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return TLV_size;
 8003f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3728      	adds	r7, #40	; 0x28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000904 	.word	0x20000904

08003f68 <ParseDiagnostics>:

uint8_t ParseDiagnostics(void){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
	TLVStruct_TypeDef T;
	uint8_t TLV_start = 10;
 8003f6e:	230a      	movs	r3, #10
 8003f70:	75fb      	strb	r3, [r7, #23]
	uint8_t tlvSize = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
	uint8_t count = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75bb      	strb	r3, [r7, #22]
	uint8_t allSettingsRecieved = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	757b      	strb	r3, [r7, #21]
	uint8_t rampTime = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	753b      	strb	r3, [r7, #20]

    for (int i=0;i<BT.attributeCnt;i++){
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	e08a      	b.n	800409e <ParseDiagnostics+0x136>
    	tlvSize = parseTLV(&T,TLV_start);
 8003f88:	7dfa      	ldrb	r2, [r7, #23]
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ff62 	bl	8003e58 <parseTLV>
 8003f94:	4603      	mov	r3, r0
 8003f96:	73fb      	strb	r3, [r7, #15]
		TLV_start += tlvSize;
 8003f98:	7dfa      	ldrb	r2, [r7, #23]
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	75fb      	strb	r3, [r7, #23]
		switch (T.type){
 8003fa0:	793b      	ldrb	r3, [r7, #4]
 8003fa2:	3b40      	subs	r3, #64	; 0x40
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d877      	bhi.n	8004098 <ParseDiagnostics+0x130>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <ParseDiagnostics+0x48>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fc5 	.word	0x08003fc5
 8003fb4:	08003fd5 	.word	0x08003fd5
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	0800407b 	.word	0x0800407b
 8003fc0:	08004089 	.word	0x08004089
			case MOTOR_ID:
				D.motorID = T.value_int;
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	4b3f      	ldr	r3, [pc, #252]	; (80040c8 <ParseDiagnostics+0x160>)
 8003fca:	705a      	strb	r2, [r3, #1]
				count += 1;
 8003fcc:	7dbb      	ldrb	r3, [r7, #22]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	75bb      	strb	r3, [r7, #22]
				break;
 8003fd2:	e061      	b.n	8004098 <ParseDiagnostics+0x130>
			case CONTROL_TYPE:
				D.typeofTest = T.value_int;
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <ParseDiagnostics+0x160>)
 8003fda:	701a      	strb	r2, [r3, #0]
				count += 1;
 8003fdc:	7dbb      	ldrb	r3, [r7, #22]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	75bb      	strb	r3, [r7, #22]
				break;
 8003fe2:	e059      	b.n	8004098 <ParseDiagnostics+0x130>
			case TARGET_PERCENT:
				if (D.typeofTest == OPENLOOP){
 8003fe4:	4b38      	ldr	r3, [pc, #224]	; (80040c8 <ParseDiagnostics+0x160>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d12a      	bne.n	8004042 <ParseDiagnostics+0xda>
					 uint16_t temp = (uint16_t)(T.value_int * 1499/100);
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f240 53db 	movw	r3, #1499	; 0x5db
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	4a34      	ldr	r2, [pc, #208]	; (80040cc <ParseDiagnostics+0x164>)
 8003ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8003ffe:	1152      	asrs	r2, r2, #5
 8004000:	17db      	asrs	r3, r3, #31
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	81bb      	strh	r3, [r7, #12]
					 D.targetDuty = temp + (10 - (temp%10));
 8004006:	89b8      	ldrh	r0, [r7, #12]
 8004008:	89ba      	ldrh	r2, [r7, #12]
 800400a:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <ParseDiagnostics+0x168>)
 800400c:	fba3 1302 	umull	r1, r3, r3, r2
 8004010:	08d9      	lsrs	r1, r3, #3
 8004012:	460b      	mov	r3, r1
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	b29b      	uxth	r3, r3
 800401e:	f1c3 030a 	rsb	r3, r3, #10
 8004022:	4403      	add	r3, r0
 8004024:	4a28      	ldr	r2, [pc, #160]	; (80040c8 <ParseDiagnostics+0x160>)
 8004026:	6093      	str	r3, [r2, #8]
					 if (D.targetDuty < 800){
 8004028:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <ParseDiagnostics+0x160>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004030:	da02      	bge.n	8004038 <ParseDiagnostics+0xd0>
						 rampTime = 5;
 8004032:	2305      	movs	r3, #5
 8004034:	753b      	strb	r3, [r7, #20]
 8004036:	e001      	b.n	800403c <ParseDiagnostics+0xd4>
					 }else{
						 rampTime = 10;
 8004038:	230a      	movs	r3, #10
 800403a:	753b      	strb	r3, [r7, #20]
					 }
					 count += 1;
 800403c:	7dbb      	ldrb	r3, [r7, #22]
 800403e:	3301      	adds	r3, #1
 8004040:	75bb      	strb	r3, [r7, #22]
				}
				if (D.typeofTest == CLOSEDLOOP){
 8004042:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <ParseDiagnostics+0x160>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d110      	bne.n	800406c <ParseDiagnostics+0x104>
					D.targetRPM = (uint16_t)(T.value_int);
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	461a      	mov	r2, r3
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <ParseDiagnostics+0x160>)
 8004050:	605a      	str	r2, [r3, #4]
					if (D.targetRPM < 800){
 8004052:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <ParseDiagnostics+0x160>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800405a:	da02      	bge.n	8004062 <ParseDiagnostics+0xfa>
						 rampTime = 5;
 800405c:	2305      	movs	r3, #5
 800405e:	753b      	strb	r3, [r7, #20]
 8004060:	e001      	b.n	8004066 <ParseDiagnostics+0xfe>
					 }else{
						 rampTime = 10;
 8004062:	230a      	movs	r3, #10
 8004064:	753b      	strb	r3, [r7, #20]
					 }
					count += 1;
 8004066:	7dbb      	ldrb	r3, [r7, #22]
 8004068:	3301      	adds	r3, #1
 800406a:	75bb      	strb	r3, [r7, #22]
				}
				D.rampUpTime = rampTime;
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <ParseDiagnostics+0x160>)
 800406e:	7d3b      	ldrb	r3, [r7, #20]
 8004070:	7393      	strb	r3, [r2, #14]
				D.rampDownTime = rampTime;
 8004072:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <ParseDiagnostics+0x160>)
 8004074:	7d3b      	ldrb	r3, [r7, #20]
 8004076:	73d3      	strb	r3, [r2, #15]
				break;
 8004078:	e00e      	b.n	8004098 <ParseDiagnostics+0x130>
			case TARGET_RUNTIME:
				D.runTime = T.value_int;
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <ParseDiagnostics+0x160>)
 800407e:	819a      	strh	r2, [r3, #12]
				count += 1;
 8004080:	7dbb      	ldrb	r3, [r7, #22]
 8004082:	3301      	adds	r3, #1
 8004084:	75bb      	strb	r3, [r7, #22]
				break;
 8004086:	e007      	b.n	8004098 <ParseDiagnostics+0x130>

			case MOTOR_DIR:
				D.direction = T.value_int;
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <ParseDiagnostics+0x160>)
 800408e:	741a      	strb	r2, [r3, #16]
				count += 1;
 8004090:	7dbb      	ldrb	r3, [r7, #22]
 8004092:	3301      	adds	r3, #1
 8004094:	75bb      	strb	r3, [r7, #22]
				break;
 8004096:	bf00      	nop
    for (int i=0;i<BT.attributeCnt;i++){
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	3301      	adds	r3, #1
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <ParseDiagnostics+0x16c>)
 80040a0:	795b      	ldrb	r3, [r3, #5]
 80040a2:	461a      	mov	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4293      	cmp	r3, r2
 80040a8:	f6ff af6e 	blt.w	8003f88 <ParseDiagnostics+0x20>

		}
    }

    if (D.motorID < 6){
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <ParseDiagnostics+0x160>)
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d804      	bhi.n	80040be <ParseDiagnostics+0x156>
		if (count == 5){
 80040b4:	7dbb      	ldrb	r3, [r7, #22]
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d101      	bne.n	80040be <ParseDiagnostics+0x156>
			allSettingsRecieved = 1;
 80040ba:	2301      	movs	r3, #1
 80040bc:	757b      	strb	r3, [r7, #21]
		}
    }

	return allSettingsRecieved;
 80040be:	7d7b      	ldrb	r3, [r7, #21]

}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000754 	.word	0x20000754
 80040cc:	51eb851f 	.word	0x51eb851f
 80040d0:	cccccccd 	.word	0xcccccccd
 80040d4:	20000894 	.word	0x20000894

080040d8 <InitializeBTMsg_TypeDef>:



void InitializeBTMsg_TypeDef(BTRecvMsg_TypeDef *b){
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	b->sof = 0;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
	b->eof = 0;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	709a      	strb	r2, [r3, #2]
	b->length = 0;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	705a      	strb	r2, [r3, #1]
	b->attributeCnt = 0;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	715a      	strb	r2, [r3, #5]
	b->information = 0;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	70da      	strb	r2, [r3, #3]
	b->subState = 0;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	711a      	strb	r2, [r3, #4]
	b->TLVsLength = 0;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	719a      	strb	r2, [r3, #6]
	b->BTmsgGood=0;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	71da      	strb	r2, [r3, #7]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <BT_MC_generateDiagnosticMsg>:

uint8_t BT_MC_generateDiagnosticMsg(uint8_t BT_MotorID){
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
	  char TLV_Buffer[12];
	  uint8_t tlvSize = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	77bb      	strb	r3, [r7, #30]
	  uint8_t eof_size  = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	777b      	strb	r3, [r7, #29]
	  uint8_t initLength = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	773b      	strb	r3, [r7, #28]
	  uint8_t motorID = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	76fb      	strb	r3, [r7, #27]
	  uint8_t noOfAttributes = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	77fb      	strb	r3, [r7, #31]

	  motorID = GetMotorID_from_BTMotor_ID(BT_MotorID);
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fc87 	bl	8004a50 <GetMotorID_from_BTMotor_ID>
 8004142:	4603      	mov	r3, r0
 8004144:	76fb      	strb	r3, [r7, #27]
	  if (motorID < 5){
 8004146:	7efb      	ldrb	r3, [r7, #27]
 8004148:	2b04      	cmp	r3, #4
 800414a:	d802      	bhi.n	8004152 <BT_MC_generateDiagnosticMsg+0x36>
		  noOfAttributes = 4;
 800414c:	2304      	movs	r3, #4
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e001      	b.n	8004156 <BT_MC_generateDiagnosticMsg+0x3a>
	  }else{
		  noOfAttributes = 5;
 8004152:	2305      	movs	r3, #5
 8004154:	77fb      	strb	r3, [r7, #31]
	  }

	  initLength = Init_TXBuf_Frame(DIAG_RUN_DATA_TO_APP,SUBSTATE_NA,noOfAttributes);
 8004156:	7ffb      	ldrb	r3, [r7, #31]
 8004158:	461a      	mov	r2, r3
 800415a:	2199      	movs	r1, #153	; 0x99
 800415c:	2005      	movs	r0, #5
 800415e:	f7ff fe1d 	bl	8003d9c <Init_TXBuf_Frame>
 8004162:	4603      	mov	r3, r0
 8004164:	773b      	strb	r3, [r7, #28]

	  generateTLV_I(TLV_Buffer,DIAG_SPEED_DATA,R[motorID].presentRPM);
 8004166:	7efb      	ldrb	r3, [r7, #27]
 8004168:	4a5c      	ldr	r2, [pc, #368]	; (80042dc <BT_MC_generateDiagnosticMsg+0x1c0>)
 800416a:	212c      	movs	r1, #44	; 0x2c
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	4413      	add	r3, r2
 8004172:	330e      	adds	r3, #14
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fdbb 	bl	8003cf8 <generateTLV_I>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 8004182:	7f3a      	ldrb	r2, [r7, #28]
 8004184:	7fbb      	ldrb	r3, [r7, #30]
 8004186:	4413      	add	r3, r2
 8004188:	b2da      	uxtb	r2, r3
 800418a:	f107 030c 	add.w	r3, r7, #12
 800418e:	2108      	movs	r1, #8
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fddf 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_INT;
 8004196:	7fbb      	ldrb	r3, [r7, #30]
 8004198:	3308      	adds	r3, #8
 800419a:	77bb      	strb	r3, [r7, #30]

	  generateTLV_I(TLV_Buffer,DIAG_PWM_DATA,R[motorID].pwm);
 800419c:	7efb      	ldrb	r3, [r7, #27]
 800419e:	4a4f      	ldr	r2, [pc, #316]	; (80042dc <BT_MC_generateDiagnosticMsg+0x1c0>)
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	3310      	adds	r3, #16
 80041aa:	881a      	ldrh	r2, [r3, #0]
 80041ac:	f107 030c 	add.w	r3, r7, #12
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fda0 	bl	8003cf8 <generateTLV_I>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 80041b8:	7f3a      	ldrb	r2, [r7, #28]
 80041ba:	7fbb      	ldrb	r3, [r7, #30]
 80041bc:	4413      	add	r3, r2
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	f107 030c 	add.w	r3, r7, #12
 80041c4:	2108      	movs	r1, #8
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fdc4 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_INT;
 80041cc:	7fbb      	ldrb	r3, [r7, #30]
 80041ce:	3308      	adds	r3, #8
 80041d0:	77bb      	strb	r3, [r7, #30]

	  if (R[motorID].currentA == 0){
 80041d2:	7efb      	ldrb	r3, [r7, #27]
 80041d4:	4a41      	ldr	r2, [pc, #260]	; (80042dc <BT_MC_generateDiagnosticMsg+0x1c0>)
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	3318      	adds	r3, #24
 80041e0:	edd3 7a00 	vldr	s15, [r3]
 80041e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ec:	d108      	bne.n	8004200 <BT_MC_generateDiagnosticMsg+0xe4>
		  R[motorID].currentA = 0.001;
 80041ee:	7efb      	ldrb	r3, [r7, #27]
 80041f0:	4a3a      	ldr	r2, [pc, #232]	; (80042dc <BT_MC_generateDiagnosticMsg+0x1c0>)
 80041f2:	212c      	movs	r1, #44	; 0x2c
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	4413      	add	r3, r2
 80041fa:	3318      	adds	r3, #24
 80041fc:	4a38      	ldr	r2, [pc, #224]	; (80042e0 <BT_MC_generateDiagnosticMsg+0x1c4>)
 80041fe:	601a      	str	r2, [r3, #0]
	  }
	  generateTLV_F(TLV_Buffer,DIAG_CURRENT_DATA,R[motorID].currentA);
 8004200:	7efb      	ldrb	r3, [r7, #27]
 8004202:	4a36      	ldr	r2, [pc, #216]	; (80042dc <BT_MC_generateDiagnosticMsg+0x1c0>)
 8004204:	212c      	movs	r1, #44	; 0x2c
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	4413      	add	r3, r2
 800420c:	3318      	adds	r3, #24
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	f107 030c 	add.w	r3, r7, #12
 8004216:	eeb0 0a67 	vmov.f32	s0, s15
 800421a:	2103      	movs	r1, #3
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fd81 	bl	8003d24 <generateTLV_F>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 8004222:	7f3a      	ldrb	r2, [r7, #28]
 8004224:	7fbb      	ldrb	r3, [r7, #30]
 8004226:	4413      	add	r3, r2
 8004228:	b2da      	uxtb	r2, r3
 800422a:	f107 030c 	add.w	r3, r7, #12
 800422e:	210c      	movs	r1, #12
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fd8f 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_FLOAT;
 8004236:	7fbb      	ldrb	r3, [r7, #30]
 8004238:	330c      	adds	r3, #12
 800423a:	77bb      	strb	r3, [r7, #30]

	  if (R[motorID].power == 0){
 800423c:	7efb      	ldrb	r3, [r7, #27]
 800423e:	4a27      	ldr	r2, [pc, #156]	; (80042dc <BT_MC_generateDiagnosticMsg+0x1c0>)
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3328      	adds	r3, #40	; 0x28
 800424a:	edd3 7a00 	vldr	s15, [r3]
 800424e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	d108      	bne.n	800426a <BT_MC_generateDiagnosticMsg+0x14e>
		  R[motorID].power = 0.001;
 8004258:	7efb      	ldrb	r3, [r7, #27]
 800425a:	4a20      	ldr	r2, [pc, #128]	; (80042dc <BT_MC_generateDiagnosticMsg+0x1c0>)
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	3328      	adds	r3, #40	; 0x28
 8004266:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <BT_MC_generateDiagnosticMsg+0x1c4>)
 8004268:	601a      	str	r2, [r3, #0]
	  }
	  generateTLV_F(TLV_Buffer,DIAG_POWER_DATA,R[motorID].power);
 800426a:	7efb      	ldrb	r3, [r7, #27]
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <BT_MC_generateDiagnosticMsg+0x1c0>)
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3328      	adds	r3, #40	; 0x28
 8004278:	edd3 7a00 	vldr	s15, [r3]
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	eeb0 0a67 	vmov.f32	s0, s15
 8004284:	2104      	movs	r1, #4
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fd4c 	bl	8003d24 <generateTLV_F>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 800428c:	7f3a      	ldrb	r2, [r7, #28]
 800428e:	7fbb      	ldrb	r3, [r7, #30]
 8004290:	4413      	add	r3, r2
 8004292:	b2da      	uxtb	r2, r3
 8004294:	f107 030c 	add.w	r3, r7, #12
 8004298:	210c      	movs	r1, #12
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fd5a 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_FLOAT;
 80042a0:	7fbb      	ldrb	r3, [r7, #30]
 80042a2:	330c      	adds	r3, #12
 80042a4:	77bb      	strb	r3, [r7, #30]

	  eof_size = addEOF(initLength+tlvSize);
 80042a6:	7f3a      	ldrb	r2, [r7, #28]
 80042a8:	7fbb      	ldrb	r3, [r7, #30]
 80042aa:	4413      	add	r3, r2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fd92 	bl	8003dd8 <addEOF>
 80042b4:	4603      	mov	r3, r0
 80042b6:	777b      	strb	r3, [r7, #29]
	  correctLengthInFrame(initLength,tlvSize,eof_size);
 80042b8:	7f7a      	ldrb	r2, [r7, #29]
 80042ba:	7fb9      	ldrb	r1, [r7, #30]
 80042bc:	7f3b      	ldrb	r3, [r7, #28]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fda2 	bl	8003e08 <correctLengthInFrame>

	  return initLength + tlvSize + eof_size ;
 80042c4:	7f3a      	ldrb	r2, [r7, #28]
 80042c6:	7fbb      	ldrb	r3, [r7, #30]
 80042c8:	4413      	add	r3, r2
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	7f7b      	ldrb	r3, [r7, #29]
 80042ce:	4413      	add	r3, r2
 80042d0:	b2db      	uxtb	r3, r3
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2000076c 	.word	0x2000076c
 80042e0:	3a83126f 	.word	0x3a83126f

080042e4 <BT_MC_generateStatusMsg>:

uint8_t BT_MC_generateStatusMsg(uint8_t state){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
	char TLV_Buffer[12];
	  uint8_t tlvSize = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
	  uint8_t eof_size  = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	753b      	strb	r3, [r7, #20]
	  uint8_t initLength = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75bb      	strb	r3, [r7, #22]
	  uint8_t runAttributes = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	757b      	strb	r3, [r7, #21]

	  if ((state == BT_IDLE) || (state == BT_FINISH)){
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <BT_MC_generateStatusMsg+0x26>
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	2b06      	cmp	r3, #6
 8004308:	d11c      	bne.n	8004344 <BT_MC_generateStatusMsg+0x60>
		  initLength = Init_TXBuf_Frame(MC_STATE,state,1);
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	2201      	movs	r2, #1
 800430e:	4619      	mov	r1, r3
 8004310:	2006      	movs	r0, #6
 8004312:	f7ff fd43 	bl	8003d9c <Init_TXBuf_Frame>
 8004316:	4603      	mov	r3, r0
 8004318:	75bb      	strb	r3, [r7, #22]
		  generateTLV_I(TLV_Buffer,0x00,0);
 800431a:	f107 0308 	add.w	r3, r7, #8
 800431e:	2200      	movs	r2, #0
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fce8 	bl	8003cf8 <generateTLV_I>
		  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 8004328:	7dba      	ldrb	r2, [r7, #22]
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	4413      	add	r3, r2
 800432e:	b2da      	uxtb	r2, r3
 8004330:	f107 0308 	add.w	r3, r7, #8
 8004334:	2108      	movs	r1, #8
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fd0c 	bl	8003d54 <add_TLVBuf_To_TxBuf>
		  tlvSize += TLV_INT;
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	3308      	adds	r3, #8
 8004340:	75fb      	strb	r3, [r7, #23]
 8004342:	e16b      	b.n	800461c <BT_MC_generateStatusMsg+0x338>

	  }else if (state == BT_PAUSE){
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d11e      	bne.n	8004388 <BT_MC_generateStatusMsg+0xa4>
		  initLength = Init_TXBuf_Frame(MC_STATE,state,1);
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	2201      	movs	r2, #1
 800434e:	4619      	mov	r1, r3
 8004350:	2006      	movs	r0, #6
 8004352:	f7ff fd23 	bl	8003d9c <Init_TXBuf_Frame>
 8004356:	4603      	mov	r3, r0
 8004358:	75bb      	strb	r3, [r7, #22]
		  generateTLV_I(TLV_Buffer,BT_PAUSE_REASON,S.BT_pauseReason);
 800435a:	4bbd      	ldr	r3, [pc, #756]	; (8004650 <BT_MC_generateStatusMsg+0x36c>)
 800435c:	7c5b      	ldrb	r3, [r3, #17]
 800435e:	b29a      	uxth	r2, r3
 8004360:	f107 0308 	add.w	r3, r7, #8
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fcc6 	bl	8003cf8 <generateTLV_I>
		  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 800436c:	7dba      	ldrb	r2, [r7, #22]
 800436e:	7dfb      	ldrb	r3, [r7, #23]
 8004370:	4413      	add	r3, r2
 8004372:	b2da      	uxtb	r2, r3
 8004374:	f107 0308 	add.w	r3, r7, #8
 8004378:	2108      	movs	r1, #8
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fcea 	bl	8003d54 <add_TLVBuf_To_TxBuf>
		  tlvSize += TLV_INT;
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	3308      	adds	r3, #8
 8004384:	75fb      	strb	r3, [r7, #23]
 8004386:	e149      	b.n	800461c <BT_MC_generateStatusMsg+0x338>

	  }else if (state == BT_RUN){
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	2b01      	cmp	r3, #1
 800438c:	f040 80fb 	bne.w	8004586 <BT_MC_generateStatusMsg+0x2a2>
		  if (S.BT_runInfoToSend == RUN_PRODUCTION_DATA){
 8004390:	4baf      	ldr	r3, [pc, #700]	; (8004650 <BT_MC_generateStatusMsg+0x36c>)
 8004392:	7c9b      	ldrb	r3, [r3, #18]
 8004394:	2b0a      	cmp	r3, #10
 8004396:	d102      	bne.n	800439e <BT_MC_generateStatusMsg+0xba>
			  runAttributes = 6;
 8004398:	2306      	movs	r3, #6
 800439a:	757b      	strb	r3, [r7, #21]
 800439c:	e001      	b.n	80043a2 <BT_MC_generateStatusMsg+0xbe>
		  }else{
			  runAttributes = 8;
 800439e:	2308      	movs	r3, #8
 80043a0:	757b      	strb	r3, [r7, #21]
		  }
		  initLength = Init_TXBuf_Frame(MC_STATE,state,runAttributes);
 80043a2:	7d7a      	ldrb	r2, [r7, #21]
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	4619      	mov	r1, r3
 80043a8:	2006      	movs	r0, #6
 80043aa:	f7ff fcf7 	bl	8003d9c <Init_TXBuf_Frame>
 80043ae:	4603      	mov	r3, r0
 80043b0:	75bb      	strb	r3, [r7, #22]

		  generateTLV_C(TLV_Buffer,RUN_TLV_WHAT_INFO,S.BT_runInfoToSend);
 80043b2:	4ba7      	ldr	r3, [pc, #668]	; (8004650 <BT_MC_generateStatusMsg+0x36c>)
 80043b4:	7c9b      	ldrb	r3, [r3, #18]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	2109      	movs	r1, #9
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fc84 	bl	8003ccc <generateTLV_C>
		  add_TLVBuf_To_TxBuf(TLV_Buffer,TLC_C,initLength+tlvSize);
 80043c4:	7dba      	ldrb	r2, [r7, #22]
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	4413      	add	r3, r2
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	f107 0308 	add.w	r3, r7, #8
 80043d0:	2106      	movs	r1, #6
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fcbe 	bl	8003d54 <add_TLVBuf_To_TxBuf>
		  tlvSize += TLC_C;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	3306      	adds	r3, #6
 80043dc:	75fb      	strb	r3, [r7, #23]

		  generateTLV_F(TLV_Buffer,RUN_CARDING_DLVRY_MTR_MIN,msp.delivery_mMin);
 80043de:	4b9d      	ldr	r3, [pc, #628]	; (8004654 <BT_MC_generateStatusMsg+0x370>)
 80043e0:	edd3 7a00 	vldr	s15, [r3]
 80043e4:	f107 0308 	add.w	r3, r7, #8
 80043e8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ec:	210d      	movs	r1, #13
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fc98 	bl	8003d24 <generateTLV_F>
		  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 80043f4:	7dba      	ldrb	r2, [r7, #22]
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	4413      	add	r3, r2
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	f107 0308 	add.w	r3, r7, #8
 8004400:	210c      	movs	r1, #12
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fca6 	bl	8003d54 <add_TLVBuf_To_TxBuf>
		  tlvSize += TLV_FLOAT;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	330c      	adds	r3, #12
 800440c:	75fb      	strb	r3, [r7, #23]

		  generateTLV_I(TLV_Buffer,RUN_DUCT_SENSOR,0);
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	2200      	movs	r2, #0
 8004414:	210b      	movs	r1, #11
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fc6e 	bl	8003cf8 <generateTLV_I>
		  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 800441c:	7dba      	ldrb	r2, [r7, #22]
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	4413      	add	r3, r2
 8004422:	b2da      	uxtb	r2, r3
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	2108      	movs	r1, #8
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fc92 	bl	8003d54 <add_TLVBuf_To_TxBuf>
		  tlvSize += TLV_INT;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	3308      	adds	r3, #8
 8004434:	75fb      	strb	r3, [r7, #23]

		  generateTLV_I(TLV_Buffer,RUN_COILER_SENSOR,1);
 8004436:	f107 0308 	add.w	r3, r7, #8
 800443a:	2201      	movs	r2, #1
 800443c:	210c      	movs	r1, #12
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fc5a 	bl	8003cf8 <generateTLV_I>
		  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 8004444:	7dba      	ldrb	r2, [r7, #22]
 8004446:	7dfb      	ldrb	r3, [r7, #23]
 8004448:	4413      	add	r3, r2
 800444a:	b2da      	uxtb	r2, r3
 800444c:	f107 0308 	add.w	r3, r7, #8
 8004450:	2108      	movs	r1, #8
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fc7e 	bl	8003d54 <add_TLVBuf_To_TxBuf>
		  tlvSize += TLV_INT;
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	3308      	adds	r3, #8
 800445c:	75fb      	strb	r3, [r7, #23]

		  if (S.BT_runInfoToSend == RUN_PRODUCTION_DATA){
 800445e:	4b7c      	ldr	r3, [pc, #496]	; (8004650 <BT_MC_generateStatusMsg+0x36c>)
 8004460:	7c9b      	ldrb	r3, [r3, #18]
 8004462:	2b0a      	cmp	r3, #10
 8004464:	d12a      	bne.n	80044bc <BT_MC_generateStatusMsg+0x1d8>
			  generateTLV_F(TLV_Buffer,RUN_OUTPUT_MTRS_PER_SPINDLE,150.54);
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8004658 <BT_MC_generateStatusMsg+0x374>
 800446e:	2108      	movs	r1, #8
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fc57 	bl	8003d24 <generateTLV_F>
			  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 8004476:	7dba      	ldrb	r2, [r7, #22]
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	4413      	add	r3, r2
 800447c:	b2da      	uxtb	r2, r3
 800447e:	f107 0308 	add.w	r3, r7, #8
 8004482:	210c      	movs	r1, #12
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fc65 	bl	8003d54 <add_TLVBuf_To_TxBuf>
			  tlvSize += TLV_FLOAT;
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	330c      	adds	r3, #12
 800448e:	75fb      	strb	r3, [r7, #23]

			  generateTLV_F(TLV_Buffer,RUN_TOTAL_POWER,250); // totalPower
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800465c <BT_MC_generateStatusMsg+0x378>
 8004498:	210a      	movs	r1, #10
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fc42 	bl	8003d24 <generateTLV_F>
			  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 80044a0:	7dba      	ldrb	r2, [r7, #22]
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	4413      	add	r3, r2
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	f107 0308 	add.w	r3, r7, #8
 80044ac:	210c      	movs	r1, #12
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fc50 	bl	8003d54 <add_TLVBuf_To_TxBuf>
			  tlvSize += TLV_FLOAT;
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	330c      	adds	r3, #12
 80044b8:	75fb      	strb	r3, [r7, #23]
 80044ba:	e0af      	b.n	800461c <BT_MC_generateStatusMsg+0x338>
		  }else{
			  //send motor Data
			  generateTLV_I(TLV_Buffer,RUN_TLV_MOTOR_TEMP, 12+S.BT_runInfowhichMotor );//R[S.BT_runInfowhichMotor].motorTemp);
 80044bc:	4b64      	ldr	r3, [pc, #400]	; (8004650 <BT_MC_generateStatusMsg+0x36c>)
 80044be:	7cdb      	ldrb	r3, [r3, #19]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	330c      	adds	r3, #12
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	f107 0308 	add.w	r3, r7, #8
 80044ca:	2104      	movs	r1, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fc13 	bl	8003cf8 <generateTLV_I>
			  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 80044d2:	7dba      	ldrb	r2, [r7, #22]
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	4413      	add	r3, r2
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	2108      	movs	r1, #8
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fc37 	bl	8003d54 <add_TLVBuf_To_TxBuf>
			  tlvSize += TLV_INT;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	3308      	adds	r3, #8
 80044ea:	75fb      	strb	r3, [r7, #23]

			  generateTLV_I(TLV_Buffer,RUN_TLV_MOSFET_TEMP, 15+S.BT_runInfowhichMotor);//R[S.BT_runInfowhichMotor].mosfetTemp);
 80044ec:	4b58      	ldr	r3, [pc, #352]	; (8004650 <BT_MC_generateStatusMsg+0x36c>)
 80044ee:	7cdb      	ldrb	r3, [r3, #19]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	330f      	adds	r3, #15
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	f107 0308 	add.w	r3, r7, #8
 80044fa:	2105      	movs	r1, #5
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fbfb 	bl	8003cf8 <generateTLV_I>
			  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 8004502:	7dba      	ldrb	r2, [r7, #22]
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	4413      	add	r3, r2
 8004508:	b2da      	uxtb	r2, r3
 800450a:	f107 0308 	add.w	r3, r7, #8
 800450e:	2108      	movs	r1, #8
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fc1f 	bl	8003d54 <add_TLVBuf_To_TxBuf>
			  tlvSize += TLV_INT;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	3308      	adds	r3, #8
 800451a:	75fb      	strb	r3, [r7, #23]

			  generateTLV_F(TLV_Buffer,RUN_TLV_MOTOR_CURRENT,40+S.BT_runInfowhichMotor);//R[S.BT_runInfowhichMotor].currentA);
 800451c:	4b4c      	ldr	r3, [pc, #304]	; (8004650 <BT_MC_generateStatusMsg+0x36c>)
 800451e:	7cdb      	ldrb	r3, [r3, #19]
 8004520:	3328      	adds	r3, #40	; 0x28
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800452a:	f107 0308 	add.w	r3, r7, #8
 800452e:	eeb0 0a67 	vmov.f32	s0, s15
 8004532:	2106      	movs	r1, #6
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fbf5 	bl	8003d24 <generateTLV_F>
			  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 800453a:	7dba      	ldrb	r2, [r7, #22]
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	4413      	add	r3, r2
 8004540:	b2da      	uxtb	r2, r3
 8004542:	f107 0308 	add.w	r3, r7, #8
 8004546:	210c      	movs	r1, #12
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fc03 	bl	8003d54 <add_TLVBuf_To_TxBuf>
			  tlvSize += TLV_FLOAT;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	330c      	adds	r3, #12
 8004552:	75fb      	strb	r3, [r7, #23]

			  generateTLV_I(TLV_Buffer,RUN_TLV_MOTOR_RPM,200+S.BT_runInfowhichMotor);//R[S.BT_runInfowhichMotor].presentRPM);
 8004554:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <BT_MC_generateStatusMsg+0x36c>)
 8004556:	7cdb      	ldrb	r3, [r3, #19]
 8004558:	b29b      	uxth	r3, r3
 800455a:	33c8      	adds	r3, #200	; 0xc8
 800455c:	b29a      	uxth	r2, r3
 800455e:	f107 0308 	add.w	r3, r7, #8
 8004562:	2107      	movs	r1, #7
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fbc7 	bl	8003cf8 <generateTLV_I>
			  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 800456a:	7dba      	ldrb	r2, [r7, #22]
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	4413      	add	r3, r2
 8004570:	b2da      	uxtb	r2, r3
 8004572:	f107 0308 	add.w	r3, r7, #8
 8004576:	2108      	movs	r1, #8
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fbeb 	bl	8003d54 <add_TLVBuf_To_TxBuf>
			  tlvSize += TLV_INT;
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	3308      	adds	r3, #8
 8004582:	75fb      	strb	r3, [r7, #23]
 8004584:	e04a      	b.n	800461c <BT_MC_generateStatusMsg+0x338>
		  }
	  }
	  else if (state == BT_STOP){
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d147      	bne.n	800461c <BT_MC_generateStatusMsg+0x338>
		  initLength = Init_TXBuf_Frame(MC_STATE,state,3);
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	2203      	movs	r2, #3
 8004590:	4619      	mov	r1, r3
 8004592:	2006      	movs	r0, #6
 8004594:	f7ff fc02 	bl	8003d9c <Init_TXBuf_Frame>
 8004598:	4603      	mov	r3, r0
 800459a:	75bb      	strb	r3, [r7, #22]

		  generateTLV_I(TLV_Buffer,ERR_REASON,ME.BT_errorReason);
 800459c:	4b30      	ldr	r3, [pc, #192]	; (8004660 <BT_MC_generateStatusMsg+0x37c>)
 800459e:	8a9a      	ldrh	r2, [r3, #20]
 80045a0:	f107 0308 	add.w	r3, r7, #8
 80045a4:	2101      	movs	r1, #1
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fba6 	bl	8003cf8 <generateTLV_I>
		  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 80045ac:	7dba      	ldrb	r2, [r7, #22]
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
 80045b0:	4413      	add	r3, r2
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	f107 0308 	add.w	r3, r7, #8
 80045b8:	2108      	movs	r1, #8
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fbca 	bl	8003d54 <add_TLVBuf_To_TxBuf>
		  tlvSize += TLV_INT;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	3308      	adds	r3, #8
 80045c4:	75fb      	strb	r3, [r7, #23]

		  generateTLV_I(TLV_Buffer,ERR_SOURCE,ME.BT_errorSrc);
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <BT_MC_generateStatusMsg+0x37c>)
 80045c8:	7c9b      	ldrb	r3, [r3, #18]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	f107 0308 	add.w	r3, r7, #8
 80045d0:	2102      	movs	r1, #2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fb90 	bl	8003cf8 <generateTLV_I>
		  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 80045d8:	7dba      	ldrb	r2, [r7, #22]
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	4413      	add	r3, r2
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	f107 0308 	add.w	r3, r7, #8
 80045e4:	2108      	movs	r1, #8
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fbb4 	bl	8003d54 <add_TLVBuf_To_TxBuf>
		  tlvSize += TLV_INT;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	3308      	adds	r3, #8
 80045f0:	75fb      	strb	r3, [r7, #23]

		  generateTLV_I(TLV_Buffer,ERR_CODE,ME.BT_errorCode);
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <BT_MC_generateStatusMsg+0x37c>)
 80045f4:	8ada      	ldrh	r2, [r3, #22]
 80045f6:	f107 0308 	add.w	r3, r7, #8
 80045fa:	2103      	movs	r1, #3
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fb7b 	bl	8003cf8 <generateTLV_I>
		  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 8004602:	7dba      	ldrb	r2, [r7, #22]
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	4413      	add	r3, r2
 8004608:	b2da      	uxtb	r2, r3
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	2108      	movs	r1, #8
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fb9f 	bl	8003d54 <add_TLVBuf_To_TxBuf>
		  tlvSize += TLV_INT;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	3308      	adds	r3, #8
 800461a:	75fb      	strb	r3, [r7, #23]
	  }

	  eof_size = addEOF(initLength+tlvSize);
 800461c:	7dba      	ldrb	r2, [r7, #22]
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	4413      	add	r3, r2
 8004622:	b2db      	uxtb	r3, r3
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fbd7 	bl	8003dd8 <addEOF>
 800462a:	4603      	mov	r3, r0
 800462c:	753b      	strb	r3, [r7, #20]
	  correctLengthInFrame(initLength,tlvSize,eof_size);
 800462e:	7d3a      	ldrb	r2, [r7, #20]
 8004630:	7df9      	ldrb	r1, [r7, #23]
 8004632:	7dbb      	ldrb	r3, [r7, #22]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff fbe7 	bl	8003e08 <correctLengthInFrame>
	  return initLength + tlvSize + eof_size ;
 800463a:	7dba      	ldrb	r2, [r7, #22]
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	4413      	add	r3, r2
 8004640:	b2da      	uxtb	r2, r3
 8004642:	7d3b      	ldrb	r3, [r7, #20]
 8004644:	4413      	add	r3, r2
 8004646:	b2db      	uxtb	r3, r3

}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000738 	.word	0x20000738
 8004654:	20000620 	.word	0x20000620
 8004658:	43168a3d 	.word	0x43168a3d
 800465c:	437a0000 	.word	0x437a0000
 8004660:	20000684 	.word	0x20000684

08004664 <BT_MC_generateSettingsMsg>:
 */

#include "BT_Machine.h"


uint8_t BT_MC_generateSettingsMsg(machineSettingsTypeDef *m){
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	  char TLV_Buffer[12];
	  uint8_t tlvSize = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	75fb      	strb	r3, [r7, #23]
	  uint8_t eof_size  = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	75bb      	strb	r3, [r7, #22]
	  uint8_t initLength = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	757b      	strb	r3, [r7, #21]

	  initLength = Init_TXBuf_Frame(SETTINGS_FROM_MC,SUBSTATE_NA,12);
 8004678:	220c      	movs	r2, #12
 800467a:	2199      	movs	r1, #153	; 0x99
 800467c:	2002      	movs	r0, #2
 800467e:	f7ff fb8d 	bl	8003d9c <Init_TXBuf_Frame>
 8004682:	4603      	mov	r3, r0
 8004684:	757b      	strb	r3, [r7, #21]

	  generateTLV_F(TLV_Buffer,DELIVERY_M_MIN_BT,m->delivery_mMin);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	edd3 7a00 	vldr	s15, [r3]
 800468c:	f107 0308 	add.w	r3, r7, #8
 8004690:	eeb0 0a67 	vmov.f32	s0, s15
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fb44 	bl	8003d24 <generateTLV_F>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 800469c:	7d7a      	ldrb	r2, [r7, #21]
 800469e:	7dfb      	ldrb	r3, [r7, #23]
 80046a0:	4413      	add	r3, r2
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	210c      	movs	r1, #12
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fb52 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_FLOAT;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	330c      	adds	r3, #12
 80046b4:	75fb      	strb	r3, [r7, #23]

	  generateTLV_F(TLV_Buffer,DRAFT_BT,m->draft);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80046bc:	f107 0308 	add.w	r3, r7, #8
 80046c0:	eeb0 0a67 	vmov.f32	s0, s15
 80046c4:	2181      	movs	r1, #129	; 0x81
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fb2c 	bl	8003d24 <generateTLV_F>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 80046cc:	7d7a      	ldrb	r2, [r7, #21]
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	4413      	add	r3, r2
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	f107 0308 	add.w	r3, r7, #8
 80046d8:	210c      	movs	r1, #12
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fb3a 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_FLOAT;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	330c      	adds	r3, #12
 80046e4:	75fb      	strb	r3, [r7, #23]

	  generateTLV_I(TLV_Buffer,CARDING_CYL_SPEED_BT,m->cylinderSpeed);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	891a      	ldrh	r2, [r3, #8]
 80046ea:	f107 0308 	add.w	r3, r7, #8
 80046ee:	2182      	movs	r1, #130	; 0x82
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fb01 	bl	8003cf8 <generateTLV_I>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 80046f6:	7d7a      	ldrb	r2, [r7, #21]
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	4413      	add	r3, r2
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	f107 0308 	add.w	r3, r7, #8
 8004702:	2108      	movs	r1, #8
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fb25 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_INT;
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	3308      	adds	r3, #8
 800470e:	75fb      	strb	r3, [r7, #23]

	  generateTLV_I(TLV_Buffer,BEATER_CYL_SPEED_BT,m->beaterSpeed);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8a1a      	ldrh	r2, [r3, #16]
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	2184      	movs	r1, #132	; 0x84
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff faec 	bl	8003cf8 <generateTLV_I>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 8004720:	7d7a      	ldrb	r2, [r7, #21]
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	4413      	add	r3, r2
 8004726:	b2da      	uxtb	r2, r3
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	2108      	movs	r1, #8
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fb10 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_INT;
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	3308      	adds	r3, #8
 8004738:	75fb      	strb	r3, [r7, #23]

	  generateTLV_F(TLV_Buffer,CARDING_FEED_SPEED_BT,m->cylinderFeed);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004740:	f107 0308 	add.w	r3, r7, #8
 8004744:	eeb0 0a67 	vmov.f32	s0, s15
 8004748:	2183      	movs	r1, #131	; 0x83
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff faea 	bl	8003d24 <generateTLV_F>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 8004750:	7d7a      	ldrb	r2, [r7, #21]
 8004752:	7dfb      	ldrb	r3, [r7, #23]
 8004754:	4413      	add	r3, r2
 8004756:	b2da      	uxtb	r2, r3
 8004758:	f107 0308 	add.w	r3, r7, #8
 800475c:	210c      	movs	r1, #12
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff faf8 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_FLOAT;
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	330c      	adds	r3, #12
 8004768:	75fb      	strb	r3, [r7, #23]

	  generateTLV_F(TLV_Buffer,BEATER_FEED_SPEED_BT,m->beaterFeed);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	eeb0 0a67 	vmov.f32	s0, s15
 8004778:	2185      	movs	r1, #133	; 0x85
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fad2 	bl	8003d24 <generateTLV_F>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_FLOAT,initLength+tlvSize);
 8004780:	7d7a      	ldrb	r2, [r7, #21]
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	4413      	add	r3, r2
 8004786:	b2da      	uxtb	r2, r3
 8004788:	f107 0308 	add.w	r3, r7, #8
 800478c:	210c      	movs	r1, #12
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fae0 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_FLOAT;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	330c      	adds	r3, #12
 8004798:	75fb      	strb	r3, [r7, #23]

	  generateTLV_I(TLV_Buffer,TRUNK_DELAY_BT,m->trunkDelay);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8b1a      	ldrh	r2, [r3, #24]
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	2186      	movs	r1, #134	; 0x86
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff faa7 	bl	8003cf8 <generateTLV_I>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 80047aa:	7d7a      	ldrb	r2, [r7, #21]
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	4413      	add	r3, r2
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	f107 0308 	add.w	r3, r7, #8
 80047b6:	2108      	movs	r1, #8
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff facb 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_INT;
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	3308      	adds	r3, #8
 80047c2:	75fb      	strb	r3, [r7, #23]

	  generateTLV_I(TLV_Buffer,LENGTH_LIMIT_BT,m->lengthLimit);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8b5a      	ldrh	r2, [r3, #26]
 80047c8:	f107 0308 	add.w	r3, r7, #8
 80047cc:	2187      	movs	r1, #135	; 0x87
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fa92 	bl	8003cf8 <generateTLV_I>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 80047d4:	7d7a      	ldrb	r2, [r7, #21]
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
 80047d8:	4413      	add	r3, r2
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	f107 0308 	add.w	r3, r7, #8
 80047e0:	2108      	movs	r1, #8
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fab6 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_INT;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	3308      	adds	r3, #8
 80047ec:	75fb      	strb	r3, [r7, #23]

	  generateTLV_I(TLV_Buffer,RAMPTIMES_BT,m->rampTimes);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f107 0308 	add.w	r3, r7, #8
 80047f8:	2188      	movs	r1, #136	; 0x88
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fa7c 	bl	8003cf8 <generateTLV_I>
	  add_TLVBuf_To_TxBuf(TLV_Buffer,TLV_INT,initLength+tlvSize);
 8004800:	7d7a      	ldrb	r2, [r7, #21]
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	4413      	add	r3, r2
 8004806:	b2da      	uxtb	r2, r3
 8004808:	f107 0308 	add.w	r3, r7, #8
 800480c:	2108      	movs	r1, #8
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff faa0 	bl	8003d54 <add_TLVBuf_To_TxBuf>
	  tlvSize += TLV_INT;
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	3308      	adds	r3, #8
 8004818:	75fb      	strb	r3, [r7, #23]

	  eof_size = addEOF(initLength+tlvSize);
 800481a:	7d7a      	ldrb	r2, [r7, #21]
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	4413      	add	r3, r2
 8004820:	b2db      	uxtb	r3, r3
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fad8 	bl	8003dd8 <addEOF>
 8004828:	4603      	mov	r3, r0
 800482a:	75bb      	strb	r3, [r7, #22]
	  correctLengthInFrame(initLength,tlvSize,eof_size);
 800482c:	7dba      	ldrb	r2, [r7, #22]
 800482e:	7df9      	ldrb	r1, [r7, #23]
 8004830:	7d7b      	ldrb	r3, [r7, #21]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fae8 	bl	8003e08 <correctLengthInFrame>

	  return initLength + tlvSize + eof_size;
 8004838:	7d7a      	ldrb	r2, [r7, #21]
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	4413      	add	r3, r2
 800483e:	b2da      	uxtb	r2, r3
 8004840:	7dbb      	ldrb	r3, [r7, #22]
 8004842:	4413      	add	r3, r2
 8004844:	b2db      	uxtb	r3, r3

}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <BT_MC_parse_Settings>:

//FLYER
uint8_t BT_MC_parse_Settings(machineSettingsTypeDef *mspBT){
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	//Buffer Rec index 10 onwards is TLVs till 10 + TlvsLength
	TLVStruct_TypeDef T;
	uint8_t TLV_start = 10;
 8004858:	230a      	movs	r3, #10
 800485a:	77fb      	strb	r3, [r7, #31]
	uint8_t tlvSize = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	75fb      	strb	r3, [r7, #23]
	uint8_t count = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	77bb      	strb	r3, [r7, #30]
	uint8_t allSettingsRecieved = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	777b      	strb	r3, [r7, #29]

    for (int i=0;i<BT.attributeCnt;i++){
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	e06f      	b.n	800494e <BT_MC_parse_Settings+0xfe>
    	tlvSize = parseTLV(&T,TLV_start);
 800486e:	7ffa      	ldrb	r2, [r7, #31]
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff faee 	bl	8003e58 <parseTLV>
 800487c:	4603      	mov	r3, r0
 800487e:	75fb      	strb	r3, [r7, #23]
    	TLV_start += tlvSize;
 8004880:	7ffa      	ldrb	r2, [r7, #31]
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	4413      	add	r3, r2
 8004886:	77fb      	strb	r3, [r7, #31]
    	switch (T.type){
 8004888:	7b3b      	ldrb	r3, [r7, #12]
 800488a:	3b80      	subs	r3, #128	; 0x80
 800488c:	2b08      	cmp	r3, #8
 800488e:	d85b      	bhi.n	8004948 <BT_MC_parse_Settings+0xf8>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <BT_MC_parse_Settings+0x48>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048cb 	.word	0x080048cb
 80048a0:	080048d9 	.word	0x080048d9
 80048a4:	080048f5 	.word	0x080048f5
 80048a8:	080048e7 	.word	0x080048e7
 80048ac:	08004903 	.word	0x08004903
 80048b0:	08004911 	.word	0x08004911
 80048b4:	0800492b 	.word	0x0800492b
 80048b8:	08004939 	.word	0x08004939
    		case DELIVERY_M_MIN_BT:
    			mspBT->delivery_mMin = T.value_f;
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
    			count += 1;
 80048c2:	7fbb      	ldrb	r3, [r7, #30]
 80048c4:	3301      	adds	r3, #1
 80048c6:	77bb      	strb	r3, [r7, #30]
    			break;
 80048c8:	e03e      	b.n	8004948 <BT_MC_parse_Settings+0xf8>
    		case DRAFT_BT:
    			mspBT->draft = T.value_f;
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	605a      	str	r2, [r3, #4]
    			count += 1;
 80048d0:	7fbb      	ldrb	r3, [r7, #30]
 80048d2:	3301      	adds	r3, #1
 80048d4:	77bb      	strb	r3, [r7, #30]
    			break;
 80048d6:	e037      	b.n	8004948 <BT_MC_parse_Settings+0xf8>
    		case CARDING_CYL_SPEED_BT:
    			mspBT->cylinderSpeed = T.value_int;
 80048d8:	89fa      	ldrh	r2, [r7, #14]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	811a      	strh	r2, [r3, #8]
    			count += 1;
 80048de:	7fbb      	ldrb	r3, [r7, #30]
 80048e0:	3301      	adds	r3, #1
 80048e2:	77bb      	strb	r3, [r7, #30]
    			break;
 80048e4:	e030      	b.n	8004948 <BT_MC_parse_Settings+0xf8>
    		case BEATER_CYL_SPEED_BT:
    			mspBT->beaterSpeed = T.value_int;
 80048e6:	89fa      	ldrh	r2, [r7, #14]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	821a      	strh	r2, [r3, #16]
    			count += 1;
 80048ec:	7fbb      	ldrb	r3, [r7, #30]
 80048ee:	3301      	adds	r3, #1
 80048f0:	77bb      	strb	r3, [r7, #30]
    			break;
 80048f2:	e029      	b.n	8004948 <BT_MC_parse_Settings+0xf8>
    		case CARDING_FEED_SPEED_BT:
    			mspBT->cylinderFeed = T.value_f;
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	60da      	str	r2, [r3, #12]
    			count += 1;
 80048fa:	7fbb      	ldrb	r3, [r7, #30]
 80048fc:	3301      	adds	r3, #1
 80048fe:	77bb      	strb	r3, [r7, #30]
    			break;
 8004900:	e022      	b.n	8004948 <BT_MC_parse_Settings+0xf8>
    		case BEATER_FEED_SPEED_BT:
    			mspBT->beaterFeed = T.value_f;
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	615a      	str	r2, [r3, #20]
    			count += 1;
 8004908:	7fbb      	ldrb	r3, [r7, #30]
 800490a:	3301      	adds	r3, #1
 800490c:	77bb      	strb	r3, [r7, #30]
    			break;
 800490e:	e01b      	b.n	8004948 <BT_MC_parse_Settings+0xf8>
       		case TRUNK_DELAY_BT:
				mspBT->trunkDelay = T.value_f;
 8004910:	edd7 7a04 	vldr	s15, [r7, #16]
 8004914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004918:	ee17 3a90 	vmov	r3, s15
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	831a      	strh	r2, [r3, #24]
				count += 1;
 8004922:	7fbb      	ldrb	r3, [r7, #30]
 8004924:	3301      	adds	r3, #1
 8004926:	77bb      	strb	r3, [r7, #30]
				break;
 8004928:	e00e      	b.n	8004948 <BT_MC_parse_Settings+0xf8>
    		case LENGTH_LIMIT_BT:
    			mspBT->lengthLimit = T.value_int;
 800492a:	89fa      	ldrh	r2, [r7, #14]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	835a      	strh	r2, [r3, #26]
    			count += 1;
 8004930:	7fbb      	ldrb	r3, [r7, #30]
 8004932:	3301      	adds	r3, #1
 8004934:	77bb      	strb	r3, [r7, #30]
    			break;
 8004936:	e007      	b.n	8004948 <BT_MC_parse_Settings+0xf8>
    		case RAMPTIMES_BT:
    			mspBT->rampTimes = T.value_int;
 8004938:	89fb      	ldrh	r3, [r7, #14]
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	61da      	str	r2, [r3, #28]
    			count += 1;
 8004940:	7fbb      	ldrb	r3, [r7, #30]
 8004942:	3301      	adds	r3, #1
 8004944:	77bb      	strb	r3, [r7, #30]
    			break;
 8004946:	bf00      	nop
    for (int i=0;i<BT.attributeCnt;i++){
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	3301      	adds	r3, #1
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <BT_MC_parse_Settings+0x120>)
 8004950:	795b      	ldrb	r3, [r3, #5]
 8004952:	461a      	mov	r2, r3
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	4293      	cmp	r3, r2
 8004958:	db89      	blt.n	800486e <BT_MC_parse_Settings+0x1e>
    	}
    }
    if (count == 9){
 800495a:	7fbb      	ldrb	r3, [r7, #30]
 800495c:	2b09      	cmp	r3, #9
 800495e:	d101      	bne.n	8004964 <BT_MC_parse_Settings+0x114>
    	allSettingsRecieved = 1;
 8004960:	2301      	movs	r3, #1
 8004962:	777b      	strb	r3, [r7, #29]
    }

    return allSettingsRecieved;
 8004964:	7f7b      	ldrb	r3, [r7, #29]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000894 	.word	0x20000894

08004974 <BT_MC_Save_Settings>:

//FLYER
uint8_t BT_MC_Save_Settings(void){
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
	uint8_t fail;
	fail = WriteMachineSettingsIntoEeprom(&msp_BT);
 800497a:	481b      	ldr	r0, [pc, #108]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 800497c:	f000 ffdc 	bl	8005938 <WriteMachineSettingsIntoEeprom>
 8004980:	4603      	mov	r3, r0
 8004982:	71fb      	strb	r3, [r7, #7]
	if (fail == 0){
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d123      	bne.n	80049d2 <BT_MC_Save_Settings+0x5e>
		msp.delivery_mMin = msp_BT.delivery_mMin;
 800498a:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a17      	ldr	r2, [pc, #92]	; (80049ec <BT_MC_Save_Settings+0x78>)
 8004990:	6013      	str	r3, [r2, #0]
		msp.draft = msp_BT.draft;
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a15      	ldr	r2, [pc, #84]	; (80049ec <BT_MC_Save_Settings+0x78>)
 8004998:	6053      	str	r3, [r2, #4]
		msp.cylinderSpeed = msp_BT.cylinderSpeed;
 800499a:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 800499c:	891a      	ldrh	r2, [r3, #8]
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <BT_MC_Save_Settings+0x78>)
 80049a0:	811a      	strh	r2, [r3, #8]
		msp.cylinderFeed = msp_BT.cylinderFeed;
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4a11      	ldr	r2, [pc, #68]	; (80049ec <BT_MC_Save_Settings+0x78>)
 80049a8:	60d3      	str	r3, [r2, #12]
		msp.beaterSpeed = msp_BT.beaterSpeed;
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 80049ac:	8a1a      	ldrh	r2, [r3, #16]
 80049ae:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <BT_MC_Save_Settings+0x78>)
 80049b0:	821a      	strh	r2, [r3, #16]
		msp.beaterFeed = msp_BT.beaterFeed;
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	4a0d      	ldr	r2, [pc, #52]	; (80049ec <BT_MC_Save_Settings+0x78>)
 80049b8:	6153      	str	r3, [r2, #20]
		msp.trunkDelay = msp_BT.trunkDelay;
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 80049bc:	8b1a      	ldrh	r2, [r3, #24]
 80049be:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <BT_MC_Save_Settings+0x78>)
 80049c0:	831a      	strh	r2, [r3, #24]
		msp.lengthLimit = msp_BT.lengthLimit;
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 80049c4:	8b5a      	ldrh	r2, [r3, #26]
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <BT_MC_Save_Settings+0x78>)
 80049c8:	835a      	strh	r2, [r3, #26]
		msp.rampTimes = msp_BT.rampTimes;
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <BT_MC_Save_Settings+0x74>)
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4a07      	ldr	r2, [pc, #28]	; (80049ec <BT_MC_Save_Settings+0x78>)
 80049d0:	61d3      	str	r3, [r2, #28]
		//send success msg to APP
	}
	return !fail;
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000640 	.word	0x20000640
 80049ec:	20000620 	.word	0x20000620

080049f0 <BT_MC_Update_Settings>:

uint8_t BT_MC_Update_Settings(void){
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
	msp.delivery_mMin = msp_BT.delivery_mMin;
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <BT_MC_Update_Settings+0x58>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <BT_MC_Update_Settings+0x5c>)
 80049fa:	6013      	str	r3, [r2, #0]
	msp.draft = msp_BT.draft;
 80049fc:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <BT_MC_Update_Settings+0x58>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <BT_MC_Update_Settings+0x5c>)
 8004a02:	6053      	str	r3, [r2, #4]
	msp.cylinderSpeed = msp_BT.cylinderSpeed;
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <BT_MC_Update_Settings+0x58>)
 8004a06:	891a      	ldrh	r2, [r3, #8]
 8004a08:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <BT_MC_Update_Settings+0x5c>)
 8004a0a:	811a      	strh	r2, [r3, #8]
	msp.cylinderFeed = msp_BT.cylinderFeed;
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <BT_MC_Update_Settings+0x58>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a0e      	ldr	r2, [pc, #56]	; (8004a4c <BT_MC_Update_Settings+0x5c>)
 8004a12:	60d3      	str	r3, [r2, #12]
	msp.beaterSpeed = msp_BT.beaterSpeed;
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <BT_MC_Update_Settings+0x58>)
 8004a16:	8a1a      	ldrh	r2, [r3, #16]
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <BT_MC_Update_Settings+0x5c>)
 8004a1a:	821a      	strh	r2, [r3, #16]
	msp.beaterFeed = msp_BT.beaterFeed;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <BT_MC_Update_Settings+0x58>)
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <BT_MC_Update_Settings+0x5c>)
 8004a22:	6153      	str	r3, [r2, #20]
	msp.trunkDelay = msp_BT.trunkDelay;
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <BT_MC_Update_Settings+0x58>)
 8004a26:	8b1a      	ldrh	r2, [r3, #24]
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <BT_MC_Update_Settings+0x5c>)
 8004a2a:	831a      	strh	r2, [r3, #24]
	msp.lengthLimit = msp_BT.lengthLimit;
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <BT_MC_Update_Settings+0x58>)
 8004a2e:	8b5a      	ldrh	r2, [r3, #26]
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <BT_MC_Update_Settings+0x5c>)
 8004a32:	835a      	strh	r2, [r3, #26]
	msp.rampTimes = msp_BT.rampTimes;
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <BT_MC_Update_Settings+0x58>)
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	4a04      	ldr	r2, [pc, #16]	; (8004a4c <BT_MC_Update_Settings+0x5c>)
 8004a3a:	61d3      	str	r3, [r2, #28]
	//send success msg to APP
	return 1;
 8004a3c:	2301      	movs	r3, #1
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	20000640 	.word	0x20000640
 8004a4c:	20000620 	.word	0x20000620

08004a50 <GetMotorID_from_BTMotor_ID>:

uint8_t GetMotorID_from_BTMotor_ID(uint8_t BT_motorID){
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	71fb      	strb	r3, [r7, #7]
	if (BT_motorID == BT_CARDING_CYLINDER){
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <GetMotorID_from_BTMotor_ID+0x14>
		return CARDING_CYLINDER;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e019      	b.n	8004a98 <GetMotorID_from_BTMotor_ID+0x48>
	}else if (BT_motorID == BT_BEATER_CYLINDER){
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d101      	bne.n	8004a6e <GetMotorID_from_BTMotor_ID+0x1e>
		return BEATER_CYLINDER;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e014      	b.n	8004a98 <GetMotorID_from_BTMotor_ID+0x48>
	}else if (BT_motorID == BT_CAGE){
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d101      	bne.n	8004a78 <GetMotorID_from_BTMotor_ID+0x28>
		return CAGE;
 8004a74:	2302      	movs	r3, #2
 8004a76:	e00f      	b.n	8004a98 <GetMotorID_from_BTMotor_ID+0x48>
	}else if (BT_motorID == BT_CARDING_FEED){
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d101      	bne.n	8004a82 <GetMotorID_from_BTMotor_ID+0x32>
		return CARDING_FEED;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e00a      	b.n	8004a98 <GetMotorID_from_BTMotor_ID+0x48>
	}else if (BT_motorID == BT_BEATER_FEED){
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d101      	bne.n	8004a8c <GetMotorID_from_BTMotor_ID+0x3c>
		return BEATER_FEED;
 8004a88:	2304      	movs	r3, #4
 8004a8a:	e005      	b.n	8004a98 <GetMotorID_from_BTMotor_ID+0x48>
	}else if (BT_motorID == BT_COILER){
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d101      	bne.n	8004a96 <GetMotorID_from_BTMotor_ID+0x46>
		return COILER;
 8004a92:	2305      	movs	r3, #5
 8004a94:	e000      	b.n	8004a98 <GetMotorID_from_BTMotor_ID+0x48>
	}
	return 0;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <GetBTMotorID_from_Motor_ID>:

uint8_t GetBTMotorID_from_Motor_ID(uint8_t motorID){
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
	if (motorID == CARDING_CYLINDER){
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <GetBTMotorID_from_Motor_ID+0x14>
		return BT_CARDING_CYLINDER;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e019      	b.n	8004aec <GetBTMotorID_from_Motor_ID+0x48>
	}else if (motorID == BEATER_CYLINDER){
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <GetBTMotorID_from_Motor_ID+0x1e>
		return BT_BEATER_CYLINDER;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e014      	b.n	8004aec <GetBTMotorID_from_Motor_ID+0x48>
	}else if (motorID == CAGE){
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d101      	bne.n	8004acc <GetBTMotorID_from_Motor_ID+0x28>
		return BT_CAGE;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e00f      	b.n	8004aec <GetBTMotorID_from_Motor_ID+0x48>
	}else if (motorID == CARDING_FEED){
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d101      	bne.n	8004ad6 <GetBTMotorID_from_Motor_ID+0x32>
		return BT_CARDING_FEED;
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	e00a      	b.n	8004aec <GetBTMotorID_from_Motor_ID+0x48>
	}else if (motorID == BEATER_FEED){
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d101      	bne.n	8004ae0 <GetBTMotorID_from_Motor_ID+0x3c>
		return BT_BEATER_FEED;
 8004adc:	2305      	movs	r3, #5
 8004ade:	e005      	b.n	8004aec <GetBTMotorID_from_Motor_ID+0x48>
	}else if (motorID == COILER){
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d101      	bne.n	8004aea <GetBTMotorID_from_Motor_ID+0x46>
		return BT_COILER;
 8004ae6:	2306      	movs	r3, #6
 8004ae8:	e000      	b.n	8004aec <GetBTMotorID_from_Motor_ID+0x48>
	}
	return 0;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <GetMotorId_from_CarousalID>:

uint8_t GetMotorId_from_CarousalID(uint8_t carousalID){
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
	if (carousalID == BT_CARDING_CYLINDER){
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <GetMotorId_from_CarousalID+0x14>
		return CARDING_CYLINDER;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e019      	b.n	8004b40 <GetMotorId_from_CarousalID+0x48>
	}else if (carousalID == BT_BEATER_CYLINDER){
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d101      	bne.n	8004b16 <GetMotorId_from_CarousalID+0x1e>
		return BEATER_CYLINDER;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e014      	b.n	8004b40 <GetMotorId_from_CarousalID+0x48>
	}else if (carousalID == BT_CAGE){
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d101      	bne.n	8004b20 <GetMotorId_from_CarousalID+0x28>
		return CAGE;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e00f      	b.n	8004b40 <GetMotorId_from_CarousalID+0x48>
	}else if (carousalID == BT_CARDING_FEED){
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d101      	bne.n	8004b2a <GetMotorId_from_CarousalID+0x32>
		return CARDING_FEED;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e00a      	b.n	8004b40 <GetMotorId_from_CarousalID+0x48>
	}else if (carousalID == BT_BEATER_FEED){
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	2b05      	cmp	r3, #5
 8004b2e:	d101      	bne.n	8004b34 <GetMotorId_from_CarousalID+0x3c>
		return BEATER_FEED;
 8004b30:	2304      	movs	r3, #4
 8004b32:	e005      	b.n	8004b40 <GetMotorId_from_CarousalID+0x48>
	}else if (carousalID == BT_COILER){
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d101      	bne.n	8004b3e <GetMotorId_from_CarousalID+0x46>
		return COILER;
 8004b3a:	2305      	movs	r3, #5
 8004b3c:	e000      	b.n	8004b40 <GetMotorId_from_CarousalID+0x48>
	}
	return 99;
 8004b3e:	2363      	movs	r3, #99	; 0x63
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <EE_WriteInteger>:


char integerArray[2]  = {0};
uint8_t floatArray[4]  = {0};

uint8_t EE_WriteInteger(uint16_t integer,uint16_t memoryLocation){
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af04      	add	r7, sp, #16
 8004b52:	4603      	mov	r3, r0
 8004b54:	460a      	mov	r2, r1
 8004b56:	80fb      	strh	r3, [r7, #6]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	80bb      	strh	r3, [r7, #4]
	integerArray[0] = (integer >> 8) & 0xFF;
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <EE_WriteInteger+0x64>)
 8004b66:	701a      	strb	r2, [r3, #0]
	integerArray[1] = integer & 0xFF;
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <EE_WriteInteger+0x64>)
 8004b6e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, memoryLocation, I2C_MEMADD_SIZE_8BIT, (uint8_t*)integerArray,2,HAL_MAX_DELAY);
 8004b70:	88ba      	ldrh	r2, [r7, #4]
 8004b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b76:	9302      	str	r3, [sp, #8]
 8004b78:	2302      	movs	r3, #2
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <EE_WriteInteger+0x64>)
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	2301      	movs	r3, #1
 8004b82:	21a0      	movs	r1, #160	; 0xa0
 8004b84:	480b      	ldr	r0, [pc, #44]	; (8004bb4 <EE_WriteInteger+0x68>)
 8004b86:	f003 fcef 	bl	8008568 <HAL_I2C_Mem_Write>
	HAL_StatusTypeDef OK = HAL_I2C_IsDeviceReady(&hi2c2, EEPROM_ADDRESS, 20, 100);
 8004b8a:	2364      	movs	r3, #100	; 0x64
 8004b8c:	2214      	movs	r2, #20
 8004b8e:	21a0      	movs	r1, #160	; 0xa0
 8004b90:	4808      	ldr	r0, [pc, #32]	; (8004bb4 <EE_WriteInteger+0x68>)
 8004b92:	f003 ff17 	bl	80089c4 <HAL_I2C_IsDeviceReady>
 8004b96:	4603      	mov	r3, r0
 8004b98:	73fb      	strb	r3, [r7, #15]
	if (OK == HAL_OK){
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <EE_WriteInteger+0x58>
		return 1;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <EE_WriteInteger+0x5a>
	}else{
		return 0;
 8004ba4:	2300      	movs	r3, #0
	}
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20001270 	.word	0x20001270
 8004bb4:	20000278 	.word	0x20000278

08004bb8 <EE_ReadInteger>:

//send out only uint16_t , you need to make it a signed int if needed
uint16_t EE_ReadInteger(uint16_t memoryLocation){
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af04      	add	r7, sp, #16
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	80fb      	strh	r3, [r7, #6]
	uint16_t out1 = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	81fb      	strh	r3, [r7, #14]
	HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDRESS, memoryLocation, I2C_MEMADD_SIZE_8BIT, (uint8_t*)integerArray,2, HAL_MAX_DELAY);
 8004bc6:	88fa      	ldrh	r2, [r7, #6]
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bcc:	9302      	str	r3, [sp, #8]
 8004bce:	2302      	movs	r3, #2
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <EE_ReadInteger+0x54>)
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	21a0      	movs	r1, #160	; 0xa0
 8004bda:	480d      	ldr	r0, [pc, #52]	; (8004c10 <EE_ReadInteger+0x58>)
 8004bdc:	f003 fdd8 	bl	8008790 <HAL_I2C_Mem_Read>
	HAL_I2C_IsDeviceReady(&hi2c2, EEPROM_ADDRESS, 20, 100);
 8004be0:	2364      	movs	r3, #100	; 0x64
 8004be2:	2214      	movs	r2, #20
 8004be4:	21a0      	movs	r1, #160	; 0xa0
 8004be6:	480a      	ldr	r0, [pc, #40]	; (8004c10 <EE_ReadInteger+0x58>)
 8004be8:	f003 feec 	bl	80089c4 <HAL_I2C_IsDeviceReady>
	out1 = (integerArray[0]& 0xFF)<< 8;
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <EE_ReadInteger+0x54>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	81fb      	strh	r3, [r7, #14]
	out1 += integerArray[1];
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <EE_ReadInteger+0x54>)
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	89fb      	ldrh	r3, [r7, #14]
 8004bfe:	4413      	add	r3, r2
 8004c00:	81fb      	strh	r3, [r7, #14]
	return out1;
 8004c02:	89fb      	ldrh	r3, [r7, #14]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20001270 	.word	0x20001270
 8004c10:	20000278 	.word	0x20000278

08004c14 <float2Bytes>:

void float2Bytes(float val,uint8_t* bytes_array){
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c1e:	6038      	str	r0, [r7, #0]
  union {
    float float_variable;
    uint8_t temp_array[4];
  } u;
  // Overwrite bytes of union with float variable
  u.float_variable = val;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fa      	ldr	r2, [r7, #12]
  // Assign bytes to input array
  memcpy(bytes_array, u.temp_array, 4);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <bytes2Float>:

float bytes2Float(uint8_t* bytes_array){
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
  union {
    float float_variable;
    uint8_t temp_array[4];
  } u;
  // Overwrite bytes of union with float variable
  memcpy(u.temp_array,bytes_array, 4);
 8004c42:	60fb      	str	r3, [r7, #12]
  return u.float_variable;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	ee07 3a90 	vmov	s15, r3

}
 8004c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <EE_WriteFloat>:


uint8_t EE_WriteFloat(float floatVal,uint16_t memoryLocation){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af04      	add	r7, sp, #16
 8004c5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c62:	4603      	mov	r3, r0
 8004c64:	807b      	strh	r3, [r7, #2]
	float2Bytes(floatVal,floatArray);
 8004c66:	4812      	ldr	r0, [pc, #72]	; (8004cb0 <EE_WriteFloat+0x58>)
 8004c68:	ed97 0a01 	vldr	s0, [r7, #4]
 8004c6c:	f7ff ffd2 	bl	8004c14 <float2Bytes>
	HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, memoryLocation, I2C_MEMADD_SIZE_8BIT, (uint8_t*)floatArray,4,HAL_MAX_DELAY);
 8004c70:	887a      	ldrh	r2, [r7, #2]
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	2304      	movs	r3, #4
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <EE_WriteFloat+0x58>)
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2301      	movs	r3, #1
 8004c82:	21a0      	movs	r1, #160	; 0xa0
 8004c84:	480b      	ldr	r0, [pc, #44]	; (8004cb4 <EE_WriteFloat+0x5c>)
 8004c86:	f003 fc6f 	bl	8008568 <HAL_I2C_Mem_Write>
	HAL_StatusTypeDef OK = HAL_I2C_IsDeviceReady(&hi2c2, EEPROM_ADDRESS,20, 100);
 8004c8a:	2364      	movs	r3, #100	; 0x64
 8004c8c:	2214      	movs	r2, #20
 8004c8e:	21a0      	movs	r1, #160	; 0xa0
 8004c90:	4808      	ldr	r0, [pc, #32]	; (8004cb4 <EE_WriteFloat+0x5c>)
 8004c92:	f003 fe97 	bl	80089c4 <HAL_I2C_IsDeviceReady>
 8004c96:	4603      	mov	r3, r0
 8004c98:	73fb      	strb	r3, [r7, #15]
	if (OK == HAL_OK){
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <EE_WriteFloat+0x4c>
		return 1;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <EE_WriteFloat+0x4e>
	}else{
		return 0;
 8004ca4:	2300      	movs	r3, #0
	}
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20001274 	.word	0x20001274
 8004cb4:	20000278 	.word	0x20000278

08004cb8 <EE_ReadFloat>:

float EE_ReadFloat(uint16_t memoryLocation){
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af04      	add	r7, sp, #16
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	80fb      	strh	r3, [r7, #6]
	float out1 = 0;
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDRESS, memoryLocation, I2C_MEMADD_SIZE_8BIT, (uint8_t*)floatArray,4, HAL_MAX_DELAY);
 8004cc8:	88fa      	ldrh	r2, [r7, #6]
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cce:	9302      	str	r3, [sp, #8]
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <EE_ReadFloat+0x50>)
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2301      	movs	r3, #1
 8004cda:	21a0      	movs	r1, #160	; 0xa0
 8004cdc:	480b      	ldr	r0, [pc, #44]	; (8004d0c <EE_ReadFloat+0x54>)
 8004cde:	f003 fd57 	bl	8008790 <HAL_I2C_Mem_Read>
	HAL_I2C_IsDeviceReady(&hi2c2, EEPROM_ADDRESS, 20, 100);
 8004ce2:	2364      	movs	r3, #100	; 0x64
 8004ce4:	2214      	movs	r2, #20
 8004ce6:	21a0      	movs	r1, #160	; 0xa0
 8004ce8:	4808      	ldr	r0, [pc, #32]	; (8004d0c <EE_ReadFloat+0x54>)
 8004cea:	f003 fe6b 	bl	80089c4 <HAL_I2C_IsDeviceReady>
	out1 = bytes2Float(floatArray);
 8004cee:	4806      	ldr	r0, [pc, #24]	; (8004d08 <EE_ReadFloat+0x50>)
 8004cf0:	f7ff ffa1 	bl	8004c36 <bytes2Float>
 8004cf4:	ed87 0a03 	vstr	s0, [r7, #12]
	return out1;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	ee07 3a90 	vmov	s15, r3
}
 8004cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20001274 	.word	0x20001274
 8004d0c:	20000278 	.word	0x20000278

08004d10 <FDCAN_TxInit>:
FDCAN_RxHeaderTypeDef   RxHeader;
uint8_t RxData[16];


void FDCAN_TxInit(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){
 8004d14:	4819      	ldr	r0, [pc, #100]	; (8004d7c <FDCAN_TxInit+0x6c>)
 8004d16:	f002 fd00 	bl	800771a <HAL_FDCAN_Start>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <FDCAN_TxInit+0x14>
	  Error_Handler();}
 8004d20:	f7fd f906 	bl	8001f30 <Error_Handler>
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8004d24:	2200      	movs	r2, #0
 8004d26:	2101      	movs	r1, #1
 8004d28:	4814      	ldr	r0, [pc, #80]	; (8004d7c <FDCAN_TxInit+0x6c>)
 8004d2a:	f002 fe4f 	bl	80079cc <HAL_FDCAN_ActivateNotification>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <FDCAN_TxInit+0x28>
	 Error_Handler();
 8004d34:	f7fd f8fc 	bl	8001f30 <Error_Handler>
	}
    TxHeader.Identifier = 0x0E090102;
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <FDCAN_TxInit+0x70>)
 8004d3a:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <FDCAN_TxInit+0x74>)
 8004d3c:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8004d3e:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <FDCAN_TxInit+0x70>)
 8004d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d44:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004d46:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <FDCAN_TxInit+0x70>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <FDCAN_TxInit+0x70>)
 8004d4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d52:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <FDCAN_TxInit+0x70>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004d5a:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <FDCAN_TxInit+0x70>)
 8004d5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d60:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <FDCAN_TxInit+0x70>)
 8004d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d68:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <FDCAN_TxInit+0x70>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 8004d70:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <FDCAN_TxInit+0x70>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000214 	.word	0x20000214
 8004d80:	20001290 	.word	0x20001290
 8004d84:	0e090102 	.word	0x0e090102

08004d88 <FDCAN_RxFilterInit>:

void FDCAN_RxFilterInit(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af02      	add	r7, sp, #8
	  FDCAN_FilterTypeDef sFilterConfig;

	  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8004d8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d92:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK; //FilterID1 = filter, FilterID2 = mask
 8004d98:	2302      	movs	r3, #2
 8004d9a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = MOTHERBOARD_RECIEVE_MASK;
 8004da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004da4:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = MOTHERBOARD_RECIEVE_FILTER;
 8004da6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004daa:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8004dac:	463b      	mov	r3, r7
 8004dae:	4619      	mov	r1, r3
 8004db0:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <FDCAN_RxFilterInit+0x50>)
 8004db2:	f002 fc27 	bl	8007604 <HAL_FDCAN_ConfigFilter>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <FDCAN_RxFilterInit+0x38>
	    /* Filter configuration Error */
	    Error_Handler();
 8004dbc:	f7fd f8b8 	bl	8001f30 <Error_Handler>
	  }
	  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1,FDCAN_REJECT,FDCAN_REJECT,FDCAN_REJECT_REMOTE,FDCAN_REJECT_REMOTE);
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4803      	ldr	r0, [pc, #12]	; (8004dd8 <FDCAN_RxFilterInit+0x50>)
 8004dcc:	f002 fc74 	bl	80076b8 <HAL_FDCAN_ConfigGlobalFilter>
}
 8004dd0:	bf00      	nop
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000214 	.word	0x20000214

08004ddc <FDCAN_sendCommand_ToMotor>:
#include "Log.h"
#include "Ack.h"

/* Mother Board Funs*/

void FDCAN_sendCommand_ToMotor(uint8_t destination,uint8_t command){
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	460a      	mov	r2, r1
 8004de6:	71fb      	strb	r3, [r7, #7]
 8004de8:	4613      	mov	r3, r2
 8004dea:	71bb      	strb	r3, [r7, #6]
	TxHeader.Identifier =(0x601<<16)|(destination<<8)|0x01;
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8004df4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <FDCAN_sendCommand_ToMotor+0x50>)
 8004dfc:	601a      	str	r2, [r3, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <FDCAN_sendCommand_ToMotor+0x50>)
 8004e00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e04:	60da      	str	r2, [r3, #12]
	TxData[0] = command;
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <FDCAN_sendCommand_ToMotor+0x54>)
 8004e08:	79bb      	ldrb	r3, [r7, #6]
 8004e0a:	7013      	strb	r3, [r2, #0]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)==0){};
 8004e0c:	bf00      	nop
 8004e0e:	4809      	ldr	r0, [pc, #36]	; (8004e34 <FDCAN_sendCommand_ToMotor+0x58>)
 8004e10:	f002 fdca 	bl	80079a8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f9      	beq.n	8004e0e <FDCAN_sendCommand_ToMotor+0x32>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <FDCAN_sendCommand_ToMotor+0x54>)
 8004e1c:	4903      	ldr	r1, [pc, #12]	; (8004e2c <FDCAN_sendCommand_ToMotor+0x50>)
 8004e1e:	4805      	ldr	r0, [pc, #20]	; (8004e34 <FDCAN_sendCommand_ToMotor+0x58>)
 8004e20:	f002 fca3 	bl	800776a <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20001290 	.word	0x20001290
 8004e30:	20001280 	.word	0x20001280
 8004e34:	20000214 	.word	0x20000214

08004e38 <FDCAN_sendSetUp_ToMotor>:

void FDCAN_sendSetUp_ToMotor(uint8_t destination,SetupMotor rd){
 8004e38:	b084      	sub	sp, #16
 8004e3a:	b590      	push	{r4, r7, lr}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	4604      	mov	r4, r0
 8004e42:	f107 001c 	add.w	r0, r7, #28
 8004e46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	71fb      	strb	r3, [r7, #7]
	TxHeader.Identifier =(0xA07<<16)|(destination<<8)|0x01;
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	021a      	lsls	r2, r3, #8
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <FDCAN_sendSetUp_ToMotor+0x78>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	461a      	mov	r2, r3
 8004e58:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <FDCAN_sendSetUp_ToMotor+0x7c>)
 8004e5a:	601a      	str	r2, [r3, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_4;
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <FDCAN_sendSetUp_ToMotor+0x7c>)
 8004e5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004e62:	60da      	str	r2, [r3, #12]
	TxData[0]=rd.RUT;
 8004e64:	8bbb      	ldrh	r3, [r7, #28]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <FDCAN_sendSetUp_ToMotor+0x80>)
 8004e6a:	701a      	strb	r2, [r3, #0]
	TxData[1]=rd.RDT;
 8004e6c:	8bfb      	ldrh	r3, [r7, #30]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <FDCAN_sendSetUp_ToMotor+0x80>)
 8004e72:	705a      	strb	r2, [r3, #1]
	TxData[2]=rd.RPM>>8;
 8004e74:	8c3b      	ldrh	r3, [r7, #32]
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <FDCAN_sendSetUp_ToMotor+0x80>)
 8004e7e:	709a      	strb	r2, [r3, #2]
	TxData[3]=rd.RPM;
 8004e80:	8c3b      	ldrh	r3, [r7, #32]
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <FDCAN_sendSetUp_ToMotor+0x80>)
 8004e86:	70da      	strb	r2, [r3, #3]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)==0){};
 8004e88:	bf00      	nop
 8004e8a:	480c      	ldr	r0, [pc, #48]	; (8004ebc <FDCAN_sendSetUp_ToMotor+0x84>)
 8004e8c:	f002 fd8c 	bl	80079a8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0f9      	beq.n	8004e8a <FDCAN_sendSetUp_ToMotor+0x52>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8004e96:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <FDCAN_sendSetUp_ToMotor+0x80>)
 8004e98:	4906      	ldr	r1, [pc, #24]	; (8004eb4 <FDCAN_sendSetUp_ToMotor+0x7c>)
 8004e9a:	4808      	ldr	r0, [pc, #32]	; (8004ebc <FDCAN_sendSetUp_ToMotor+0x84>)
 8004e9c:	f002 fc65 	bl	800776a <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004eaa:	b004      	add	sp, #16
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	0a070001 	.word	0x0a070001
 8004eb4:	20001290 	.word	0x20001290
 8004eb8:	20001280 	.word	0x20001280
 8004ebc:	20000214 	.word	0x20000214

08004ec0 <FDCAN_SendDiagnostics_ToMotor>:

void FDCAN_SendDiagnostics_ToMotor(uint8_t destination,DiagnosticsTypeDef *d)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	71fb      	strb	r3, [r7, #7]
	TxHeader.Identifier =(0xE0A<<16)|(destination<<8)|0x01;
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	021a      	lsls	r2, r3, #8
 8004ed0:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <FDCAN_SendDiagnostics_ToMotor+0xb0>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <FDCAN_SendDiagnostics_ToMotor+0xb4>)
 8004ed8:	601a      	str	r2, [r3, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8004eda:	4b26      	ldr	r3, [pc, #152]	; (8004f74 <FDCAN_SendDiagnostics_ToMotor+0xb4>)
 8004edc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ee0:	60da      	str	r2, [r3, #12]
	TxData[0]=d->typeofTest;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781a      	ldrb	r2, [r3, #0]
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004ee8:	701a      	strb	r2, [r3, #0]
	if (d->typeofTest == OPENLOOP){
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10b      	bne.n	8004f0a <FDCAN_SendDiagnostics_ToMotor+0x4a>
		TxData[1]= d->targetDuty>>8;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	121b      	asrs	r3, r3, #8
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	4b1f      	ldr	r3, [pc, #124]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004efc:	705a      	strb	r2, [r3, #1]
		TxData[2]= d->targetDuty;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004f06:	709a      	strb	r2, [r3, #2]
 8004f08:	e00a      	b.n	8004f20 <FDCAN_SendDiagnostics_ToMotor+0x60>
	}else{
		TxData[1]= d->targetRPM>>8 & 0xff;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	121b      	asrs	r3, r3, #8
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004f14:	705a      	strb	r2, [r3, #1]
		TxData[2]= d->targetRPM & 0xff;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004f1e:	709a      	strb	r2, [r3, #2]
	}
	TxData[3]=d->rampUpTime;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	7b9a      	ldrb	r2, [r3, #14]
 8004f24:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004f26:	70da      	strb	r2, [r3, #3]
	TxData[4]=d->rampDownTime;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	7bda      	ldrb	r2, [r3, #15]
 8004f2c:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004f2e:	711a      	strb	r2, [r3, #4]
	TxData[5]=(d->runTime>>8);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	899b      	ldrh	r3, [r3, #12]
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004f3c:	715a      	strb	r2, [r3, #5]
	TxData[6]= d->runTime;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	899b      	ldrh	r3, [r3, #12]
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004f46:	719a      	strb	r2, [r3, #6]
	TxData[7]= d->direction;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	7c1a      	ldrb	r2, [r3, #16]
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004f4e:	71da      	strb	r2, [r3, #7]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)==0){};
 8004f50:	bf00      	nop
 8004f52:	480a      	ldr	r0, [pc, #40]	; (8004f7c <FDCAN_SendDiagnostics_ToMotor+0xbc>)
 8004f54:	f002 fd28 	bl	80079a8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f9      	beq.n	8004f52 <FDCAN_SendDiagnostics_ToMotor+0x92>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8004f5e:	4a06      	ldr	r2, [pc, #24]	; (8004f78 <FDCAN_SendDiagnostics_ToMotor+0xb8>)
 8004f60:	4904      	ldr	r1, [pc, #16]	; (8004f74 <FDCAN_SendDiagnostics_ToMotor+0xb4>)
 8004f62:	4806      	ldr	r0, [pc, #24]	; (8004f7c <FDCAN_SendDiagnostics_ToMotor+0xbc>)
 8004f64:	f002 fc01 	bl	800776a <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	0e0a0001 	.word	0x0e0a0001
 8004f74:	20001290 	.word	0x20001290
 8004f78:	20001280 	.word	0x20001280
 8004f7c:	20000214 	.word	0x20000214

08004f80 <FDCAN_Recieve_ACKFromMotors>:
	TxData[3]=transitionTime;
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1)==0){};
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
}

void FDCAN_Recieve_ACKFromMotors(uint8_t sourceAddress){
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
	ack.motorAcksRecvd |= (1 << (sourceAddress - 2));
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <FDCAN_Recieve_ACKFromMotors+0x4c>)
 8004f8c:	885b      	ldrh	r3, [r3, #2]
 8004f8e:	b21a      	sxth	r2, r3
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	3b02      	subs	r3, #2
 8004f94:	2101      	movs	r1, #1
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	b21b      	sxth	r3, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	b21b      	sxth	r3, r3
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <FDCAN_Recieve_ACKFromMotors+0x4c>)
 8004fa4:	805a      	strh	r2, [r3, #2]
	if (ack.motorAcksCheck == ack.motorAcksRecvd){
 8004fa6:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <FDCAN_Recieve_ACKFromMotors+0x4c>)
 8004fa8:	881a      	ldrh	r2, [r3, #0]
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <FDCAN_Recieve_ACKFromMotors+0x4c>)
 8004fac:	885b      	ldrh	r3, [r3, #2]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d108      	bne.n	8004fc4 <FDCAN_Recieve_ACKFromMotors+0x44>
		ack.waitingForAckResult = 0;
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <FDCAN_Recieve_ACKFromMotors+0x4c>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	715a      	strb	r2, [r3, #5]
		ack.ackResult = ACK_SUCCESS;
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <FDCAN_Recieve_ACKFromMotors+0x4c>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	719a      	strb	r2, [r3, #6]
		HAL_TIM_Base_Stop_IT(&htim17);
 8004fbe:	4804      	ldr	r0, [pc, #16]	; (8004fd0 <FDCAN_Recieve_ACKFromMotors+0x50>)
 8004fc0:	f005 f9cc 	bl	800a35c <HAL_TIM_Base_Stop_IT>
	}
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	2000072c 	.word	0x2000072c
 8004fd0:	200003f4 	.word	0x200003f4

08004fd4 <FDCAN_parseForMotherBoard>:

void FDCAN_parseForMotherBoard()
{	uint8_t motorID;
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
	functionID=((RxHeader.Identifier)&0xFF0000)>>16;
 8004fda:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <FDCAN_parseForMotherBoard+0xd0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	4a31      	ldr	r2, [pc, #196]	; (80050a8 <FDCAN_parseForMotherBoard+0xd4>)
 8004fe4:	6013      	str	r3, [r2, #0]
	source_address=(RxHeader.Identifier)&0xFF;
 8004fe6:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <FDCAN_parseForMotherBoard+0xd0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	4a2f      	ldr	r2, [pc, #188]	; (80050ac <FDCAN_parseForMotherBoard+0xd8>)
 8004fee:	6013      	str	r3, [r2, #0]
	switch (functionID) {
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <FDCAN_parseForMotherBoard+0xd4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3b02      	subs	r3, #2
 8004ff6:	2b12      	cmp	r3, #18
 8004ff8:	d850      	bhi.n	800509c <FDCAN_parseForMotherBoard+0xc8>
 8004ffa:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <FDCAN_parseForMotherBoard+0x2c>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	0800504d 	.word	0x0800504d
 8005004:	0800509d 	.word	0x0800509d
 8005008:	0800509d 	.word	0x0800509d
 800500c:	0800509d 	.word	0x0800509d
 8005010:	0800509d 	.word	0x0800509d
 8005014:	0800509d 	.word	0x0800509d
 8005018:	0800509d 	.word	0x0800509d
 800501c:	08005069 	.word	0x08005069
 8005020:	0800509d 	.word	0x0800509d
 8005024:	0800509d 	.word	0x0800509d
 8005028:	0800509d 	.word	0x0800509d
 800502c:	0800509d 	.word	0x0800509d
 8005030:	0800509d 	.word	0x0800509d
 8005034:	0800505b 	.word	0x0800505b
 8005038:	0800509d 	.word	0x0800509d
 800503c:	0800509d 	.word	0x0800509d
 8005040:	0800509d 	.word	0x0800509d
 8005044:	0800509d 	.word	0x0800509d
 8005048:	08005095 	.word	0x08005095
		case ERROR_FUNCTIONID:
			FDCAN_Recieve_ErrorsFromMotors(source_address);
 800504c:	4b17      	ldr	r3, [pc, #92]	; (80050ac <FDCAN_parseForMotherBoard+0xd8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f978 	bl	8005348 <FDCAN_Recieve_ErrorsFromMotors>
			break;
 8005058:	e020      	b.n	800509c <FDCAN_parseForMotherBoard+0xc8>
		case ACKFRAME_FUNCTIONID:
			FDCAN_Recieve_ACKFromMotors(source_address);
 800505a:	4b14      	ldr	r3, [pc, #80]	; (80050ac <FDCAN_parseForMotherBoard+0xd8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff ff8d 	bl	8004f80 <FDCAN_Recieve_ACKFromMotors>
			break;
 8005066:	e019      	b.n	800509c <FDCAN_parseForMotherBoard+0xc8>
		case RUNTIMEDATA_FUNCTIONID:
			motorID = GetMotorID_from_CANAddress(source_address);
 8005068:	4b10      	ldr	r3, [pc, #64]	; (80050ac <FDCAN_parseForMotherBoard+0xd8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	4618      	mov	r0, r3
 8005070:	f000 feee 	bl	8005e50 <GetMotorID_from_CANAddress>
 8005074:	4603      	mov	r3, r0
 8005076:	71fb      	strb	r3, [r7, #7]
			FDCAN_Recieve_RunDataFromMotors(functionID,motorID);
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <FDCAN_parseForMotherBoard+0xd4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	79fa      	ldrb	r2, [r7, #7]
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f818 	bl	80050b8 <FDCAN_Recieve_RunDataFromMotors>
			SO_incrementCANCounter(&SO,motorID);
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	4619      	mov	r1, r3
 800508c:	4808      	ldr	r0, [pc, #32]	; (80050b0 <FDCAN_parseForMotherBoard+0xdc>)
 800508e:	f008 f8f5 	bl	800d27c <SO_incrementCANCounter>
			break;
 8005092:	e003      	b.n	800509c <FDCAN_parseForMotherBoard+0xc8>
		case DIAGNOSTICSDONEFRAME_FUNCTIONID: // only stop the can Observer when u get the diag done frame.
			SO_disableAndResetCANObservers(&SO);
 8005094:	4806      	ldr	r0, [pc, #24]	; (80050b0 <FDCAN_parseForMotherBoard+0xdc>)
 8005096:	f008 f8c9 	bl	800d22c <SO_disableAndResetCANObservers>
			break;
 800509a:	bf00      	nop
	}
}
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	200012b4 	.word	0x200012b4
 80050a8:	20001278 	.word	0x20001278
 80050ac:	2000127c 	.word	0x2000127c
 80050b0:	20000874 	.word	0x20000874
 80050b4:	00000000 	.word	0x00000000

080050b8 <FDCAN_Recieve_RunDataFromMotors>:


void FDCAN_Recieve_RunDataFromMotors(uint8_t functionID,uint8_t motorID){
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	460a      	mov	r2, r1
 80050c2:	71fb      	strb	r3, [r7, #7]
 80050c4:	4613      	mov	r3, r2
 80050c6:	71bb      	strb	r3, [r7, #6]
	 * ANALYSIS DF:
	 *  ProportionalTerm = 2 Bytes
	 *  IntegralTerm = 2 Bytes
	 *  FeedForward = 2 Bytes
	*/
	if (motorID <= 6){		//
 80050c8:	79bb      	ldrb	r3, [r7, #6]
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	f200 812a 	bhi.w	8005324 <FDCAN_Recieve_RunDataFromMotors+0x26c>
		R[motorID].rdngNo ++;
 80050d0:	79bb      	ldrb	r3, [r7, #6]
 80050d2:	499b      	ldr	r1, [pc, #620]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 80050d4:	222c      	movs	r2, #44	; 0x2c
 80050d6:	fb03 f202 	mul.w	r2, r3, r2
 80050da:	440a      	add	r2, r1
 80050dc:	8812      	ldrh	r2, [r2, #0]
 80050de:	3201      	adds	r2, #1
 80050e0:	b290      	uxth	r0, r2
 80050e2:	4a97      	ldr	r2, [pc, #604]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 80050e4:	212c      	movs	r1, #44	; 0x2c
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	4413      	add	r3, r2
 80050ec:	4602      	mov	r2, r0
 80050ee:	801a      	strh	r2, [r3, #0]
		R[motorID].targetRPM = (RxData[0]<< 8 ) | RxData[1];
 80050f0:	4b94      	ldr	r3, [pc, #592]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	b21a      	sxth	r2, r3
 80050f8:	4b92      	ldr	r3, [pc, #584]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	b21b      	sxth	r3, r3
 80050fe:	4313      	orrs	r3, r2
 8005100:	b21a      	sxth	r2, r3
 8005102:	79bb      	ldrb	r3, [r7, #6]
 8005104:	b290      	uxth	r0, r2
 8005106:	4a8e      	ldr	r2, [pc, #568]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	330c      	adds	r3, #12
 8005112:	4602      	mov	r2, r0
 8005114:	801a      	strh	r2, [r3, #0]
		R[motorID].presentRPM = (RxData[2]<< 8 ) | RxData[3];
 8005116:	4b8b      	ldr	r3, [pc, #556]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 8005118:	789b      	ldrb	r3, [r3, #2]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	b21a      	sxth	r2, r3
 800511e:	4b89      	ldr	r3, [pc, #548]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 8005120:	78db      	ldrb	r3, [r3, #3]
 8005122:	b21b      	sxth	r3, r3
 8005124:	4313      	orrs	r3, r2
 8005126:	b21a      	sxth	r2, r3
 8005128:	79bb      	ldrb	r3, [r7, #6]
 800512a:	b290      	uxth	r0, r2
 800512c:	4a84      	ldr	r2, [pc, #528]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 800512e:	212c      	movs	r1, #44	; 0x2c
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	4413      	add	r3, r2
 8005136:	330e      	adds	r3, #14
 8005138:	4602      	mov	r2, r0
 800513a:	801a      	strh	r2, [r3, #0]
		R[motorID].pwm = (RxData[4]<< 8 ) | RxData[5];
 800513c:	4b81      	ldr	r3, [pc, #516]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 800513e:	791b      	ldrb	r3, [r3, #4]
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	b21a      	sxth	r2, r3
 8005144:	4b7f      	ldr	r3, [pc, #508]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 8005146:	795b      	ldrb	r3, [r3, #5]
 8005148:	b21b      	sxth	r3, r3
 800514a:	4313      	orrs	r3, r2
 800514c:	b21a      	sxth	r2, r3
 800514e:	79bb      	ldrb	r3, [r7, #6]
 8005150:	b290      	uxth	r0, r2
 8005152:	4a7b      	ldr	r2, [pc, #492]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 8005154:	212c      	movs	r1, #44	; 0x2c
 8005156:	fb01 f303 	mul.w	r3, r1, r3
 800515a:	4413      	add	r3, r2
 800515c:	3310      	adds	r3, #16
 800515e:	4602      	mov	r2, r0
 8005160:	801a      	strh	r2, [r3, #0]

		if ((functionID == RUNTIMEDATA_FUNCTIONID)){
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	2b09      	cmp	r3, #9
 8005166:	f040 80a1 	bne.w	80052ac <FDCAN_Recieve_RunDataFromMotors+0x1f4>
			R[motorID].mosfetTemp = RxData[6];
 800516a:	79bb      	ldrb	r3, [r7, #6]
 800516c:	4a75      	ldr	r2, [pc, #468]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 800516e:	7990      	ldrb	r0, [r2, #6]
 8005170:	4a73      	ldr	r2, [pc, #460]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 8005172:	212c      	movs	r1, #44	; 0x2c
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	4413      	add	r3, r2
 800517a:	3312      	adds	r3, #18
 800517c:	4602      	mov	r2, r0
 800517e:	701a      	strb	r2, [r3, #0]
			R[motorID].motorTemp = RxData[7];
 8005180:	79bb      	ldrb	r3, [r7, #6]
 8005182:	4a70      	ldr	r2, [pc, #448]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 8005184:	79d0      	ldrb	r0, [r2, #7]
 8005186:	4a6e      	ldr	r2, [pc, #440]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 8005188:	212c      	movs	r1, #44	; 0x2c
 800518a:	fb01 f303 	mul.w	r3, r1, r3
 800518e:	4413      	add	r3, r2
 8005190:	3313      	adds	r3, #19
 8005192:	4602      	mov	r2, r0
 8005194:	701a      	strb	r2, [r3, #0]
			R[motorID].currentRaw=(RxData[8]<< 8 ) | RxData[9];
 8005196:	4b6b      	ldr	r3, [pc, #428]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 8005198:	7a1b      	ldrb	r3, [r3, #8]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	b21a      	sxth	r2, r3
 800519e:	4b69      	ldr	r3, [pc, #420]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 80051a0:	7a5b      	ldrb	r3, [r3, #9]
 80051a2:	b21b      	sxth	r3, r3
 80051a4:	4313      	orrs	r3, r2
 80051a6:	b21a      	sxth	r2, r3
 80051a8:	79bb      	ldrb	r3, [r7, #6]
 80051aa:	b290      	uxth	r0, r2
 80051ac:	4a64      	ldr	r2, [pc, #400]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 80051ae:	212c      	movs	r1, #44	; 0x2c
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	4413      	add	r3, r2
 80051b6:	3314      	adds	r3, #20
 80051b8:	4602      	mov	r2, r0
 80051ba:	801a      	strh	r2, [r3, #0]
			R[motorID].voltageRaw=(RxData[10]<< 8 ) | RxData[11];
 80051bc:	4b61      	ldr	r3, [pc, #388]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 80051be:	7a9b      	ldrb	r3, [r3, #10]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	b21a      	sxth	r2, r3
 80051c4:	4b5f      	ldr	r3, [pc, #380]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 80051c6:	7adb      	ldrb	r3, [r3, #11]
 80051c8:	b21b      	sxth	r3, r3
 80051ca:	4313      	orrs	r3, r2
 80051cc:	b21a      	sxth	r2, r3
 80051ce:	79bb      	ldrb	r3, [r7, #6]
 80051d0:	b290      	uxth	r0, r2
 80051d2:	4a5b      	ldr	r2, [pc, #364]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 80051d4:	212c      	movs	r1, #44	; 0x2c
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	4413      	add	r3, r2
 80051dc:	3316      	adds	r3, #22
 80051de:	4602      	mov	r2, r0
 80051e0:	801a      	strh	r2, [r3, #0]
			R[motorID].currentA = (float)(R[motorID].currentRaw) * MOTORBRD_CURRENT_GAIN ;
 80051e2:	79bb      	ldrb	r3, [r7, #6]
 80051e4:	4a56      	ldr	r2, [pc, #344]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 80051e6:	212c      	movs	r1, #44	; 0x2c
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	4413      	add	r3, r2
 80051ee:	3314      	adds	r3, #20
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fa:	ee17 0a90 	vmov	r0, s15
 80051fe:	f7fb f9db 	bl	80005b8 <__aeabi_f2d>
 8005202:	a34b      	add	r3, pc, #300	; (adr r3, 8005330 <FDCAN_Recieve_RunDataFromMotors+0x278>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f7fb fa2e 	bl	8000668 <__aeabi_dmul>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	79bc      	ldrb	r4, [r7, #6]
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	f7fb fd1f 	bl	8000c58 <__aeabi_d2f>
 800521a:	4602      	mov	r2, r0
 800521c:	4948      	ldr	r1, [pc, #288]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 800521e:	232c      	movs	r3, #44	; 0x2c
 8005220:	fb04 f303 	mul.w	r3, r4, r3
 8005224:	440b      	add	r3, r1
 8005226:	3318      	adds	r3, #24
 8005228:	601a      	str	r2, [r3, #0]
			R[motorID].voltageV = (float)(R[motorID].voltageRaw) * MOTORBRD_VOLTAGE_GAIN ;
 800522a:	79bb      	ldrb	r3, [r7, #6]
 800522c:	4a44      	ldr	r2, [pc, #272]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 800522e:	212c      	movs	r1, #44	; 0x2c
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	4413      	add	r3, r2
 8005236:	3316      	adds	r3, #22
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	ee17 0a90 	vmov	r0, s15
 8005246:	f7fb f9b7 	bl	80005b8 <__aeabi_f2d>
 800524a:	a33b      	add	r3, pc, #236	; (adr r3, 8005338 <FDCAN_Recieve_RunDataFromMotors+0x280>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fb fa0a 	bl	8000668 <__aeabi_dmul>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	79bc      	ldrb	r4, [r7, #6]
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	f7fb fcfb 	bl	8000c58 <__aeabi_d2f>
 8005262:	4602      	mov	r2, r0
 8005264:	4936      	ldr	r1, [pc, #216]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 8005266:	232c      	movs	r3, #44	; 0x2c
 8005268:	fb04 f303 	mul.w	r3, r4, r3
 800526c:	440b      	add	r3, r1
 800526e:	331c      	adds	r3, #28
 8005270:	601a      	str	r2, [r3, #0]
			R[motorID].power=R[motorID].currentA*R[motorID].voltageV;
 8005272:	79bb      	ldrb	r3, [r7, #6]
 8005274:	4a32      	ldr	r2, [pc, #200]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 8005276:	212c      	movs	r1, #44	; 0x2c
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	4413      	add	r3, r2
 800527e:	3318      	adds	r3, #24
 8005280:	ed93 7a00 	vldr	s14, [r3]
 8005284:	79bb      	ldrb	r3, [r7, #6]
 8005286:	4a2e      	ldr	r2, [pc, #184]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	331c      	adds	r3, #28
 8005292:	edd3 7a00 	vldr	s15, [r3]
 8005296:	79bb      	ldrb	r3, [r7, #6]
 8005298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529c:	4a28      	ldr	r2, [pc, #160]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 800529e:	212c      	movs	r1, #44	; 0x2c
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	3328      	adds	r3, #40	; 0x28
 80052a8:	edc3 7a00 	vstr	s15, [r3]
		}
		if (functionID == ANALYSISDATA_FUNCTIONID){
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d138      	bne.n	8005324 <FDCAN_Recieve_RunDataFromMotors+0x26c>
			R[motorID].proportionalTerm = (RxData[6]<< 8 ) | RxData[7];
 80052b2:	4b24      	ldr	r3, [pc, #144]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 80052b4:	799b      	ldrb	r3, [r3, #6]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	b21a      	sxth	r2, r3
 80052ba:	4b22      	ldr	r3, [pc, #136]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 80052bc:	79db      	ldrb	r3, [r3, #7]
 80052be:	b21b      	sxth	r3, r3
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b21a      	sxth	r2, r3
 80052c4:	79bb      	ldrb	r3, [r7, #6]
 80052c6:	b290      	uxth	r0, r2
 80052c8:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 80052ca:	212c      	movs	r1, #44	; 0x2c
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	3320      	adds	r3, #32
 80052d4:	4602      	mov	r2, r0
 80052d6:	801a      	strh	r2, [r3, #0]
			R[motorID].integralTerm = (RxData[8]<< 8 ) | RxData[9];
 80052d8:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 80052da:	7a1b      	ldrb	r3, [r3, #8]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	b21a      	sxth	r2, r3
 80052e0:	4b18      	ldr	r3, [pc, #96]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 80052e2:	7a5b      	ldrb	r3, [r3, #9]
 80052e4:	b21b      	sxth	r3, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b21a      	sxth	r2, r3
 80052ea:	79bb      	ldrb	r3, [r7, #6]
 80052ec:	b290      	uxth	r0, r2
 80052ee:	4a14      	ldr	r2, [pc, #80]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 80052f0:	212c      	movs	r1, #44	; 0x2c
 80052f2:	fb01 f303 	mul.w	r3, r1, r3
 80052f6:	4413      	add	r3, r2
 80052f8:	3322      	adds	r3, #34	; 0x22
 80052fa:	4602      	mov	r2, r0
 80052fc:	801a      	strh	r2, [r3, #0]
			R[motorID].feedForwardTerm = (RxData[10]<< 8 ) | RxData[11];
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 8005300:	7a9b      	ldrb	r3, [r3, #10]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	b21a      	sxth	r2, r3
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <FDCAN_Recieve_RunDataFromMotors+0x28c>)
 8005308:	7adb      	ldrb	r3, [r3, #11]
 800530a:	b21b      	sxth	r3, r3
 800530c:	4313      	orrs	r3, r2
 800530e:	b21a      	sxth	r2, r3
 8005310:	79bb      	ldrb	r3, [r7, #6]
 8005312:	b290      	uxth	r0, r2
 8005314:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <FDCAN_Recieve_RunDataFromMotors+0x288>)
 8005316:	212c      	movs	r1, #44	; 0x2c
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	4602      	mov	r2, r0
 8005322:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bd90      	pop	{r4, r7, pc}
 800532c:	f3af 8000 	nop.w
 8005330:	43aa79bc 	.word	0x43aa79bc
 8005334:	3f7b866e 	.word	0x3f7b866e
 8005338:	b020c49c 	.word	0xb020c49c
 800533c:	3f916872 	.word	0x3f916872
 8005340:	2000076c 	.word	0x2000076c
 8005344:	200012dc 	.word	0x200012dc

08005348 <FDCAN_Recieve_ErrorsFromMotors>:
}



void FDCAN_Recieve_ErrorsFromMotors(uint8_t sourceAddress)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af02      	add	r7, sp, #8
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
	uint8_t motorID = GetMotorID_from_CANAddress(sourceAddress);
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fd7b 	bl	8005e50 <GetMotorID_from_CANAddress>
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]
	uint16_t temp = (RxData[0]<< 8 ) | RxData[1];
 800535e:	4b15      	ldr	r3, [pc, #84]	; (80053b4 <FDCAN_Recieve_ErrorsFromMotors+0x6c>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	b21a      	sxth	r2, r3
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <FDCAN_Recieve_ErrorsFromMotors+0x6c>)
 8005368:	785b      	ldrb	r3, [r3, #1]
 800536a:	b21b      	sxth	r3, r3
 800536c:	4313      	orrs	r3, r2
 800536e:	b21b      	sxth	r3, r3
 8005370:	81bb      	strh	r3, [r7, #12]
	R[motorID].motorError= temp;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <FDCAN_Recieve_ErrorsFromMotors+0x70>)
 8005376:	212c      	movs	r1, #44	; 0x2c
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	4413      	add	r3, r2
 800537e:	3326      	adds	r3, #38	; 0x26
 8005380:	89ba      	ldrh	r2, [r7, #12]
 8005382:	801a      	strh	r2, [r3, #0]
	ME.ErrorFlag = 1;
 8005384:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <FDCAN_Recieve_ErrorsFromMotors+0x74>)
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]
	uint16_t motorErrReason = FindTopMotorError(&ME,temp);
 800538a:	89bb      	ldrh	r3, [r7, #12]
 800538c:	4619      	mov	r1, r3
 800538e:	480b      	ldr	r0, [pc, #44]	; (80053bc <FDCAN_Recieve_ErrorsFromMotors+0x74>)
 8005390:	f000 f9e5 	bl	800575e <FindTopMotorError>
 8005394:	4603      	mov	r3, r0
 8005396:	817b      	strh	r3, [r7, #10]
	ME_addErrors(&ME,ERR_MOTOR_SOURCE,motorErrReason,motorID, temp);
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	b299      	uxth	r1, r3
 800539c:	897a      	ldrh	r2, [r7, #10]
 800539e:	89bb      	ldrh	r3, [r7, #12]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	460b      	mov	r3, r1
 80053a4:	2101      	movs	r1, #1
 80053a6:	4805      	ldr	r0, [pc, #20]	; (80053bc <FDCAN_Recieve_ErrorsFromMotors+0x74>)
 80053a8:	f000 f9fd 	bl	80057a6 <ME_addErrors>
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	200012dc 	.word	0x200012dc
 80053b8:	2000076c 	.word	0x2000076c
 80053bc:	20000684 	.word	0x20000684

080053c0 <Toggle_State_LEDs>:

#include "MB_LEDs.h"

uint8_t runLedFirstTime = 0;
uint8_t stopLEDFirstTime = 1;
void Toggle_State_LEDs(StateTypeDef *s){
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	if (s->current_state == IDLE_STATE){
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d11f      	bne.n	8005410 <Toggle_State_LEDs+0x50>
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80053d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053d4:	4873      	ldr	r0, [pc, #460]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 80053d6:	f003 f805 	bl	80083e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80053da:	2201      	movs	r2, #1
 80053dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053e0:	4870      	ldr	r0, [pc, #448]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 80053e2:	f002 ffe7 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80053e6:	2201      	movs	r2, #1
 80053e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053ec:	486d      	ldr	r0, [pc, #436]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 80053ee:	f002 ffe1 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_SET);
 80053f2:	2201      	movs	r2, #1
 80053f4:	2120      	movs	r1, #32
 80053f6:	486c      	ldr	r0, [pc, #432]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 80053f8:	f002 ffdc 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_SET);
 80053fc:	2201      	movs	r2, #1
 80053fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005402:	4869      	ldr	r0, [pc, #420]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 8005404:	f002 ffd6 	bl	80083b4 <HAL_GPIO_WritePin>
		runLedFirstTime = 1;
 8005408:	4b68      	ldr	r3, [pc, #416]	; (80055ac <Toggle_State_LEDs+0x1ec>)
 800540a:	2201      	movs	r2, #1
 800540c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
			HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
			HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_SET);
		}
}
 800540e:	e0c5      	b.n	800559c <Toggle_State_LEDs+0x1dc>
	}else if (s->current_state == HOMING_STATE){
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b09      	cmp	r3, #9
 8005416:	d11c      	bne.n	8005452 <Toggle_State_LEDs+0x92>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8005418:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800541c:	4861      	ldr	r0, [pc, #388]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 800541e:	f002 ffe1 	bl	80083e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8005422:	2201      	movs	r2, #1
 8005424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005428:	485e      	ldr	r0, [pc, #376]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 800542a:	f002 ffc3 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800542e:	2201      	movs	r2, #1
 8005430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005434:	485b      	ldr	r0, [pc, #364]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005436:	f002 ffbd 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_SET);
 800543a:	2201      	movs	r2, #1
 800543c:	2120      	movs	r1, #32
 800543e:	485a      	ldr	r0, [pc, #360]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 8005440:	f002 ffb8 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_SET);
 8005444:	2201      	movs	r2, #1
 8005446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800544a:	4857      	ldr	r0, [pc, #348]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 800544c:	f002 ffb2 	bl	80083b4 <HAL_GPIO_WritePin>
}
 8005450:	e0a4      	b.n	800559c <Toggle_State_LEDs+0x1dc>
	}else if (s->current_state == PAUSE_STATE){
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	2b05      	cmp	r3, #5
 8005458:	d11c      	bne.n	8005494 <Toggle_State_LEDs+0xd4>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800545a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800545e:	4851      	ldr	r0, [pc, #324]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005460:	f002 ffc0 	bl	80083e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8005464:	2201      	movs	r2, #1
 8005466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800546a:	484e      	ldr	r0, [pc, #312]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 800546c:	f002 ffa2 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8005470:	2201      	movs	r2, #1
 8005472:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005476:	484b      	ldr	r0, [pc, #300]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005478:	f002 ff9c 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_SET);
 800547c:	2201      	movs	r2, #1
 800547e:	2120      	movs	r1, #32
 8005480:	4849      	ldr	r0, [pc, #292]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 8005482:	f002 ff97 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_SET);
 8005486:	2201      	movs	r2, #1
 8005488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800548c:	4846      	ldr	r0, [pc, #280]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 800548e:	f002 ff91 	bl	80083b4 <HAL_GPIO_WritePin>
}
 8005492:	e083      	b.n	800559c <Toggle_State_LEDs+0x1dc>
	}else if (s->current_state == DIAGNOSTICS_STATE){
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b04      	cmp	r3, #4
 800549a:	d11c      	bne.n	80054d6 <Toggle_State_LEDs+0x116>
		HAL_GPIO_TogglePin(CAN_LED_GPIO_Port, CAN_LED_Pin);
 800549c:	2120      	movs	r1, #32
 800549e:	4842      	ldr	r0, [pc, #264]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 80054a0:	f002 ffa0 	bl	80083e4 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80054a4:	2201      	movs	r2, #1
 80054a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054aa:	483e      	ldr	r0, [pc, #248]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 80054ac:	f002 ff82 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80054b0:	2201      	movs	r2, #1
 80054b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054b6:	483b      	ldr	r0, [pc, #236]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 80054b8:	f002 ff7c 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80054bc:	2201      	movs	r2, #1
 80054be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054c2:	4838      	ldr	r0, [pc, #224]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 80054c4:	f002 ff76 	bl	80083b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_SET);
 80054c8:	2201      	movs	r2, #1
 80054ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054ce:	4836      	ldr	r0, [pc, #216]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 80054d0:	f002 ff70 	bl	80083b4 <HAL_GPIO_WritePin>
}
 80054d4:	e062      	b.n	800559c <Toggle_State_LEDs+0x1dc>
	}else if (s->current_state == ERROR_STATE){
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	2b07      	cmp	r3, #7
 80054dc:	d127      	bne.n	800552e <Toggle_State_LEDs+0x16e>
		if (stopLEDFirstTime == 1){
 80054de:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <Toggle_State_LEDs+0x1f0>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d119      	bne.n	800551a <Toggle_State_LEDs+0x15a>
			HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin,GPIO_PIN_SET);
 80054e6:	2201      	movs	r2, #1
 80054e8:	2120      	movs	r1, #32
 80054ea:	482f      	ldr	r0, [pc, #188]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 80054ec:	f002 ff62 	bl	80083b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80054f0:	2201      	movs	r2, #1
 80054f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054f6:	482b      	ldr	r0, [pc, #172]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 80054f8:	f002 ff5c 	bl	80083b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80054fc:	2201      	movs	r2, #1
 80054fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005502:	4828      	ldr	r0, [pc, #160]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005504:	f002 ff56 	bl	80083b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8005508:	2201      	movs	r2, #1
 800550a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800550e:	4825      	ldr	r0, [pc, #148]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005510:	f002 ff50 	bl	80083b4 <HAL_GPIO_WritePin>
			stopLEDFirstTime = 0;
 8005514:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <Toggle_State_LEDs+0x1f0>)
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800551a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800551e:	4821      	ldr	r0, [pc, #132]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005520:	f002 ff60 	bl	80083e4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(CAN_LED_GPIO_Port,CAN_LED_Pin);
 8005524:	2120      	movs	r1, #32
 8005526:	4820      	ldr	r0, [pc, #128]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 8005528:	f002 ff5c 	bl	80083e4 <HAL_GPIO_TogglePin>
}
 800552c:	e036      	b.n	800559c <Toggle_State_LEDs+0x1dc>
	else if (s->current_state == RUN_STATE){
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b03      	cmp	r3, #3
 8005534:	d132      	bne.n	800559c <Toggle_State_LEDs+0x1dc>
		if (runLedFirstTime == 1){
 8005536:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <Toggle_State_LEDs+0x1ec>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d114      	bne.n	8005568 <Toggle_State_LEDs+0x1a8>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800553e:	2201      	movs	r2, #1
 8005540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005544:	4817      	ldr	r0, [pc, #92]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005546:	f002 ff35 	bl	80083b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800554a:	2201      	movs	r2, #1
 800554c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005550:	4814      	ldr	r0, [pc, #80]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005552:	f002 ff2f 	bl	80083b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8005556:	2201      	movs	r2, #1
 8005558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800555c:	4811      	ldr	r0, [pc, #68]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 800555e:	f002 ff29 	bl	80083b4 <HAL_GPIO_WritePin>
			runLedFirstTime = 0;
 8005562:	4b12      	ldr	r3, [pc, #72]	; (80055ac <Toggle_State_LEDs+0x1ec>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8005568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800556c:	480d      	ldr	r0, [pc, #52]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 800556e:	f002 ff39 	bl	80083e4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8005572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005576:	480b      	ldr	r0, [pc, #44]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005578:	f002 ff34 	bl	80083e4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 800557c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005580:	4808      	ldr	r0, [pc, #32]	; (80055a4 <Toggle_State_LEDs+0x1e4>)
 8005582:	f002 ff2f 	bl	80083e4 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_SET);
 8005586:	2201      	movs	r2, #1
 8005588:	2120      	movs	r1, #32
 800558a:	4807      	ldr	r0, [pc, #28]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 800558c:	f002 ff12 	bl	80083b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, GPIO_PIN_SET);
 8005590:	2201      	movs	r2, #1
 8005592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005596:	4804      	ldr	r0, [pc, #16]	; (80055a8 <Toggle_State_LEDs+0x1e8>)
 8005598:	f002 ff0c 	bl	80083b4 <HAL_GPIO_WritePin>
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	48000800 	.word	0x48000800
 80055a8:	48000400 	.word	0x48000400
 80055ac:	200012ec 	.word	0x200012ec
 80055b0:	20000005 	.word	0x20000005

080055b4 <mcp23017_setupForMainBoard>:
#define REGISTER_OLATB		0x15

#define I2C_TIMEOUT		10


void mcp23017_setupForMainBoard(MCP23017_HandleTypeDef *hdev){
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status0;
	 uint8_t data[1];

	 data[0] = IOCON_DEFAULT;
 80055bc:	2320      	movs	r3, #32
 80055be:	733b      	strb	r3, [r7, #12]
	 status0 = mcp23017_write(hdev, IOCON_WHEN_BANK0, data);
 80055c0:	f107 030c 	add.w	r3, r7, #12
 80055c4:	461a      	mov	r2, r3
 80055c6:	210a      	movs	r1, #10
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f898 	bl	80056fe <mcp23017_write>
 80055ce:	4603      	mov	r3, r0
 80055d0:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(2);
 80055d2:	2002      	movs	r0, #2
 80055d4:	f001 f814 	bl	8006600 <HAL_Delay>

	 data[0] = IODIRB_DEFAULT;
 80055d8:	230f      	movs	r3, #15
 80055da:	733b      	strb	r3, [r7, #12]
	 status0 = mcp23017_write(hdev, IODIRB, data);
 80055dc:	f107 030c 	add.w	r3, r7, #12
 80055e0:	461a      	mov	r2, r3
 80055e2:	2101      	movs	r1, #1
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f88a 	bl	80056fe <mcp23017_write>
 80055ea:	4603      	mov	r3, r0
 80055ec:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(2);
 80055ee:	2002      	movs	r0, #2
 80055f0:	f001 f806 	bl	8006600 <HAL_Delay>

	 data[0] = IOPOLB_DEFAULT;
 80055f4:	2300      	movs	r3, #0
 80055f6:	733b      	strb	r3, [r7, #12]
	 status0 = mcp23017_write(hdev, IPOLB, data);
 80055f8:	f107 030c 	add.w	r3, r7, #12
 80055fc:	461a      	mov	r2, r3
 80055fe:	2103      	movs	r1, #3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f87c 	bl	80056fe <mcp23017_write>
 8005606:	4603      	mov	r3, r0
 8005608:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(2);
 800560a:	2002      	movs	r0, #2
 800560c:	f000 fff8 	bl	8006600 <HAL_Delay>

	 data[0] = GPPUB_DEFAULT;
 8005610:	2300      	movs	r3, #0
 8005612:	733b      	strb	r3, [r7, #12]
	 status0 = mcp23017_write(hdev, GPPUB, data);
 8005614:	f107 030c 	add.w	r3, r7, #12
 8005618:	461a      	mov	r2, r3
 800561a:	210d      	movs	r1, #13
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f86e 	bl	80056fe <mcp23017_write>
 8005622:	4603      	mov	r3, r0
 8005624:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(2);
 8005626:	2002      	movs	r0, #2
 8005628:	f000 ffea 	bl	8006600 <HAL_Delay>

	 //INTERRUPT SETUP
	 data[0] = GPINTENB_DEFAULT;
 800562c:	230f      	movs	r3, #15
 800562e:	733b      	strb	r3, [r7, #12]
	 status0 = mcp23017_write(hdev, GPINTENB, data);
 8005630:	f107 030c 	add.w	r3, r7, #12
 8005634:	461a      	mov	r2, r3
 8005636:	2105      	movs	r1, #5
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f860 	bl	80056fe <mcp23017_write>
 800563e:	4603      	mov	r3, r0
 8005640:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(2);
 8005642:	2002      	movs	r0, #2
 8005644:	f000 ffdc 	bl	8006600 <HAL_Delay>

	 data[0] = DEFVALB_DEFAULT;
 8005648:	2300      	movs	r3, #0
 800564a:	733b      	strb	r3, [r7, #12]
	 status0 = mcp23017_write(hdev, DEFVALB, data);
 800564c:	f107 030c 	add.w	r3, r7, #12
 8005650:	461a      	mov	r2, r3
 8005652:	2107      	movs	r1, #7
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f852 	bl	80056fe <mcp23017_write>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(2);
 800565e:	2002      	movs	r0, #2
 8005660:	f000 ffce 	bl	8006600 <HAL_Delay>

	 data[0] = INTCONB_DEFAULT;
 8005664:	2300      	movs	r3, #0
 8005666:	733b      	strb	r3, [r7, #12]
	 status0 = mcp23017_write(hdev, INTCONB, data);
 8005668:	f107 030c 	add.w	r3, r7, #12
 800566c:	461a      	mov	r2, r3
 800566e:	2109      	movs	r1, #9
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f844 	bl	80056fe <mcp23017_write>
 8005676:	4603      	mov	r3, r0
 8005678:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(2);
 800567a:	2002      	movs	r0, #2
 800567c:	f000 ffc0 	bl	8006600 <HAL_Delay>

	 status0 = mcp23017_read(hdev, INTCAPB,hdev->intTriggerCapturedValue ); // after youve set up , read once
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3308      	adds	r3, #8
 8005684:	461a      	mov	r2, r3
 8005686:	2111      	movs	r1, #17
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f81e 	bl	80056ca <mcp23017_read>
 800568e:	4603      	mov	r3, r0
 8005690:	73fb      	strb	r3, [r7, #15]
	 HAL_Delay(2);
 8005692:	2002      	movs	r0, #2
 8005694:	f000 ffb4 	bl	8006600 <HAL_Delay>

}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <mcp23017_init>:

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
	hdev->hi2c = hi2c;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	601a      	str	r2, [r3, #0]
	hdev->addr = addr << 1;
 80056b4:	88fb      	ldrh	r3, [r7, #6]
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	809a      	strh	r2, [r3, #4]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b088      	sub	sp, #32
 80056ce:	af04      	add	r7, sp, #16
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	460b      	mov	r3, r1
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	817b      	strh	r3, [r7, #10]
	/*HAL_I2C_Mem_Read performs a I2C write operation to select the memory address to read and then reads N bytes (start, I2C address + Write, Memory address, repeated start, I2C address + Read, N bytes, stop) */
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8899      	ldrh	r1, [r3, #4]
 80056e0:	897a      	ldrh	r2, [r7, #10]
 80056e2:	230a      	movs	r3, #10
 80056e4:	9302      	str	r3, [sp, #8]
 80056e6:	2301      	movs	r3, #1
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	2301      	movs	r3, #1
 80056f0:	f003 f84e 	bl	8008790 <HAL_I2C_Mem_Read>
 80056f4:	4603      	mov	r3, r0
	//return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1);
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b088      	sub	sp, #32
 8005702:	af04      	add	r7, sp, #16
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	460b      	mov	r3, r1
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	817b      	strh	r3, [r7, #10]
	/*HAL_I2C_Mem_Write performs a I2C write operation to select the memory address to read and then writes N bytes (start, I2C address + Write, Memory address, repeated start, I2C address + Write, N bytes, stop)*/
	
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8899      	ldrh	r1, [r3, #4]
 8005714:	897a      	ldrh	r2, [r7, #10]
 8005716:	230a      	movs	r3, #10
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	2301      	movs	r3, #1
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	2301      	movs	r3, #1
 8005724:	f002 ff20 	bl	8008568 <HAL_I2C_Mem_Write>
 8005728:	4603      	mov	r3, r0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <InitializeMotherBoardErrors_TypeDef>:
 *      Author: harsha
 */

#include "MachineErrors.h"

void InitializeMotherBoardErrors_TypeDef(MBErrorsTypeDef *e){
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
	e->EepromLoadValsGood = 0;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
	e->defaults_eepromWriteFailed=0;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	705a      	strb	r2, [r3, #1]
	e->AppSettings_parsingFailure = 0;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	709a      	strb	r2, [r3, #2]
	e->AppSettings_eepromWriteFailure = 0;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	70da      	strb	r2, [r3, #3]
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <FindTopMotorError>:

void InitializeMachineErrors_TypeDef(MachineErrorsTypedef *m){
	m->ErrorFlag = 0;
}

uint16_t FindTopMotorError(MachineErrorsTypedef *m , uint16_t errorCode){
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	807b      	strh	r3, [r7, #2]
	for (int i=0;i<16;i++){
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	e010      	b.n	8005792 <FindTopMotorError+0x34>
		if (((errorCode >> i) & 1) == 1){
 8005770:	887a      	ldrh	r2, [r7, #2]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	fa42 f303 	asr.w	r3, r2, r3
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <FindTopMotorError+0x2e>
			return 1<<i;
 8005780:	2201      	movs	r2, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	b29b      	uxth	r3, r3
 800578a:	e006      	b.n	800579a <FindTopMotorError+0x3c>
	for (int i=0;i<16;i++){
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3301      	adds	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b0f      	cmp	r3, #15
 8005796:	ddeb      	ble.n	8005770 <FindTopMotorError+0x12>
			break;
		}
	}
	return 0;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <ME_addErrors>:

void ME_addErrors(MachineErrorsTypedef *m,uint8_t errType,uint16_t errorReason,uint16_t errorSource, uint16_t errorCode){
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	4608      	mov	r0, r1
 80057b0:	4611      	mov	r1, r2
 80057b2:	461a      	mov	r2, r3
 80057b4:	4603      	mov	r3, r0
 80057b6:	72fb      	strb	r3, [r7, #11]
 80057b8:	460b      	mov	r3, r1
 80057ba:	813b      	strh	r3, [r7, #8]
 80057bc:	4613      	mov	r3, r2
 80057be:	80fb      	strh	r3, [r7, #6]
	if (m->errReason1 == EMPTY_ERROR){
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	889b      	ldrh	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10c      	bne.n	80057e2 <ME_addErrors+0x3c>
		m->errType1 = errType;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	7afa      	ldrb	r2, [r7, #11]
 80057cc:	705a      	strb	r2, [r3, #1]
		m->errReason1 = errorReason;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	893a      	ldrh	r2, [r7, #8]
 80057d2:	809a      	strh	r2, [r3, #4]
		m->errSource1 = errorSource;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	805a      	strh	r2, [r3, #2]
		m->errCode1 = errorCode;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8b3a      	ldrh	r2, [r7, #24]
 80057de:	80da      	strh	r2, [r3, #6]
		m->errSource2 = errorSource;
		m->errCode2 = errorCode;
	}else{
		// if we get one of the errors that involve turning off the SMPS , and we dont have that in two, add it in
	}
}
 80057e0:	e00f      	b.n	8005802 <ME_addErrors+0x5c>
	}else if (m->errReason2 == EMPTY_ERROR){
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	899b      	ldrh	r3, [r3, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10b      	bne.n	8005802 <ME_addErrors+0x5c>
		m->errType2 = errType;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	7afa      	ldrb	r2, [r7, #11]
 80057ee:	721a      	strb	r2, [r3, #8]
		m->errReason2 = errorReason;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	893a      	ldrh	r2, [r7, #8]
 80057f4:	819a      	strh	r2, [r3, #12]
		m->errSource2 = errorSource;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	815a      	strh	r2, [r3, #10]
		m->errCode2 = errorCode;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8b3a      	ldrh	r2, [r7, #24]
 8005800:	81da      	strh	r2, [r3, #14]
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <SetBTErrors>:

void SetBTErrors(MachineErrorsTypedef *m,uint16_t errorReason,uint16_t errorSource,uint16_t errCode){
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	4608      	mov	r0, r1
 8005818:	4611      	mov	r1, r2
 800581a:	461a      	mov	r2, r3
 800581c:	4603      	mov	r3, r0
 800581e:	817b      	strh	r3, [r7, #10]
 8005820:	460b      	mov	r3, r1
 8005822:	813b      	strh	r3, [r7, #8]
 8005824:	4613      	mov	r3, r2
 8005826:	80fb      	strh	r3, [r7, #6]
 m->BT_errorCode = errCode;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	88fa      	ldrh	r2, [r7, #6]
 800582c:	82da      	strh	r2, [r3, #22]
 m->BT_errorReason = errorReason;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	897a      	ldrh	r2, [r7, #10]
 8005832:	829a      	strh	r2, [r3, #20]
 m->BT_errorSrc = errorSource;
 8005834:	893b      	ldrh	r3, [r7, #8]
 8005836:	b2da      	uxtb	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	749a      	strb	r2, [r3, #18]
}
 800583c:	bf00      	nop
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <Sensor_whichTriggered>:
 */


#include "MachineSensors.h"

uint8_t Sensor_whichTriggered(MCP23017_HandleTypeDef *mcp, MCP23017_PortB *whichSensor){
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	mcp23017_read(mcp, INTFB,mcp->intTrigger);// intFB gives which pin has interrupt
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3307      	adds	r3, #7
 8005856:	461a      	mov	r2, r3
 8005858:	210f      	movs	r1, #15
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff ff35 	bl	80056ca <mcp23017_read>
	whichSensor->raw = mcp->intTrigger[0];
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	79da      	ldrb	r2, [r3, #7]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	701a      	strb	r2, [r3, #0]
	if (whichSensor->values.input1 == 1){
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <Sensor_whichTriggered+0x32>
		return CREEL_SLIVER_CUT_SENSOR;
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <Sensor_whichTriggered+0x34>
	}
	return UNKNOWN_SENSOR;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <SetCoilerSensorState>:
		return sensorVal->values.input1;
	}
	return -1;
}

void SetCoilerSensorState(SensorTypeDef *s,uint8_t state){
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
	s->coilerSensor_activated = state;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	709a      	strb	r2, [r3, #2]
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <ReadMachineSettingsFromEeprom>:

#include "Eeprom.h"
#include "machineSettings.h"
#include "machineEepromSettings.h"

void ReadMachineSettingsFromEeprom(machineSettingsTypeDef *m){
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
	m->delivery_mMin = EE_ReadFloat(C_DELIVERY_M_MIN_ADDR);
 80058aa:	2002      	movs	r0, #2
 80058ac:	f7ff fa04 	bl	8004cb8 <EE_ReadFloat>
 80058b0:	eef0 7a40 	vmov.f32	s15, s0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	edc3 7a00 	vstr	s15, [r3]
	m->draft  = EE_ReadFloat(C_DRAFT_ADDR);
 80058ba:	2006      	movs	r0, #6
 80058bc:	f7ff f9fc 	bl	8004cb8 <EE_ReadFloat>
 80058c0:	eef0 7a40 	vmov.f32	s15, s0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	edc3 7a01 	vstr	s15, [r3, #4]
	m->cylinderSpeed = EE_ReadInteger(C_CARDING_CYL_SPEED_ADDR);
 80058ca:	200a      	movs	r0, #10
 80058cc:	f7ff f974 	bl	8004bb8 <EE_ReadInteger>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	811a      	strh	r2, [r3, #8]
	m->beaterSpeed = EE_ReadInteger(C_BEATER_CYL_SPEED_ADDR);
 80058d8:	200c      	movs	r0, #12
 80058da:	f7ff f96d 	bl	8004bb8 <EE_ReadInteger>
 80058de:	4603      	mov	r3, r0
 80058e0:	461a      	mov	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	821a      	strh	r2, [r3, #16]
	m->cylinderFeed = EE_ReadFloat(C_CARDING_FEED_ADDR);
 80058e6:	2010      	movs	r0, #16
 80058e8:	f7ff f9e6 	bl	8004cb8 <EE_ReadFloat>
 80058ec:	eef0 7a40 	vmov.f32	s15, s0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	edc3 7a03 	vstr	s15, [r3, #12]
	m->beaterFeed  = EE_ReadFloat(C_BEATER_FEED_ADDR);
 80058f6:	2014      	movs	r0, #20
 80058f8:	f7ff f9de 	bl	8004cb8 <EE_ReadFloat>
 80058fc:	eef0 7a40 	vmov.f32	s15, s0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	edc3 7a05 	vstr	s15, [r3, #20]
	m->trunkDelay = EE_ReadInteger(C_TRUNK_DELAY_ADDR);
 8005906:	2018      	movs	r0, #24
 8005908:	f7ff f956 	bl	8004bb8 <EE_ReadInteger>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	831a      	strh	r2, [r3, #24]
	m->lengthLimit = EE_ReadInteger(C_LENGTH_LIMIT_M_ADDR);
 8005914:	201a      	movs	r0, #26
 8005916:	f7ff f94f 	bl	8004bb8 <EE_ReadInteger>
 800591a:	4603      	mov	r3, r0
 800591c:	461a      	mov	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	835a      	strh	r2, [r3, #26]
	m->rampTimes = EE_ReadInteger(C_RAMP_TIMES_ADDR);
 8005922:	201c      	movs	r0, #28
 8005924:	f7ff f948 	bl	8004bb8 <EE_ReadInteger>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	61da      	str	r2, [r3, #28]
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <WriteMachineSettingsIntoEeprom>:


uint8_t WriteMachineSettingsIntoEeprom(machineSettingsTypeDef *m){
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	uint8_t dataWritten = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	73fb      	strb	r3, [r7, #15]
    dataWritten += EE_WriteFloat(m->delivery_mMin,C_DELIVERY_M_MIN_ADDR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	edd3 7a00 	vldr	s15, [r3]
 800594a:	2002      	movs	r0, #2
 800594c:	eeb0 0a67 	vmov.f32	s0, s15
 8005950:	f7ff f982 	bl	8004c58 <EE_WriteFloat>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	4413      	add	r3, r2
 800595c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(2);
 800595e:	2002      	movs	r0, #2
 8005960:	f000 fe4e 	bl	8006600 <HAL_Delay>
    dataWritten += EE_WriteFloat(m->draft,C_DRAFT_ADDR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	edd3 7a01 	vldr	s15, [r3, #4]
 800596a:	2006      	movs	r0, #6
 800596c:	eeb0 0a67 	vmov.f32	s0, s15
 8005970:	f7ff f972 	bl	8004c58 <EE_WriteFloat>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	4413      	add	r3, r2
 800597c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(2);
 800597e:	2002      	movs	r0, #2
 8005980:	f000 fe3e 	bl	8006600 <HAL_Delay>
    dataWritten += EE_WriteInteger(m->cylinderSpeed,C_CARDING_CYL_SPEED_ADDR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	891b      	ldrh	r3, [r3, #8]
 8005988:	210a      	movs	r1, #10
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff f8de 	bl	8004b4c <EE_WriteInteger>
 8005990:	4603      	mov	r3, r0
 8005992:	461a      	mov	r2, r3
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	4413      	add	r3, r2
 8005998:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(2);
 800599a:	2002      	movs	r0, #2
 800599c:	f000 fe30 	bl	8006600 <HAL_Delay>
    dataWritten += EE_WriteInteger(m->beaterSpeed,C_BEATER_CYL_SPEED_ADDR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8a1b      	ldrh	r3, [r3, #16]
 80059a4:	210c      	movs	r1, #12
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff f8d0 	bl	8004b4c <EE_WriteInteger>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	4413      	add	r3, r2
 80059b4:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(2);
 80059b6:	2002      	movs	r0, #2
 80059b8:	f000 fe22 	bl	8006600 <HAL_Delay>
    dataWritten += EE_WriteFloat(m->cylinderFeed,C_CARDING_FEED_ADDR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	edd3 7a03 	vldr	s15, [r3, #12]
 80059c2:	2010      	movs	r0, #16
 80059c4:	eeb0 0a67 	vmov.f32	s0, s15
 80059c8:	f7ff f946 	bl	8004c58 <EE_WriteFloat>
 80059cc:	4603      	mov	r3, r0
 80059ce:	461a      	mov	r2, r3
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	4413      	add	r3, r2
 80059d4:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(2);
 80059d6:	2002      	movs	r0, #2
 80059d8:	f000 fe12 	bl	8006600 <HAL_Delay>
    dataWritten += EE_WriteFloat(m->beaterFeed,C_BEATER_FEED_ADDR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	edd3 7a05 	vldr	s15, [r3, #20]
 80059e2:	2014      	movs	r0, #20
 80059e4:	eeb0 0a67 	vmov.f32	s0, s15
 80059e8:	f7ff f936 	bl	8004c58 <EE_WriteFloat>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	4413      	add	r3, r2
 80059f4:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(2);
 80059f6:	2002      	movs	r0, #2
 80059f8:	f000 fe02 	bl	8006600 <HAL_Delay>
    dataWritten += EE_WriteInteger(m->trunkDelay,C_TRUNK_DELAY_ADDR);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8b1b      	ldrh	r3, [r3, #24]
 8005a00:	2118      	movs	r1, #24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff f8a2 	bl	8004b4c <EE_WriteInteger>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	4413      	add	r3, r2
 8005a10:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(2);
 8005a12:	2002      	movs	r0, #2
 8005a14:	f000 fdf4 	bl	8006600 <HAL_Delay>
    dataWritten += EE_WriteInteger(m->lengthLimit,C_LENGTH_LIMIT_M_ADDR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8b5b      	ldrh	r3, [r3, #26]
 8005a1c:	211a      	movs	r1, #26
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff f894 	bl	8004b4c <EE_WriteInteger>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8005a2e:	2002      	movs	r0, #2
 8005a30:	f000 fde6 	bl	8006600 <HAL_Delay>
	dataWritten += EE_WriteInteger(m->rampTimes,C_RAMP_TIMES_ADDR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	211c      	movs	r1, #28
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff f885 	bl	8004b4c <EE_WriteInteger>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	4413      	add	r3, r2
 8005a4a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8005a4c:	2002      	movs	r0, #2
 8005a4e:	f000 fdd7 	bl	8006600 <HAL_Delay>

    if (dataWritten == 9)
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b09      	cmp	r3, #9
 8005a56:	d101      	bne.n	8005a5c <WriteMachineSettingsIntoEeprom+0x124>
    	{return 0;}
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e000      	b.n	8005a5e <WriteMachineSettingsIntoEeprom+0x126>
    else{
    	return 1;}
 8005a5c:	2301      	movs	r3, #1
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <CheckMachineSettings>:


uint8_t CheckMachineSettings(machineSettingsTypeDef* m){
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	//typically when something goes wrong with the eeprom you get a value that is very high..
	//to allow for changes place to place without changing this code, we just set the thresholds to  2* maxRange.
	// dont expect in any place the nos to go higher than this..NEED TO PUT LOWER BOUNDS FOR EVERYTHING
	if ((m->delivery_mMin > 15 ) || (m->delivery_mMin < 6)){
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	edd3 7a00 	vldr	s15, [r3]
 8005a76:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a82:	dc09      	bgt.n	8005a98 <CheckMachineSettings+0x30>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	edd3 7a00 	vldr	s15, [r3]
 8005a8a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8005a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a96:	d501      	bpl.n	8005a9c <CheckMachineSettings+0x34>
		return 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e078      	b.n	8005b8e <CheckMachineSettings+0x126>
	}
	if ((m->draft > 1.50f)||(m->draft < 0.5)){
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005aa2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aae:	dc09      	bgt.n	8005ac4 <CheckMachineSettings+0x5c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ab6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac2:	d501      	bpl.n	8005ac8 <CheckMachineSettings+0x60>
		return 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e062      	b.n	8005b8e <CheckMachineSettings+0x126>
	}
	if ((m->cylinderSpeed > 1500)||(m->cylinderSpeed < 1200)){
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	891b      	ldrh	r3, [r3, #8]
 8005acc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d804      	bhi.n	8005ade <CheckMachineSettings+0x76>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	891b      	ldrh	r3, [r3, #8]
 8005ad8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8005adc:	d201      	bcs.n	8005ae2 <CheckMachineSettings+0x7a>
		return 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e055      	b.n	8005b8e <CheckMachineSettings+0x126>
	}

	if ((m->cylinderFeed > 5) || (m->cylinderFeed < 0.1)){
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ae8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af4:	dc0c      	bgt.n	8005b10 <CheckMachineSettings+0xa8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fa fd5c 	bl	80005b8 <__aeabi_f2d>
 8005b00:	a325      	add	r3, pc, #148	; (adr r3, 8005b98 <CheckMachineSettings+0x130>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f7fb f821 	bl	8000b4c <__aeabi_dcmplt>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <CheckMachineSettings+0xac>
		return 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	e03c      	b.n	8005b8e <CheckMachineSettings+0x126>
	}
	if ((m->beaterSpeed > 1300) || (m->beaterSpeed < 800)){
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8a1b      	ldrh	r3, [r3, #16]
 8005b18:	f240 5214 	movw	r2, #1300	; 0x514
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d804      	bhi.n	8005b2a <CheckMachineSettings+0xc2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8a1b      	ldrh	r3, [r3, #16]
 8005b24:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005b28:	d201      	bcs.n	8005b2e <CheckMachineSettings+0xc6>
		return 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e02f      	b.n	8005b8e <CheckMachineSettings+0x126>
	}

	if ((m->beaterFeed > 5) || (m->beaterSpeed < 0.1)){
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b34:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b40:	dc03      	bgt.n	8005b4a <CheckMachineSettings+0xe2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8a1b      	ldrh	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <CheckMachineSettings+0xe6>
		return 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e01f      	b.n	8005b8e <CheckMachineSettings+0x126>
	}

	if ((m->trunkDelay > 10) || (m->trunkDelay< 1)){
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8b1b      	ldrh	r3, [r3, #24]
 8005b52:	2b0a      	cmp	r3, #10
 8005b54:	d803      	bhi.n	8005b5e <CheckMachineSettings+0xf6>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8b1b      	ldrh	r3, [r3, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <CheckMachineSettings+0xfa>
		return 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e015      	b.n	8005b8e <CheckMachineSettings+0x126>
	}

	if ((m->lengthLimit > 300) || (m->lengthLimit < 30)){
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8b5b      	ldrh	r3, [r3, #26]
 8005b66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005b6a:	d803      	bhi.n	8005b74 <CheckMachineSettings+0x10c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8b5b      	ldrh	r3, [r3, #26]
 8005b70:	2b1d      	cmp	r3, #29
 8005b72:	d801      	bhi.n	8005b78 <CheckMachineSettings+0x110>
		return 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e00a      	b.n	8005b8e <CheckMachineSettings+0x126>
	}
	if ((m->rampTimes > 10) || (m->rampTimes < 3)){
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	2b0a      	cmp	r3, #10
 8005b7e:	dc03      	bgt.n	8005b88 <CheckMachineSettings+0x120>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	dc01      	bgt.n	8005b8c <CheckMachineSettings+0x124>
		return 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <CheckMachineSettings+0x126>
	}
	return 1;
 8005b8c:	2301      	movs	r3, #1
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	9999999a 	.word	0x9999999a
 8005b9c:	3fb99999 	.word	0x3fb99999

08005ba0 <LoadDefaultMachineSettings>:

void LoadDefaultMachineSettings(machineSettingsTypeDef* m){
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	m->delivery_mMin = DEFAULT_DELIVERY_M_MIN;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8005bae:	601a      	str	r2, [r3, #0]
	m->draft = DEFAULT_DRAFT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005bb6:	605a      	str	r2, [r3, #4]
	m->cylinderSpeed = DEFAULT_CARDING_CYL_SPEED;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8005bbe:	811a      	strh	r2, [r3, #8]
	m->cylinderFeed = DEFAULT_CARDING_FEED_SPEED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005bc6:	60da      	str	r2, [r3, #12]
	m->beaterSpeed = DEFAULT_BEATER_CYL_SPEED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005bce:	821a      	strh	r2, [r3, #16]
	m->beaterFeed = DEFAULT_BEATER_FEED_SPEED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005bd6:	615a      	str	r2, [r3, #20]
	m->trunkDelay = DEFAULT_TRUNK_DELAY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2203      	movs	r2, #3
 8005bdc:	831a      	strh	r2, [r3, #24]
	m->lengthLimit = DEFAULT_LENGTH_LIMIT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2264      	movs	r2, #100	; 0x64
 8005be2:	835a      	strh	r2, [r3, #26]
	m->rampTimes = DEFAULT_RAMP_TIMES;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2205      	movs	r2, #5
 8005be8:	61da      	str	r2, [r3, #28]
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <InitializeMachineSettings>:
 *      Author: harsha
 */

#include "machineSettings.h"

void InitializeMachineSettings(machineSettingsTypeDef *ms){
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	ms->delivery_mMin = 6;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a10      	ldr	r2, [pc, #64]	; (8005c44 <InitializeMachineSettings+0x4c>)
 8005c04:	601a      	str	r2, [r3, #0]
	ms->draft = 1.0;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005c0c:	605a      	str	r2, [r3, #4]
	ms->cylinderSpeed = 1500;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005c14:	811a      	strh	r2, [r3, #8]
	ms->cylinderFeed = 3.5;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <InitializeMachineSettings+0x50>)
 8005c1a:	60da      	str	r2, [r3, #12]
	ms->beaterSpeed = 950;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005c22:	821a      	strh	r2, [r3, #16]
	ms->beaterFeed = 2.5;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <InitializeMachineSettings+0x54>)
 8005c28:	615a      	str	r2, [r3, #20]
	ms->trunkDelay = 3;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	831a      	strh	r2, [r3, #24]
	ms->lengthLimit = 1500;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005c36:	835a      	strh	r2, [r3, #26]
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40c00000 	.word	0x40c00000
 8005c48:	40600000 	.word	0x40600000
 8005c4c:	40200000 	.word	0x40200000

08005c50 <CalculateMachineParameters>:

void CalculateMachineParameters(machineSettingsTypeDef *ms,machineParamsTypeDef *m){
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	m->cylinderRPM = ms->cylinderSpeed/CYLINDER_GEAR_RATIO;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	891b      	ldrh	r3, [r3, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fa fc98 	bl	8000594 <__aeabi_i2d>
 8005c64:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8005c68:	4b61      	ldr	r3, [pc, #388]	; (8005df0 <CalculateMachineParameters+0x1a0>)
 8005c6a:	f7fa fe27 	bl	80008bc <__aeabi_ddiv>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	f7fa ffcf 	bl	8000c18 <__aeabi_d2uiz>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	801a      	strh	r2, [r3, #0]
	m->beaterRPM = ms->beaterSpeed/BEATER_GEAR_RATIO;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8a1b      	ldrh	r3, [r3, #16]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fa fc84 	bl	8000594 <__aeabi_i2d>
 8005c8c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8005c90:	4b57      	ldr	r3, [pc, #348]	; (8005df0 <CalculateMachineParameters+0x1a0>)
 8005c92:	f7fa fe13 	bl	80008bc <__aeabi_ddiv>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f7fa ffbb 	bl	8000c18 <__aeabi_d2uiz>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	805a      	strh	r2, [r3, #2]
	m->cylinderFeedRPM = ms->cylinderFeed * CYLINDER_FEED_GB;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cb0:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005df4 <CalculateMachineParameters+0x1a4>
 8005cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cbc:	ee17 3a90 	vmov	r3, s15
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	80da      	strh	r2, [r3, #6]
	m->beaterFeedRPM = ms->beaterFeed * BEATER_FEED_GB;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8005ccc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005df4 <CalculateMachineParameters+0x1a4>
 8005cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd8:	ee17 3a90 	vmov	r3, s15
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	809a      	strh	r2, [r3, #4]
	m->cageGB_RPM = (ms->delivery_mMin*1000)/TONGUE_GROOVE_CIRCUMFERENCE_MM;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	edd3 7a00 	vldr	s15, [r3]
 8005ce8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005df8 <CalculateMachineParameters+0x1a8>
 8005cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf0:	ee17 0a90 	vmov	r0, s15
 8005cf4:	f7fa fc60 	bl	80005b8 <__aeabi_f2d>
 8005cf8:	a335      	add	r3, pc, #212	; (adr r3, 8005dd0 <CalculateMachineParameters+0x180>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fddd 	bl	80008bc <__aeabi_ddiv>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4610      	mov	r0, r2
 8005d08:	4619      	mov	r1, r3
 8005d0a:	f7fa ffa5 	bl	8000c58 <__aeabi_d2f>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	60da      	str	r2, [r3, #12]
	m->cageRPM = m->cageGB_RPM * CAGE_GB;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fa fc4d 	bl	80005b8 <__aeabi_f2d>
 8005d1e:	a32e      	add	r3, pc, #184	; (adr r3, 8005dd8 <CalculateMachineParameters+0x188>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f7fa fca0 	bl	8000668 <__aeabi_dmul>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f7fa ff72 	bl	8000c18 <__aeabi_d2uiz>
 8005d34:	4603      	mov	r3, r0
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	811a      	strh	r2, [r3, #8]
	float req_coiler_tongue_surfaceSpeed_mm = (ms->delivery_mMin*1000) * ms->draft;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	edd3 7a00 	vldr	s15, [r3]
 8005d42:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005df8 <CalculateMachineParameters+0x1a8>
 8005d46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d54:	edc7 7a03 	vstr	s15, [r7, #12]
	float req_coiler_tongueRPM = req_coiler_tongue_surfaceSpeed_mm/COILER_GROOVE_CIRCUMFERENCE_MM;
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7fa fc2d 	bl	80005b8 <__aeabi_f2d>
 8005d5e:	a320      	add	r3, pc, #128	; (adr r3, 8005de0 <CalculateMachineParameters+0x190>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f7fa fdaa 	bl	80008bc <__aeabi_ddiv>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f7fa ff72 	bl	8000c58 <__aeabi_d2f>
 8005d74:	4603      	mov	r3, r0
 8005d76:	60bb      	str	r3, [r7, #8]
	m->coilerGB_rpm = req_coiler_tongueRPM/COILER_GROOVE_TO_GB_RATIO;
 8005d78:	68b8      	ldr	r0, [r7, #8]
 8005d7a:	f7fa fc1d 	bl	80005b8 <__aeabi_f2d>
 8005d7e:	a31a      	add	r3, pc, #104	; (adr r3, 8005de8 <CalculateMachineParameters+0x198>)
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f7fa fd9a 	bl	80008bc <__aeabi_ddiv>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f7fa ff62 	bl	8000c58 <__aeabi_d2f>
 8005d94:	4602      	mov	r2, r0
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	611a      	str	r2, [r3, #16]
	m->coilerRPM = m->coilerGB_rpm * COILER_GB;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fc0a 	bl	80005b8 <__aeabi_f2d>
 8005da4:	a30c      	add	r3, pc, #48	; (adr r3, 8005dd8 <CalculateMachineParameters+0x188>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fc5d 	bl	8000668 <__aeabi_dmul>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	f7fa ff2f 	bl	8000c18 <__aeabi_d2uiz>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	815a      	strh	r2, [r3, #10]
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	f3af 8000 	nop.w
 8005dd0:	f5c28f5c 	.word	0xf5c28f5c
 8005dd4:	406ab428 	.word	0x406ab428
 8005dd8:	0a3d70a4 	.word	0x0a3d70a4
 8005ddc:	401ba3d7 	.word	0x401ba3d7
 8005de0:	916872b0 	.word	0x916872b0
 8005de4:	406858ed 	.word	0x406858ed
 8005de8:	db22d0e5 	.word	0xdb22d0e5
 8005dec:	3ffa7ef9 	.word	0x3ffa7ef9
 8005df0:	3ff33333 	.word	0x3ff33333
 8005df4:	43340000 	.word	0x43340000
 8005df8:	447a0000 	.word	0x447a0000

08005dfc <getMotorCANAddress>:


uint8_t getMotorCANAddress(uint8_t motor){
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
	if (motor == CARDING_CYLINDER){
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <getMotorCANAddress+0x14>
		return 2;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e019      	b.n	8005e44 <getMotorCANAddress+0x48>
	}else if (motor == BEATER_CYLINDER){
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <getMotorCANAddress+0x1e>
		return 3;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e014      	b.n	8005e44 <getMotorCANAddress+0x48>
	}else if (motor == CAGE){
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d101      	bne.n	8005e24 <getMotorCANAddress+0x28>
		return 4;
 8005e20:	2304      	movs	r3, #4
 8005e22:	e00f      	b.n	8005e44 <getMotorCANAddress+0x48>
	}else if (motor == CARDING_FEED){
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d101      	bne.n	8005e2e <getMotorCANAddress+0x32>
		return 5;
 8005e2a:	2305      	movs	r3, #5
 8005e2c:	e00a      	b.n	8005e44 <getMotorCANAddress+0x48>
	}else if (motor == BEATER_FEED){
 8005e2e:	79fb      	ldrb	r3, [r7, #7]
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d101      	bne.n	8005e38 <getMotorCANAddress+0x3c>
		return 6;
 8005e34:	2306      	movs	r3, #6
 8005e36:	e005      	b.n	8005e44 <getMotorCANAddress+0x48>
	}else if (motor == COILER){
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d101      	bne.n	8005e42 <getMotorCANAddress+0x46>
		return 7;
 8005e3e:	2307      	movs	r3, #7
 8005e40:	e000      	b.n	8005e44 <getMotorCANAddress+0x48>
	}else{
		return 0;
 8005e42:	2300      	movs	r3, #0
	}
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <GetMotorID_from_CANAddress>:

uint8_t GetMotorID_from_CANAddress(uint8_t canAddress){
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]
	if (canAddress == CARDING_CYLINDER_ADDRESS){
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d101      	bne.n	8005e64 <GetMotorID_from_CANAddress+0x14>
		return CARDING_CYLINDER;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e019      	b.n	8005e98 <GetMotorID_from_CANAddress+0x48>
	}else if (canAddress == BEATER_CYLINDER_ADDRESS){
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d101      	bne.n	8005e6e <GetMotorID_from_CANAddress+0x1e>
		return BEATER_CYLINDER;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e014      	b.n	8005e98 <GetMotorID_from_CANAddress+0x48>
	}else if (canAddress == CAGE_ADDRESS){
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d101      	bne.n	8005e78 <GetMotorID_from_CANAddress+0x28>
		return CAGE;
 8005e74:	2302      	movs	r3, #2
 8005e76:	e00f      	b.n	8005e98 <GetMotorID_from_CANAddress+0x48>
	}else if (canAddress == CARDING_FEED_ADDRESS){
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d101      	bne.n	8005e82 <GetMotorID_from_CANAddress+0x32>
		return CARDING_FEED;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e00a      	b.n	8005e98 <GetMotorID_from_CANAddress+0x48>
	}else if (canAddress == BEATER_FEED_ADDRESS){
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	2b06      	cmp	r3, #6
 8005e86:	d101      	bne.n	8005e8c <GetMotorID_from_CANAddress+0x3c>
		return BEATER_FEED;
 8005e88:	2304      	movs	r3, #4
 8005e8a:	e005      	b.n	8005e98 <GetMotorID_from_CANAddress+0x48>
	}else if (canAddress == COILER_ADDRESS){
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	2b07      	cmp	r3, #7
 8005e90:	d101      	bne.n	8005e96 <GetMotorID_from_CANAddress+0x46>
		return COILER;
 8005e92:	2305      	movs	r3, #5
 8005e94:	e000      	b.n	8005e98 <GetMotorID_from_CANAddress+0x48>
	}
	return 6; // return
 8005e96:	2306      	movs	r3, #6
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <ReadySetupCommand_AllMotors>:
#include "Struct.h"
#include "CommonConstants.h"
#include "CAN_MotherBoard.h"
#include "Ack.h"

void ReadySetupCommand_AllMotors(machineSettingsTypeDef *ms,machineParamsTypeDef *mp){
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	SU[0].RPM = mp->cylinderRPM;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005eb4:	809a      	strh	r2, [r3, #4]
	SU[1].RPM = mp->beaterRPM;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	885a      	ldrh	r2, [r3, #2]
 8005eba:	4b2d      	ldr	r3, [pc, #180]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005ebc:	839a      	strh	r2, [r3, #28]
	SU[2].RPM = mp->cageRPM;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	891a      	ldrh	r2, [r3, #8]
 8005ec2:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005ec4:	869a      	strh	r2, [r3, #52]	; 0x34
	SU[3].RPM = mp->cylinderFeedRPM;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	88da      	ldrh	r2, [r3, #6]
 8005eca:	4b29      	ldr	r3, [pc, #164]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005ecc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	SU[4].RPM = mp->beaterFeedRPM;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	889a      	ldrh	r2, [r3, #4]
 8005ed4:	4b26      	ldr	r3, [pc, #152]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005ed6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	SU[4].RPM = mp->coilerRPM;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	895a      	ldrh	r2, [r3, #10]
 8005ede:	4b24      	ldr	r3, [pc, #144]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005ee0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	for (int i= 0;i<2;i++){
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e015      	b.n	8005f16 <ReadySetupCommand_AllMotors+0x72>
		SU[i].RDT = CYLINDERS_RAMP_TIME_SEC;
 8005eea:	4921      	ldr	r1, [pc, #132]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3302      	adds	r3, #2
 8005efa:	223c      	movs	r2, #60	; 0x3c
 8005efc:	801a      	strh	r2, [r3, #0]
		SU[i].RUT = CYLINDERS_RAMP_TIME_SEC;
 8005efe:	491c      	ldr	r1, [pc, #112]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4613      	mov	r3, r2
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	4413      	add	r3, r2
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	440b      	add	r3, r1
 8005f0c:	223c      	movs	r2, #60	; 0x3c
 8005f0e:	801a      	strh	r2, [r3, #0]
	for (int i= 0;i<2;i++){
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	dde6      	ble.n	8005eea <ReadySetupCommand_AllMotors+0x46>
	}
	for (int i= 2;i<6;i++){
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	e01b      	b.n	8005f5a <ReadySetupCommand_AllMotors+0xb6>
		SU[i].RDT = ms->rampTimes;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	b298      	uxth	r0, r3
 8005f28:	4911      	ldr	r1, [pc, #68]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	4413      	add	r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	440b      	add	r3, r1
 8005f36:	3302      	adds	r3, #2
 8005f38:	4602      	mov	r2, r0
 8005f3a:	801a      	strh	r2, [r3, #0]
		SU[i].RUT = ms->rampTimes;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	b298      	uxth	r0, r3
 8005f42:	490b      	ldr	r1, [pc, #44]	; (8005f70 <ReadySetupCommand_AllMotors+0xcc>)
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	440b      	add	r3, r1
 8005f50:	4602      	mov	r2, r0
 8005f52:	801a      	strh	r2, [r3, #0]
	for (int i= 2;i<6;i++){
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60bb      	str	r3, [r7, #8]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	dde0      	ble.n	8005f22 <ReadySetupCommand_AllMotors+0x7e>
	}

}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	2000069c 	.word	0x2000069c

08005f74 <SendCommands_To_MultipleMotors>:


uint8_t  SendCommands_To_MultipleMotors(uint8_t *motorList,uint8_t motorArraySize,uint8_t command){
 8005f74:	b5b0      	push	{r4, r5, r7, lr}
 8005f76:	b096      	sub	sp, #88	; 0x58
 8005f78:	af04      	add	r7, sp, #16
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
 8005f80:	4613      	mov	r3, r2
 8005f82:	70bb      	strb	r3, [r7, #2]
	 * needed to actually get an ack, so if we havent recieved its quite certain theres
	 * some fault. The CAN interrupt for the ack msg handles the success case by stopping
	 * the timer if all the acks are recieved.
	 */

	uint8_t noOfMotors = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	75fb      	strb	r3, [r7, #23]
	uint16_t motorAcksCheck = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint8_t canID;
	uint8_t motor;
	uint8_t motorAddresses[6]={};
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	2300      	movs	r3, #0
 8005f94:	823b      	strh	r3, [r7, #16]

	noOfMotors = motorArraySize;
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	75fb      	strb	r3, [r7, #23]

	for (int i=0;i<noOfMotors;i++){
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f9e:	e01d      	b.n	8005fdc <SendCommands_To_MultipleMotors+0x68>
		canID = getMotorCANAddress(motorList[i]);
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff ff27 	bl	8005dfc <getMotorCANAddress>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	75bb      	strb	r3, [r7, #22]
		motorAddresses[i] = canID;
 8005fb2:	f107 020c 	add.w	r2, r7, #12
 8005fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb8:	4413      	add	r3, r2
 8005fba:	7dba      	ldrb	r2, [r7, #22]
 8005fbc:	701a      	strb	r2, [r3, #0]
		motorAcksCheck |= (1<< (canID-2));
 8005fbe:	7dbb      	ldrb	r3, [r7, #22]
 8005fc0:	3b02      	subs	r3, #2
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	b21a      	sxth	r2, r3
 8005fca:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	b21b      	sxth	r3, r3
 8005fd2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	for (int i=0;i<noOfMotors;i++){
 8005fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd8:	3301      	adds	r3, #1
 8005fda:	643b      	str	r3, [r7, #64]	; 0x40
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	dbdd      	blt.n	8005fa0 <SendCommands_To_MultipleMotors+0x2c>
	}

	if (command == START){
 8005fe4:	78bb      	ldrb	r3, [r7, #2]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	f040 8087 	bne.w	80060fa <SendCommands_To_MultipleMotors+0x186>
		reset_ACKs();
 8005fec:	f7fb f83c 	bl	8001068 <reset_ACKs>
		//say ack for what - so that if it fails we know what it was looking for when it failed.
		ACK_startCheck(motorAcksCheck,ACK_FOR_SETUP_MM,NON_CRITICAL_ACK); // StartMM - MM is for multipleMotors
 8005ff0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fb f84b 	bl	8001094 <ACK_startCheck>
		for (int i=0;i<noOfMotors;i++){
 8005ffe:	2300      	movs	r3, #0
 8006000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006002:	e022      	b.n	800604a <SendCommands_To_MultipleMotors+0xd6>
			canID = motorAddresses[i];
 8006004:	f107 020c 	add.w	r2, r7, #12
 8006008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600a:	4413      	add	r3, r2
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	75bb      	strb	r3, [r7, #22]
			motor = motorList[i];
 8006010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	757b      	strb	r3, [r7, #21]
			FDCAN_sendSetUp_ToMotor(canID,SU[motor]);
 800601a:	7d7a      	ldrb	r2, [r7, #21]
 800601c:	49b0      	ldr	r1, [pc, #704]	; (80062e0 <SendCommands_To_MultipleMotors+0x36c>)
 800601e:	4613      	mov	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	440b      	add	r3, r1
 8006028:	7dbd      	ldrb	r5, [r7, #22]
 800602a:	466c      	mov	r4, sp
 800602c:	f103 020c 	add.w	r2, r3, #12
 8006030:	ca07      	ldmia	r2, {r0, r1, r2}
 8006032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006038:	4628      	mov	r0, r5
 800603a:	f7fe fefd 	bl	8004e38 <FDCAN_sendSetUp_ToMotor>
			HAL_Delay(1); // is needed here or the second msg doesnt seem to go!
 800603e:	2001      	movs	r0, #1
 8006040:	f000 fade 	bl	8006600 <HAL_Delay>
		for (int i=0;i<noOfMotors;i++){
 8006044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006046:	3301      	adds	r3, #1
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800604e:	429a      	cmp	r2, r3
 8006050:	dbd8      	blt.n	8006004 <SendCommands_To_MultipleMotors+0x90>
		}

		while(ack.waitingForAckResult){};
 8006052:	bf00      	nop
 8006054:	4ba3      	ldr	r3, [pc, #652]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 8006056:	795b      	ldrb	r3, [r3, #5]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1fb      	bne.n	8006054 <SendCommands_To_MultipleMotors+0xe0>

		if (ack.ackResult == ACK_SUCCESS){
 800605c:	4ba1      	ldr	r3, [pc, #644]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 800605e:	799b      	ldrb	r3, [r3, #6]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d148      	bne.n	80060f6 <SendCommands_To_MultipleMotors+0x182>
			reset_ACKs();
 8006064:	f7fb f800 	bl	8001068 <reset_ACKs>
			ACK_startCheck(motorAcksCheck,ACK_FOR_START_MM, NON_CRITICAL_ACK);
 8006068:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800606c:	2202      	movs	r2, #2
 800606e:	2102      	movs	r1, #2
 8006070:	4618      	mov	r0, r3
 8006072:	f7fb f80f 	bl	8001094 <ACK_startCheck>
			for (int i=0;i<noOfMotors;i++){
 8006076:	2300      	movs	r3, #0
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38
 800607a:	e00d      	b.n	8006098 <SendCommands_To_MultipleMotors+0x124>
				canID = motorAddresses[i];
 800607c:	f107 020c 	add.w	r2, r7, #12
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	4413      	add	r3, r2
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	75bb      	strb	r3, [r7, #22]
				FDCAN_sendCommand_ToMotor(canID, START);
 8006088:	7dbb      	ldrb	r3, [r7, #22]
 800608a:	2102      	movs	r1, #2
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fea5 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
			for (int i=0;i<noOfMotors;i++){
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	3301      	adds	r3, #1
 8006096:	63bb      	str	r3, [r7, #56]	; 0x38
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609c:	429a      	cmp	r2, r3
 800609e:	dbed      	blt.n	800607c <SendCommands_To_MultipleMotors+0x108>
			}
			while(ack.waitingForAckResult){};
 80060a0:	bf00      	nop
 80060a2:	4b90      	ldr	r3, [pc, #576]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 80060a4:	795b      	ldrb	r3, [r3, #5]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1fb      	bne.n	80060a2 <SendCommands_To_MultipleMotors+0x12e>

			if (ack.ackResult ==  ACK_FAIL){
 80060aa:	4b8e      	ldr	r3, [pc, #568]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 80060ac:	799b      	ldrb	r3, [r3, #6]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d11f      	bne.n	80060f2 <SendCommands_To_MultipleMotors+0x17e>
				reset_ACKs();
 80060b2:	f7fa ffd9 	bl	8001068 <reset_ACKs>
				ACK_startCheck(motorAcksCheck,ACK_FOR_START_MM,CRITICAL_ACK);
 80060b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80060ba:	2201      	movs	r2, #1
 80060bc:	2102      	movs	r1, #2
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fa ffe8 	bl	8001094 <ACK_startCheck>
				for (int i=0;i<noOfMotors;i++){
 80060c4:	2300      	movs	r3, #0
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
 80060c8:	e00d      	b.n	80060e6 <SendCommands_To_MultipleMotors+0x172>
					canID = motorAddresses[i];
 80060ca:	f107 020c 	add.w	r2, r7, #12
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	4413      	add	r3, r2
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	75bb      	strb	r3, [r7, #22]
					FDCAN_sendCommand_ToMotor(canID, EMERGENCY_STOP);
 80060d6:	7dbb      	ldrb	r3, [r7, #22]
 80060d8:	2101      	movs	r1, #1
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe fe7e 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
				for (int i=0;i<noOfMotors;i++){
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	3301      	adds	r3, #1
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ea:	429a      	cmp	r2, r3
 80060ec:	dbed      	blt.n	80060ca <SendCommands_To_MultipleMotors+0x156>
				}
				return 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e10f      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
			}
			return 1;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e10d      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
		}
		else{	// Didnt recieve Ack for Setup
			return 2;
 80060f6:	2302      	movs	r3, #2
 80060f8:	e10b      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
			}

	} // closes START

	if (command == RAMPDOWN_STOP){
 80060fa:	78bb      	ldrb	r3, [r7, #2]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d148      	bne.n	8006192 <SendCommands_To_MultipleMotors+0x21e>
			reset_ACKs();
 8006100:	f7fa ffb2 	bl	8001068 <reset_ACKs>
			ACK_startCheck(motorAcksCheck,ACK_FOR_RD_MM, NON_CRITICAL_ACK);
 8006104:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006108:	2202      	movs	r2, #2
 800610a:	2103      	movs	r1, #3
 800610c:	4618      	mov	r0, r3
 800610e:	f7fa ffc1 	bl	8001094 <ACK_startCheck>
			for (int i=0;i<noOfMotors;i++){
 8006112:	2300      	movs	r3, #0
 8006114:	633b      	str	r3, [r7, #48]	; 0x30
 8006116:	e00d      	b.n	8006134 <SendCommands_To_MultipleMotors+0x1c0>
				canID = motorAddresses[i];
 8006118:	f107 020c 	add.w	r2, r7, #12
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	4413      	add	r3, r2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	75bb      	strb	r3, [r7, #22]
				FDCAN_sendCommand_ToMotor(canID, RAMPDOWN_STOP);
 8006124:	7dbb      	ldrb	r3, [r7, #22]
 8006126:	2103      	movs	r1, #3
 8006128:	4618      	mov	r0, r3
 800612a:	f7fe fe57 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
			for (int i=0;i<noOfMotors;i++){
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	3301      	adds	r3, #1
 8006132:	633b      	str	r3, [r7, #48]	; 0x30
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006138:	429a      	cmp	r2, r3
 800613a:	dbed      	blt.n	8006118 <SendCommands_To_MultipleMotors+0x1a4>
			}
			while(ack.waitingForAckResult){};
 800613c:	bf00      	nop
 800613e:	4b69      	ldr	r3, [pc, #420]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 8006140:	795b      	ldrb	r3, [r3, #5]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1fb      	bne.n	800613e <SendCommands_To_MultipleMotors+0x1ca>

			if (ack.ackResult ==  ACK_FAIL){
 8006146:	4b67      	ldr	r3, [pc, #412]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 8006148:	799b      	ldrb	r3, [r3, #6]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d11f      	bne.n	800618e <SendCommands_To_MultipleMotors+0x21a>
				reset_ACKs();
 800614e:	f7fa ff8b 	bl	8001068 <reset_ACKs>
				ACK_startCheck(motorAcksCheck,ACK_FOR_RD_MM,CRITICAL_ACK);
 8006152:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006156:	2201      	movs	r2, #1
 8006158:	2103      	movs	r1, #3
 800615a:	4618      	mov	r0, r3
 800615c:	f7fa ff9a 	bl	8001094 <ACK_startCheck>
				for (int i=0;i<noOfMotors;i++){
 8006160:	2300      	movs	r3, #0
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006164:	e00d      	b.n	8006182 <SendCommands_To_MultipleMotors+0x20e>
					canID = motorAddresses[i];
 8006166:	f107 020c 	add.w	r2, r7, #12
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	4413      	add	r3, r2
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	75bb      	strb	r3, [r7, #22]
					FDCAN_sendCommand_ToMotor(canID, EMERGENCY_STOP);
 8006172:	7dbb      	ldrb	r3, [r7, #22]
 8006174:	2101      	movs	r1, #1
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fe30 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
				for (int i=0;i<noOfMotors;i++){
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	3301      	adds	r3, #1
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006186:	429a      	cmp	r2, r3
 8006188:	dbed      	blt.n	8006166 <SendCommands_To_MultipleMotors+0x1f2>
				}
				return 0;
 800618a:	2300      	movs	r3, #0
 800618c:	e0c1      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
			}
			return 1;
 800618e:	2301      	movs	r3, #1
 8006190:	e0bf      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
		}

		if (command == RESUME){
 8006192:	78bb      	ldrb	r3, [r7, #2]
 8006194:	2b06      	cmp	r3, #6
 8006196:	d148      	bne.n	800622a <SendCommands_To_MultipleMotors+0x2b6>
			reset_ACKs();
 8006198:	f7fa ff66 	bl	8001068 <reset_ACKs>
			ACK_startCheck(motorAcksCheck,ACK_FOR_RU_MM, NON_CRITICAL_ACK);
 800619c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80061a0:	2202      	movs	r2, #2
 80061a2:	2104      	movs	r1, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fa ff75 	bl	8001094 <ACK_startCheck>
			for (int i=0;i<noOfMotors;i++){
 80061aa:	2300      	movs	r3, #0
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ae:	e00d      	b.n	80061cc <SendCommands_To_MultipleMotors+0x258>
				canID = motorAddresses[i];
 80061b0:	f107 020c 	add.w	r2, r7, #12
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	4413      	add	r3, r2
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	75bb      	strb	r3, [r7, #22]
				FDCAN_sendCommand_ToMotor(canID, RESUME);
 80061bc:	7dbb      	ldrb	r3, [r7, #22]
 80061be:	2106      	movs	r1, #6
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fe0b 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
			for (int i=0;i<noOfMotors;i++){
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	3301      	adds	r3, #1
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d0:	429a      	cmp	r2, r3
 80061d2:	dbed      	blt.n	80061b0 <SendCommands_To_MultipleMotors+0x23c>
			}
			while(ack.waitingForAckResult){};
 80061d4:	bf00      	nop
 80061d6:	4b43      	ldr	r3, [pc, #268]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 80061d8:	795b      	ldrb	r3, [r3, #5]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1fb      	bne.n	80061d6 <SendCommands_To_MultipleMotors+0x262>
			if (ack.ackResult ==  ACK_FAIL){
 80061de:	4b41      	ldr	r3, [pc, #260]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 80061e0:	799b      	ldrb	r3, [r3, #6]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d11f      	bne.n	8006226 <SendCommands_To_MultipleMotors+0x2b2>
				reset_ACKs();
 80061e6:	f7fa ff3f 	bl	8001068 <reset_ACKs>
				ACK_startCheck(motorAcksCheck,ACK_FOR_RU_MM,CRITICAL_ACK);
 80061ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80061ee:	2201      	movs	r2, #1
 80061f0:	2104      	movs	r1, #4
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fa ff4e 	bl	8001094 <ACK_startCheck>
				for (int i=0;i<noOfMotors;i++){
 80061f8:	2300      	movs	r3, #0
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
 80061fc:	e00d      	b.n	800621a <SendCommands_To_MultipleMotors+0x2a6>
					canID = motorAddresses[i];
 80061fe:	f107 020c 	add.w	r2, r7, #12
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	4413      	add	r3, r2
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	75bb      	strb	r3, [r7, #22]
					FDCAN_sendCommand_ToMotor(canID, EMERGENCY_STOP);
 800620a:	7dbb      	ldrb	r3, [r7, #22]
 800620c:	2101      	movs	r1, #1
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fde4 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
				for (int i=0;i<noOfMotors;i++){
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	3301      	adds	r3, #1
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621e:	429a      	cmp	r2, r3
 8006220:	dbed      	blt.n	80061fe <SendCommands_To_MultipleMotors+0x28a>
				}
				return 0;
 8006222:	2300      	movs	r3, #0
 8006224:	e075      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
			}
			return 1;
 8006226:	2301      	movs	r3, #1
 8006228:	e073      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
		}

		if (command == HOMING){
 800622a:	78bb      	ldrb	r3, [r7, #2]
 800622c:	2b05      	cmp	r3, #5
 800622e:	d148      	bne.n	80062c2 <SendCommands_To_MultipleMotors+0x34e>
			reset_ACKs();
 8006230:	f7fa ff1a 	bl	8001068 <reset_ACKs>
			ACK_startCheck(motorAcksCheck,ACK_FOR_HOMING_MM, NON_CRITICAL_ACK);
 8006234:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006238:	2202      	movs	r2, #2
 800623a:	2105      	movs	r1, #5
 800623c:	4618      	mov	r0, r3
 800623e:	f7fa ff29 	bl	8001094 <ACK_startCheck>
			for (int i=0;i<noOfMotors;i++){
 8006242:	2300      	movs	r3, #0
 8006244:	623b      	str	r3, [r7, #32]
 8006246:	e00d      	b.n	8006264 <SendCommands_To_MultipleMotors+0x2f0>
				canID = motorAddresses[i];
 8006248:	f107 020c 	add.w	r2, r7, #12
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	4413      	add	r3, r2
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	75bb      	strb	r3, [r7, #22]
				FDCAN_sendCommand_ToMotor(canID, HOMING);
 8006254:	7dbb      	ldrb	r3, [r7, #22]
 8006256:	2105      	movs	r1, #5
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe fdbf 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
			for (int i=0;i<noOfMotors;i++){
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	3301      	adds	r3, #1
 8006262:	623b      	str	r3, [r7, #32]
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	6a3a      	ldr	r2, [r7, #32]
 8006268:	429a      	cmp	r2, r3
 800626a:	dbed      	blt.n	8006248 <SendCommands_To_MultipleMotors+0x2d4>
			}
			while(ack.waitingForAckResult){};
 800626c:	bf00      	nop
 800626e:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 8006270:	795b      	ldrb	r3, [r3, #5]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1fb      	bne.n	800626e <SendCommands_To_MultipleMotors+0x2fa>
			if (ack.ackResult ==  ACK_FAIL){
 8006276:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <SendCommands_To_MultipleMotors+0x370>)
 8006278:	799b      	ldrb	r3, [r3, #6]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d11f      	bne.n	80062be <SendCommands_To_MultipleMotors+0x34a>
				reset_ACKs();
 800627e:	f7fa fef3 	bl	8001068 <reset_ACKs>
				ACK_startCheck(motorAcksCheck,ACK_FOR_HOMING_MM,CRITICAL_ACK);
 8006282:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006286:	2201      	movs	r2, #1
 8006288:	2105      	movs	r1, #5
 800628a:	4618      	mov	r0, r3
 800628c:	f7fa ff02 	bl	8001094 <ACK_startCheck>
				for (int i=0;i<noOfMotors;i++){
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	e00d      	b.n	80062b2 <SendCommands_To_MultipleMotors+0x33e>
					canID = motorAddresses[i];;
 8006296:	f107 020c 	add.w	r2, r7, #12
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	75bb      	strb	r3, [r7, #22]
					FDCAN_sendCommand_ToMotor(canID, EMERGENCY_STOP);
 80062a2:	7dbb      	ldrb	r3, [r7, #22]
 80062a4:	2101      	movs	r1, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fd98 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
				for (int i=0;i<noOfMotors;i++){
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	dbed      	blt.n	8006296 <SendCommands_To_MultipleMotors+0x322>
				}
				return 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e029      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
			}
			return 1;
 80062be:	2301      	movs	r3, #1
 80062c0:	e027      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
		}

		if (command == EMERGENCY_STOP){
 80062c2:	78bb      	ldrb	r3, [r7, #2]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d123      	bne.n	8006310 <SendCommands_To_MultipleMotors+0x39c>
			reset_ACKs();
 80062c8:	f7fa fece 	bl	8001068 <reset_ACKs>
			ACK_startCheck(motorAcksCheck,ACK_FOR_STOP_MM,CRITICAL_ACK);
 80062cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80062d0:	2201      	movs	r2, #1
 80062d2:	2106      	movs	r1, #6
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fa fedd 	bl	8001094 <ACK_startCheck>
			for (int i=0;i<noOfMotors;i++){
 80062da:	2300      	movs	r3, #0
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	e011      	b.n	8006304 <SendCommands_To_MultipleMotors+0x390>
 80062e0:	2000069c 	.word	0x2000069c
 80062e4:	2000072c 	.word	0x2000072c
				canID = motorAddresses[i];
 80062e8:	f107 020c 	add.w	r2, r7, #12
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	4413      	add	r3, r2
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	75bb      	strb	r3, [r7, #22]
				FDCAN_sendCommand_ToMotor(canID, EMERGENCY_STOP);
 80062f4:	7dbb      	ldrb	r3, [r7, #22]
 80062f6:	2101      	movs	r1, #1
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fd6f 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
			for (int i=0;i<noOfMotors;i++){
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	3301      	adds	r3, #1
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	429a      	cmp	r2, r3
 800630a:	dbed      	blt.n	80062e8 <SendCommands_To_MultipleMotors+0x374>
			}
			return 0;
 800630c:	2300      	movs	r3, #0
 800630e:	e000      	b.n	8006312 <SendCommands_To_MultipleMotors+0x39e>
		}

	//should never reach here
	return 0;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3748      	adds	r7, #72	; 0x48
 8006316:	46bd      	mov	sp, r7
 8006318:	bdb0      	pop	{r4, r5, r7, pc}
 800631a:	bf00      	nop

0800631c <Send_DiagCommands_To_MultipleMotors>:

uint8_t  Send_DiagCommands_To_MultipleMotors(uint8_t *motorList,uint8_t motorArraySize,uint8_t command){
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
 8006328:	4613      	mov	r3, r2
 800632a:	70bb      	strb	r3, [r7, #2]
	/* Returns 0 if the command has ran into Ack errors and we have finally sent a STOP command/ or we ve just send a stop Command.
	 * Returns 1 if the command has run properly and we ve recieved the correct no of Acks for Setup/start/RD and RU
	 * Return 2 is the Setup Command has not recieved the right no of ACKS
	 */

	uint8_t noOfMotors = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]
	uint16_t motorAcksCheck = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t canID;
	uint8_t motorAddresses[6]={};
 8006334:	2300      	movs	r3, #0
 8006336:	60bb      	str	r3, [r7, #8]
 8006338:	2300      	movs	r3, #0
 800633a:	81bb      	strh	r3, [r7, #12]

	noOfMotors = motorArraySize;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<noOfMotors;i++){
 8006340:	2300      	movs	r3, #0
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	e01c      	b.n	8006380 <Send_DiagCommands_To_MultipleMotors+0x64>
		canID = getMotorCANAddress(motorList[i]);
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	4413      	add	r3, r2
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fd54 	bl	8005dfc <getMotorCANAddress>
 8006354:	4603      	mov	r3, r0
 8006356:	73bb      	strb	r3, [r7, #14]
		motorAddresses[i] = canID;
 8006358:	f107 0208 	add.w	r2, r7, #8
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	4413      	add	r3, r2
 8006360:	7bba      	ldrb	r2, [r7, #14]
 8006362:	701a      	strb	r2, [r3, #0]
		motorAcksCheck |= (1<< (canID-2));
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	3b02      	subs	r3, #2
 8006368:	2201      	movs	r2, #1
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	b21a      	sxth	r2, r3
 8006370:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006374:	4313      	orrs	r3, r2
 8006376:	b21b      	sxth	r3, r3
 8006378:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i=0;i<noOfMotors;i++){
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	3301      	adds	r3, #1
 800637e:	623b      	str	r3, [r7, #32]
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	6a3a      	ldr	r2, [r7, #32]
 8006384:	429a      	cmp	r2, r3
 8006386:	dbde      	blt.n	8006346 <Send_DiagCommands_To_MultipleMotors+0x2a>
	}

	if (command == START){
 8006388:	78bb      	ldrb	r3, [r7, #2]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d171      	bne.n	8006472 <Send_DiagCommands_To_MultipleMotors+0x156>
		reset_ACKs();
 800638e:	f7fa fe6b 	bl	8001068 <reset_ACKs>
		//say ack for what - so that if it fails we know what it was looking for when it failed.
		ACK_startCheck(motorAcksCheck,ACK_FOR_DIAG_SETUP,NON_CRITICAL_ACK);
 8006392:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006394:	2202      	movs	r2, #2
 8006396:	2107      	movs	r1, #7
 8006398:	4618      	mov	r0, r3
 800639a:	f7fa fe7b 	bl	8001094 <ACK_startCheck>
		for (int i=0;i<noOfMotors;i++){
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	e010      	b.n	80063c6 <Send_DiagCommands_To_MultipleMotors+0xaa>
			canID = motorAddresses[i];
 80063a4:	f107 0208 	add.w	r2, r7, #8
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	73bb      	strb	r3, [r7, #14]
			FDCAN_SendDiagnostics_ToMotor(canID,&D);
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	4943      	ldr	r1, [pc, #268]	; (80064c0 <Send_DiagCommands_To_MultipleMotors+0x1a4>)
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe fd83 	bl	8004ec0 <FDCAN_SendDiagnostics_ToMotor>
			HAL_Delay(1); // is needed here or the second msg doesnt seem to go!
 80063ba:	2001      	movs	r0, #1
 80063bc:	f000 f920 	bl	8006600 <HAL_Delay>
		for (int i=0;i<noOfMotors;i++){
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	3301      	adds	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	dbea      	blt.n	80063a4 <Send_DiagCommands_To_MultipleMotors+0x88>
		}


		while(ack.waitingForAckResult){};
 80063ce:	bf00      	nop
 80063d0:	4b3c      	ldr	r3, [pc, #240]	; (80064c4 <Send_DiagCommands_To_MultipleMotors+0x1a8>)
 80063d2:	795b      	ldrb	r3, [r3, #5]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1fb      	bne.n	80063d0 <Send_DiagCommands_To_MultipleMotors+0xb4>

		if (ack.ackResult == ACK_SUCCESS){
 80063d8:	4b3a      	ldr	r3, [pc, #232]	; (80064c4 <Send_DiagCommands_To_MultipleMotors+0x1a8>)
 80063da:	799b      	ldrb	r3, [r3, #6]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d146      	bne.n	800646e <Send_DiagCommands_To_MultipleMotors+0x152>
			reset_ACKs();
 80063e0:	f7fa fe42 	bl	8001068 <reset_ACKs>
			ACK_startCheck(motorAcksCheck,ACK_FOR_DIAG_START, NON_CRITICAL_ACK);
 80063e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063e6:	2202      	movs	r2, #2
 80063e8:	2108      	movs	r1, #8
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fa fe52 	bl	8001094 <ACK_startCheck>
			for (int i=0;i<noOfMotors;i++){
 80063f0:	2300      	movs	r3, #0
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	e00d      	b.n	8006412 <Send_DiagCommands_To_MultipleMotors+0xf6>
				canID = motorAddresses[i];
 80063f6:	f107 0208 	add.w	r2, r7, #8
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	4413      	add	r3, r2
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	73bb      	strb	r3, [r7, #14]
				FDCAN_sendCommand_ToMotor(canID, START);
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	2102      	movs	r1, #2
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fce8 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
			for (int i=0;i<noOfMotors;i++){
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	3301      	adds	r3, #1
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	429a      	cmp	r2, r3
 8006418:	dbed      	blt.n	80063f6 <Send_DiagCommands_To_MultipleMotors+0xda>
			}
			while(ack.waitingForAckResult){};
 800641a:	bf00      	nop
 800641c:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <Send_DiagCommands_To_MultipleMotors+0x1a8>)
 800641e:	795b      	ldrb	r3, [r3, #5]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1fb      	bne.n	800641c <Send_DiagCommands_To_MultipleMotors+0x100>

			if (ack.ackResult ==  ACK_FAIL){
 8006424:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <Send_DiagCommands_To_MultipleMotors+0x1a8>)
 8006426:	799b      	ldrb	r3, [r3, #6]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d11e      	bne.n	800646a <Send_DiagCommands_To_MultipleMotors+0x14e>
				//TODO detect which motor Failed.
				reset_ACKs();
 800642c:	f7fa fe1c 	bl	8001068 <reset_ACKs>
				ACK_startCheck(motorAcksCheck,ACK_FOR_DIAG_START,CRITICAL_ACK);
 8006430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006432:	2201      	movs	r2, #1
 8006434:	2108      	movs	r1, #8
 8006436:	4618      	mov	r0, r3
 8006438:	f7fa fe2c 	bl	8001094 <ACK_startCheck>
				for (int i=0;i<noOfMotors;i++){
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e00d      	b.n	800645e <Send_DiagCommands_To_MultipleMotors+0x142>
					canID = motorAddresses[i];
 8006442:	f107 0208 	add.w	r2, r7, #8
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	4413      	add	r3, r2
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	73bb      	strb	r3, [r7, #14]
					FDCAN_sendCommand_ToMotor(canID, EMERGENCY_STOP);
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2101      	movs	r1, #1
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fcc2 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
				for (int i=0;i<noOfMotors;i++){
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	3301      	adds	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	429a      	cmp	r2, r3
 8006464:	dbed      	blt.n	8006442 <Send_DiagCommands_To_MultipleMotors+0x126>
				}
				return 0;
 8006466:	2300      	movs	r3, #0
 8006468:	e026      	b.n	80064b8 <Send_DiagCommands_To_MultipleMotors+0x19c>
			}
			return 1;
 800646a:	2301      	movs	r3, #1
 800646c:	e024      	b.n	80064b8 <Send_DiagCommands_To_MultipleMotors+0x19c>
		}
		else{	// Didnt recieve Ack for Setup
			return 2;
 800646e:	2302      	movs	r3, #2
 8006470:	e022      	b.n	80064b8 <Send_DiagCommands_To_MultipleMotors+0x19c>
			}

	} // closes START

	if (command == EMERGENCY_STOP){
 8006472:	78bb      	ldrb	r3, [r7, #2]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d11e      	bne.n	80064b6 <Send_DiagCommands_To_MultipleMotors+0x19a>
		reset_ACKs();
 8006478:	f7fa fdf6 	bl	8001068 <reset_ACKs>
		ACK_startCheck(motorAcksCheck,ACK_FOR_DIAG_STOP,CRITICAL_ACK);
 800647c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800647e:	2201      	movs	r2, #1
 8006480:	2109      	movs	r1, #9
 8006482:	4618      	mov	r0, r3
 8006484:	f7fa fe06 	bl	8001094 <ACK_startCheck>
		for (int i=0;i<noOfMotors;i++){
 8006488:	2300      	movs	r3, #0
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	e00d      	b.n	80064aa <Send_DiagCommands_To_MultipleMotors+0x18e>
			canID = motorAddresses[i];
 800648e:	f107 0208 	add.w	r2, r7, #8
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4413      	add	r3, r2
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	73bb      	strb	r3, [r7, #14]
			FDCAN_sendCommand_ToMotor(canID, EMERGENCY_STOP);
 800649a:	7bbb      	ldrb	r3, [r7, #14]
 800649c:	2101      	movs	r1, #1
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fc9c 	bl	8004ddc <FDCAN_sendCommand_ToMotor>
		for (int i=0;i<noOfMotors;i++){
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	3301      	adds	r3, #1
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	dbed      	blt.n	800648e <Send_DiagCommands_To_MultipleMotors+0x172>
		}
		return 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <Send_DiagCommands_To_MultipleMotors+0x19c>
	}

	//should never reach here
	return 0;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3728      	adds	r7, #40	; 0x28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000754 	.word	0x20000754
 80064c4:	2000072c 	.word	0x2000072c

080064c8 <SMPS_TurnOn>:
 *  Created on: 13-May-2023
 *      Author: harsha
 */

#include "SMPS.h"
void SMPS_TurnOn(void){
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SMPS_CNTRL_GND_GPIO_Port, SMPS_CNTRL_GND_Pin, GPIO_PIN_RESET);
 80064cc:	2200      	movs	r2, #0
 80064ce:	2180      	movs	r1, #128	; 0x80
 80064d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064d4:	f001 ff6e 	bl	80083b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SMPS_CNTRL_OP_GPIO_Port, SMPS_CNTRL_OP_Pin, GPIO_PIN_SET);
 80064d8:	2201      	movs	r2, #1
 80064da:	2101      	movs	r1, #1
 80064dc:	4803      	ldr	r0, [pc, #12]	; (80064ec <SMPS_TurnOn+0x24>)
 80064de:	f001 ff69 	bl	80083b4 <HAL_GPIO_WritePin>
	S.SMPS_cntrl = 1;
 80064e2:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <SMPS_TurnOn+0x28>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	761a      	strb	r2, [r3, #24]
}
 80064e8:	bf00      	nop
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	48000400 	.word	0x48000400
 80064f0:	20000738 	.word	0x20000738

080064f4 <SMPS_TurnOff>:

void SMPS_TurnOff(void){
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SMPS_CNTRL_GND_GPIO_Port, SMPS_CNTRL_GND_Pin, GPIO_PIN_SET);
 80064f8:	2201      	movs	r2, #1
 80064fa:	2180      	movs	r1, #128	; 0x80
 80064fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006500:	f001 ff58 	bl	80083b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SMPS_CNTRL_OP_GPIO_Port, SMPS_CNTRL_OP_Pin, GPIO_PIN_RESET);
 8006504:	2200      	movs	r2, #0
 8006506:	2101      	movs	r1, #1
 8006508:	4803      	ldr	r0, [pc, #12]	; (8006518 <SMPS_TurnOff+0x24>)
 800650a:	f001 ff53 	bl	80083b4 <HAL_GPIO_WritePin>
	S.SMPS_cntrl = 0;
 800650e:	4b03      	ldr	r3, [pc, #12]	; (800651c <SMPS_TurnOff+0x28>)
 8006510:	2200      	movs	r2, #0
 8006512:	761a      	strb	r2, [r3, #24]
}
 8006514:	bf00      	nop
 8006516:	bd80      	pop	{r7, pc}
 8006518:	48000400 	.word	0x48000400
 800651c:	20000738 	.word	0x20000738

08006520 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800652a:	2003      	movs	r0, #3
 800652c:	f000 f95a 	bl	80067e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006530:	200f      	movs	r0, #15
 8006532:	f000 f80d 	bl	8006550 <HAL_InitTick>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	71fb      	strb	r3, [r7, #7]
 8006540:	e001      	b.n	8006546 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006542:	f7fb fcfb 	bl	8001f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006546:	79fb      	ldrb	r3, [r7, #7]

}
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800655c:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <HAL_InitTick+0x68>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d022      	beq.n	80065aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006564:	4b15      	ldr	r3, [pc, #84]	; (80065bc <HAL_InitTick+0x6c>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <HAL_InitTick+0x68>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006570:	fbb1 f3f3 	udiv	r3, r1, r3
 8006574:	fbb2 f3f3 	udiv	r3, r2, r3
 8006578:	4618      	mov	r0, r3
 800657a:	f000 f966 	bl	800684a <HAL_SYSTICK_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10f      	bne.n	80065a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b0f      	cmp	r3, #15
 8006588:	d809      	bhi.n	800659e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800658a:	2200      	movs	r2, #0
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006592:	f000 f932 	bl	80067fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006596:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <HAL_InitTick+0x70>)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	e007      	b.n	80065ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	73fb      	strb	r3, [r7, #15]
 80065a2:	e004      	b.n	80065ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	73fb      	strb	r3, [r7, #15]
 80065a8:	e001      	b.n	80065ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	2000000c 	.word	0x2000000c
 80065bc:	20000000 	.word	0x20000000
 80065c0:	20000008 	.word	0x20000008

080065c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <HAL_IncTick+0x1c>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <HAL_IncTick+0x20>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4413      	add	r3, r2
 80065d2:	4a03      	ldr	r2, [pc, #12]	; (80065e0 <HAL_IncTick+0x1c>)
 80065d4:	6013      	str	r3, [r2, #0]
}
 80065d6:	bf00      	nop
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	200012f0 	.word	0x200012f0
 80065e4:	2000000c 	.word	0x2000000c

080065e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  return uwTick;
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <HAL_GetTick+0x14>)
 80065ee:	681b      	ldr	r3, [r3, #0]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	200012f0 	.word	0x200012f0

08006600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006608:	f7ff ffee 	bl	80065e8 <HAL_GetTick>
 800660c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006618:	d004      	beq.n	8006624 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_Delay+0x40>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006624:	bf00      	nop
 8006626:	f7ff ffdf 	bl	80065e8 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	429a      	cmp	r2, r3
 8006634:	d8f7      	bhi.n	8006626 <HAL_Delay+0x26>
  {
  }
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	2000000c 	.word	0x2000000c

08006644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <__NVIC_SetPriorityGrouping+0x44>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006660:	4013      	ands	r3, r2
 8006662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800666c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006676:	4a04      	ldr	r2, [pc, #16]	; (8006688 <__NVIC_SetPriorityGrouping+0x44>)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	60d3      	str	r3, [r2, #12]
}
 800667c:	bf00      	nop
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	e000ed00 	.word	0xe000ed00

0800668c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006690:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <__NVIC_GetPriorityGrouping+0x18>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	0a1b      	lsrs	r3, r3, #8
 8006696:	f003 0307 	and.w	r3, r3, #7
}
 800669a:	4618      	mov	r0, r3
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	e000ed00 	.word	0xe000ed00

080066a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	db0b      	blt.n	80066d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	f003 021f 	and.w	r2, r3, #31
 80066c0:	4907      	ldr	r1, [pc, #28]	; (80066e0 <__NVIC_EnableIRQ+0x38>)
 80066c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	2001      	movs	r0, #1
 80066ca:	fa00 f202 	lsl.w	r2, r0, r2
 80066ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	e000e100 	.word	0xe000e100

080066e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	6039      	str	r1, [r7, #0]
 80066ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db0a      	blt.n	800670e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	490c      	ldr	r1, [pc, #48]	; (8006730 <__NVIC_SetPriority+0x4c>)
 80066fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006702:	0112      	lsls	r2, r2, #4
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	440b      	add	r3, r1
 8006708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800670c:	e00a      	b.n	8006724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4908      	ldr	r1, [pc, #32]	; (8006734 <__NVIC_SetPriority+0x50>)
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	3b04      	subs	r3, #4
 800671c:	0112      	lsls	r2, r2, #4
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	440b      	add	r3, r1
 8006722:	761a      	strb	r2, [r3, #24]
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	e000e100 	.word	0xe000e100
 8006734:	e000ed00 	.word	0xe000ed00

08006738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f1c3 0307 	rsb	r3, r3, #7
 8006752:	2b04      	cmp	r3, #4
 8006754:	bf28      	it	cs
 8006756:	2304      	movcs	r3, #4
 8006758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3304      	adds	r3, #4
 800675e:	2b06      	cmp	r3, #6
 8006760:	d902      	bls.n	8006768 <NVIC_EncodePriority+0x30>
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	3b03      	subs	r3, #3
 8006766:	e000      	b.n	800676a <NVIC_EncodePriority+0x32>
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800676c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	43da      	mvns	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	401a      	ands	r2, r3
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	fa01 f303 	lsl.w	r3, r1, r3
 800678a:	43d9      	mvns	r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006790:	4313      	orrs	r3, r2
         );
}
 8006792:	4618      	mov	r0, r3
 8006794:	3724      	adds	r7, #36	; 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b0:	d301      	bcc.n	80067b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067b2:	2301      	movs	r3, #1
 80067b4:	e00f      	b.n	80067d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067b6:	4a0a      	ldr	r2, [pc, #40]	; (80067e0 <SysTick_Config+0x40>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067be:	210f      	movs	r1, #15
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c4:	f7ff ff8e 	bl	80066e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <SysTick_Config+0x40>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <SysTick_Config+0x40>)
 80067d0:	2207      	movs	r2, #7
 80067d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	e000e010 	.word	0xe000e010

080067e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff ff29 	bl	8006644 <__NVIC_SetPriorityGrouping>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	4603      	mov	r3, r0
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
 8006806:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006808:	f7ff ff40 	bl	800668c <__NVIC_GetPriorityGrouping>
 800680c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	6978      	ldr	r0, [r7, #20]
 8006814:	f7ff ff90 	bl	8006738 <NVIC_EncodePriority>
 8006818:	4602      	mov	r2, r0
 800681a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff ff5f 	bl	80066e4 <__NVIC_SetPriority>
}
 8006826:	bf00      	nop
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	4603      	mov	r3, r0
 8006836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff ff33 	bl	80066a8 <__NVIC_EnableIRQ>
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff ffa4 	bl	80067a0 <SysTick_Config>
 8006858:	4603      	mov	r3, r0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e014      	b.n	800689e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	791b      	ldrb	r3, [r3, #4]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fb fb87 	bl	8001f98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068bc:	d120      	bne.n	8006900 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068cc:	d118      	bne.n	8006900 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2204      	movs	r2, #4
 80068d2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f043 0201 	orr.w	r2, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068f8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f82d 	bl	800695a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800690a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690e:	d120      	bne.n	8006952 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800691a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800691e:	d118      	bne.n	8006952 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2204      	movs	r2, #4
 8006924:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f043 0202 	orr.w	r2, r3, #2
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800693a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800694a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f9b7 	bl	8006cc0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
	...

08006970 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	795b      	ldrb	r3, [r3, #5]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_DAC_ConfigChannel+0x18>
 8006984:	2302      	movs	r3, #2
 8006986:	e192      	b.n	8006cae <HAL_DAC_ConfigChannel+0x33e>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2202      	movs	r2, #2
 8006992:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b04      	cmp	r3, #4
 800699a:	d174      	bne.n	8006a86 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800699c:	f7ff fe24 	bl	80065e8 <HAL_GetTick>
 80069a0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d134      	bne.n	8006a12 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80069a8:	e011      	b.n	80069ce <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80069aa:	f7ff fe1d 	bl	80065e8 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d90a      	bls.n	80069ce <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f043 0208 	orr.w	r2, r3, #8
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2203      	movs	r2, #3
 80069c8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e16f      	b.n	8006cae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e6      	bne.n	80069aa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80069dc:	2001      	movs	r0, #1
 80069de:	f7ff fe0f 	bl	8006600 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40
 80069ec:	e01e      	b.n	8006a2c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80069ee:	f7ff fdfb 	bl	80065e8 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d90a      	bls.n	8006a12 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f043 0208 	orr.w	r2, r3, #8
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2203      	movs	r2, #3
 8006a0c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e14d      	b.n	8006cae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dbe8      	blt.n	80069ee <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	f7ff fdef 	bl	8006600 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a2a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a40:	43db      	mvns	r3, r3
 8006a42:	ea02 0103 	and.w	r1, r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	409a      	lsls	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	21ff      	movs	r1, #255	; 0xff
 8006a68:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	ea02 0103 	and.w	r1, r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	409a      	lsls	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d11d      	bne.n	8006aca <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	221f      	movs	r2, #31
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	43db      	mvns	r3, r3
 8006aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f003 0310 	and.w	r3, r3, #16
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2207      	movs	r2, #7
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d102      	bne.n	8006af4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	623b      	str	r3, [r7, #32]
 8006af2:	e00f      	b.n	8006b14 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d102      	bne.n	8006b02 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006afc:	2301      	movs	r3, #1
 8006afe:	623b      	str	r3, [r7, #32]
 8006b00:	e008      	b.n	8006b14 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	623b      	str	r3, [r7, #32]
 8006b0e:	e001      	b.n	8006b14 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	43db      	mvns	r3, r3
 8006b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b36:	4013      	ands	r3, r2
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	791b      	ldrb	r3, [r3, #4]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d102      	bne.n	8006b48 <HAL_DAC_ConfigChannel+0x1d8>
 8006b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b46:	e000      	b.n	8006b4a <HAL_DAC_ConfigChannel+0x1da>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	43db      	mvns	r3, r3
 8006b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b62:	4013      	ands	r3, r2
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	795b      	ldrb	r3, [r3, #5]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d102      	bne.n	8006b74 <HAL_DAC_ConfigChannel+0x204>
 8006b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b72:	e000      	b.n	8006b76 <HAL_DAC_ConfigChannel+0x206>
 8006b74:	2300      	movs	r3, #0
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d114      	bne.n	8006bb6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006b8c:	f003 f8b8 	bl	8009d00 <HAL_RCC_GetHCLKFreq>
 8006b90:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4a48      	ldr	r2, [pc, #288]	; (8006cb8 <HAL_DAC_ConfigChannel+0x348>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d904      	bls.n	8006ba4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	e00f      	b.n	8006bc4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	4a45      	ldr	r2, [pc, #276]	; (8006cbc <HAL_DAC_ConfigChannel+0x34c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d90a      	bls.n	8006bc2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb4:	e006      	b.n	8006bc4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc0:	e000      	b.n	8006bc4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006bc2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	43da      	mvns	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	43db      	mvns	r3, r3
 8006c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c16:	4013      	ands	r3, r2
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f003 0310 	and.w	r3, r3, #16
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c38:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6819      	ldr	r1, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f003 0310 	and.w	r3, r3, #16
 8006c46:	22c0      	movs	r2, #192	; 0xc0
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	43da      	mvns	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	400a      	ands	r2, r1
 8006c54:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	089b      	lsrs	r3, r3, #2
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	089b      	lsrs	r3, r3, #2
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006c84:	fa01 f303 	lsl.w	r3, r1, r3
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	ea02 0103 	and.w	r1, r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	409a      	lsls	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3728      	adds	r7, #40	; 0x28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	09896800 	.word	0x09896800
 8006cbc:	04c4b400 	.word	0x04c4b400

08006cc0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e08d      	b.n	8006e02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	4b47      	ldr	r3, [pc, #284]	; (8006e0c <HAL_DMA_Init+0x138>)
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d80f      	bhi.n	8006d12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <HAL_DMA_Init+0x13c>)
 8006cfa:	4413      	add	r3, r2
 8006cfc:	4a45      	ldr	r2, [pc, #276]	; (8006e14 <HAL_DMA_Init+0x140>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	091b      	lsrs	r3, r3, #4
 8006d04:	009a      	lsls	r2, r3, #2
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a42      	ldr	r2, [pc, #264]	; (8006e18 <HAL_DMA_Init+0x144>)
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40
 8006d10:	e00e      	b.n	8006d30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	4b40      	ldr	r3, [pc, #256]	; (8006e1c <HAL_DMA_Init+0x148>)
 8006d1a:	4413      	add	r3, r2
 8006d1c:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <HAL_DMA_Init+0x140>)
 8006d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d22:	091b      	lsrs	r3, r3, #4
 8006d24:	009a      	lsls	r2, r3, #2
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <HAL_DMA_Init+0x14c>)
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa82 	bl	800728c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d90:	d102      	bne.n	8006d98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006dac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d010      	beq.n	8006dd8 <HAL_DMA_Init+0x104>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d80c      	bhi.n	8006dd8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 faa2 	bl	8007308 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006dd4:	605a      	str	r2, [r3, #4]
 8006dd6:	e008      	b.n	8006dea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40020407 	.word	0x40020407
 8006e10:	bffdfff8 	.word	0xbffdfff8
 8006e14:	cccccccd 	.word	0xcccccccd
 8006e18:	40020000 	.word	0x40020000
 8006e1c:	bffdfbf8 	.word	0xbffdfbf8
 8006e20:	40020400 	.word	0x40020400

08006e24 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_DMA_Start_IT+0x20>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e066      	b.n	8006f12 <HAL_DMA_Start_IT+0xee>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d155      	bne.n	8006f04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0201 	bic.w	r2, r2, #1
 8006e74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f9c7 	bl	8007210 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 020e 	orr.w	r2, r2, #14
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	e00f      	b.n	8006ebc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0204 	bic.w	r2, r2, #4
 8006eaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 020a 	orr.w	r2, r2, #10
 8006eba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ed8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ef0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0201 	orr.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e005      	b.n	8006f10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d005      	beq.n	8006f3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2204      	movs	r2, #4
 8006f36:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
 8006f3c:	e037      	b.n	8006fae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 020e 	bic.w	r2, r2, #14
 8006f4c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f5c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	f003 021f 	and.w	r2, r3, #31
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f80:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f8a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00c      	beq.n	8006fae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fa2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006fac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d00d      	beq.n	8007000 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]
 8006ffe:	e047      	b.n	8007090 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 020e 	bic.w	r2, r2, #14
 800700e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0201 	bic.w	r2, r2, #1
 800701e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800702a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800702e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007034:	f003 021f 	and.w	r2, r3, #31
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	2101      	movs	r1, #1
 800703e:	fa01 f202 	lsl.w	r2, r1, r2
 8007042:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800704c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00c      	beq.n	8007070 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007064:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800706e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	4798      	blx	r3
    }
  }
  return status;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	2204      	movs	r2, #4
 80070bc:	409a      	lsls	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4013      	ands	r3, r2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d026      	beq.n	8007114 <HAL_DMA_IRQHandler+0x7a>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d021      	beq.n	8007114 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d107      	bne.n	80070ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0204 	bic.w	r2, r2, #4
 80070ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f2:	f003 021f 	and.w	r2, r3, #31
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	2104      	movs	r1, #4
 80070fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007100:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	2b00      	cmp	r3, #0
 8007108:	d071      	beq.n	80071ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007112:	e06c      	b.n	80071ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007118:	f003 031f 	and.w	r3, r3, #31
 800711c:	2202      	movs	r2, #2
 800711e:	409a      	lsls	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4013      	ands	r3, r2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d02e      	beq.n	8007186 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d029      	beq.n	8007186 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 020a 	bic.w	r2, r2, #10
 800714e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	f003 021f 	and.w	r2, r3, #31
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	2102      	movs	r1, #2
 8007166:	fa01 f202 	lsl.w	r2, r1, r2
 800716a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	2b00      	cmp	r3, #0
 800717a:	d038      	beq.n	80071ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007184:	e033      	b.n	80071ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	2208      	movs	r2, #8
 8007190:	409a      	lsls	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4013      	ands	r3, r2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d02a      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d025      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 020e 	bic.w	r2, r2, #14
 80071b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b8:	f003 021f 	and.w	r2, r3, #31
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c0:	2101      	movs	r1, #1
 80071c2:	fa01 f202 	lsl.w	r2, r1, r2
 80071c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
}
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007226:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722c:	2b00      	cmp	r3, #0
 800722e:	d004      	beq.n	800723a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007238:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	f003 021f 	and.w	r2, r3, #31
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	2101      	movs	r1, #1
 8007248:	fa01 f202 	lsl.w	r2, r1, r2
 800724c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b10      	cmp	r3, #16
 800725c:	d108      	bne.n	8007270 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800726e:	e007      	b.n	8007280 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	60da      	str	r2, [r3, #12]
}
 8007280:	bf00      	nop
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	4b16      	ldr	r3, [pc, #88]	; (80072f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800729c:	429a      	cmp	r2, r3
 800729e:	d802      	bhi.n	80072a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80072a0:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e001      	b.n	80072aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80072a6:	4b15      	ldr	r3, [pc, #84]	; (80072fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80072a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	3b08      	subs	r3, #8
 80072b6:	4a12      	ldr	r2, [pc, #72]	; (8007300 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80072b8:	fba2 2303 	umull	r2, r3, r2, r3
 80072bc:	091b      	lsrs	r3, r3, #4
 80072be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c4:	089b      	lsrs	r3, r3, #2
 80072c6:	009a      	lsls	r2, r3, #2
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	4413      	add	r3, r2
 80072cc:	461a      	mov	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a0b      	ldr	r2, [pc, #44]	; (8007304 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80072d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 031f 	and.w	r3, r3, #31
 80072de:	2201      	movs	r2, #1
 80072e0:	409a      	lsls	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40020407 	.word	0x40020407
 80072f8:	40020800 	.word	0x40020800
 80072fc:	40020820 	.word	0x40020820
 8007300:	cccccccd 	.word	0xcccccccd
 8007304:	40020880 	.word	0x40020880

08007308 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	461a      	mov	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a08      	ldr	r2, [pc, #32]	; (800734c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800732a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3b01      	subs	r3, #1
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	2201      	movs	r2, #1
 8007336:	409a      	lsls	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800733c:	bf00      	nop
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	1000823f 	.word	0x1000823f
 800734c:	40020940 	.word	0x40020940

08007350 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e147      	b.n	80075f2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fa fe54 	bl	8002024 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0210 	bic.w	r2, r2, #16
 800738a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800738c:	f7ff f92c 	bl	80065e8 <HAL_GetTick>
 8007390:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007392:	e012      	b.n	80073ba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007394:	f7ff f928 	bl	80065e8 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b0a      	cmp	r3, #10
 80073a0:	d90b      	bls.n	80073ba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a6:	f043 0201 	orr.w	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2203      	movs	r2, #3
 80073b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e11b      	b.n	80075f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d0e5      	beq.n	8007394 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073d8:	f7ff f906 	bl	80065e8 <HAL_GetTick>
 80073dc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80073de:	e012      	b.n	8007406 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80073e0:	f7ff f902 	bl	80065e8 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b0a      	cmp	r3, #10
 80073ec:	d90b      	bls.n	8007406 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f2:	f043 0201 	orr.w	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2203      	movs	r2, #3
 80073fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e0f5      	b.n	80075f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0e5      	beq.n	80073e0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0202 	orr.w	r2, r2, #2
 8007422:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a74      	ldr	r2, [pc, #464]	; (80075fc <HAL_FDCAN_Init+0x2ac>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d103      	bne.n	8007436 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800742e:	4a74      	ldr	r2, [pc, #464]	; (8007600 <HAL_FDCAN_Init+0x2b0>)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7c1b      	ldrb	r3, [r3, #16]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d108      	bne.n	8007450 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699a      	ldr	r2, [r3, #24]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744c:	619a      	str	r2, [r3, #24]
 800744e:	e007      	b.n	8007460 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800745e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	7c5b      	ldrb	r3, [r3, #17]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d108      	bne.n	800747a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007476:	619a      	str	r2, [r3, #24]
 8007478:	e007      	b.n	800748a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	699a      	ldr	r2, [r3, #24]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007488:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7c9b      	ldrb	r3, [r3, #18]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d108      	bne.n	80074a4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699a      	ldr	r2, [r3, #24]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074a0:	619a      	str	r2, [r3, #24]
 80074a2:	e007      	b.n	80074b4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074b2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699a      	ldr	r2, [r3, #24]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80074d8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691a      	ldr	r2, [r3, #16]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0210 	bic.w	r2, r2, #16
 80074e8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d108      	bne.n	8007504 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0204 	orr.w	r2, r2, #4
 8007500:	619a      	str	r2, [r3, #24]
 8007502:	e02c      	b.n	800755e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d028      	beq.n	800755e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d01c      	beq.n	800754e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007522:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0210 	orr.w	r2, r2, #16
 8007532:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d110      	bne.n	800755e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0220 	orr.w	r2, r2, #32
 800754a:	619a      	str	r2, [r3, #24]
 800754c:	e007      	b.n	800755e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	699a      	ldr	r2, [r3, #24]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 0220 	orr.w	r2, r2, #32
 800755c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	3b01      	subs	r3, #1
 8007564:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	3b01      	subs	r3, #1
 800756c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800756e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007576:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	3b01      	subs	r3, #1
 8007580:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007586:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007588:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007592:	d115      	bne.n	80075c0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	3b01      	subs	r3, #1
 80075a0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80075a2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	3b01      	subs	r3, #1
 80075aa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80075ac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	3b01      	subs	r3, #1
 80075b6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80075bc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80075be:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fc80 	bl	8007edc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	40006400 	.word	0x40006400
 8007600:	40006500 	.word	0x40006500

08007604 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007614:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d002      	beq.n	8007622 <HAL_FDCAN_ConfigFilter+0x1e>
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d13d      	bne.n	800769e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d119      	bne.n	800765e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007636:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800763e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	e01d      	b.n	800769a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	075a      	lsls	r2, r3, #29
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	079a      	lsls	r2, r3, #30
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	4413      	add	r3, r2
 8007686:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3304      	adds	r3, #4
 8007692:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	e006      	b.n	80076ac <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a2:	f043 0202 	orr.w	r2, r3, #2
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
  }
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d116      	bne.n	8007700 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076da:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	011a      	lsls	r2, r3, #4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	431a      	orrs	r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	431a      	orrs	r2, r3
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	431a      	orrs	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e006      	b.n	800770e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007704:	f043 0204 	orr.w	r2, r3, #4
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
  }
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b01      	cmp	r3, #1
 800772c:	d110      	bne.n	8007750 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699a      	ldr	r2, [r3, #24]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	e006      	b.n	800775e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	f043 0204 	orr.w	r2, r3, #4
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b086      	sub	sp, #24
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d12c      	bne.n	80077dc <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800778a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007796:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e023      	b.n	80077ea <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80077aa:	0c1b      	lsrs	r3, r3, #16
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 fbe5 	bl	8007f88 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2101      	movs	r1, #1
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	fa01 f202 	lsl.w	r2, r1, r2
 80077ca:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80077ce:	2201      	movs	r2, #1
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	409a      	lsls	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	e006      	b.n	80077ea <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e0:	f043 0208 	orr.w	r2, r3, #8
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
  }
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b08b      	sub	sp, #44	; 0x2c
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007808:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800780a:	7efb      	ldrb	r3, [r7, #27]
 800780c:	2b02      	cmp	r3, #2
 800780e:	f040 80bc 	bne.w	800798a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b40      	cmp	r3, #64	; 0x40
 8007816:	d121      	bne.n	800785c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	2b00      	cmp	r3, #0
 8007826:	d107      	bne.n	8007838 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e0af      	b.n	8007998 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007840:	0a1b      	lsrs	r3, r3, #8
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	4613      	mov	r3, r2
 8007850:	00db      	lsls	r3, r3, #3
 8007852:	4413      	add	r3, r2
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	440b      	add	r3, r1
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
 800785a:	e020      	b.n	800789e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007864:	f003 030f 	and.w	r3, r3, #15
 8007868:	2b00      	cmp	r3, #0
 800786a:	d107      	bne.n	800787c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e08d      	b.n	8007998 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007884:	0a1b      	lsrs	r3, r3, #8
 8007886:	f003 0303 	and.w	r3, r3, #3
 800788a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	4613      	mov	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	4413      	add	r3, r2
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	440b      	add	r3, r1
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d107      	bne.n	80078c2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	0c9b      	lsrs	r3, r3, #18
 80078b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	e005      	b.n	80078ce <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	3304      	adds	r3, #4
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	0e1b      	lsrs	r3, r3, #24
 8007920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	0fda      	lsrs	r2, r3, #31
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	3304      	adds	r3, #4
 8007936:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800793c:	2300      	movs	r3, #0
 800793e:	623b      	str	r3, [r7, #32]
 8007940:	e00a      	b.n	8007958 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	441a      	add	r2, r3
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	440b      	add	r3, r1
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	3301      	adds	r3, #1
 8007956:	623b      	str	r3, [r7, #32]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	0c1b      	lsrs	r3, r3, #16
 800795e:	4a11      	ldr	r2, [pc, #68]	; (80079a4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007960:	5cd3      	ldrb	r3, [r2, r3]
 8007962:	461a      	mov	r2, r3
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	4293      	cmp	r3, r2
 8007968:	d3eb      	bcc.n	8007942 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b40      	cmp	r3, #64	; 0x40
 800796e:	d105      	bne.n	800797c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800797a:	e004      	b.n	8007986 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e006      	b.n	8007998 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800798e:	f043 0208 	orr.w	r2, r3, #8
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	372c      	adds	r7, #44	; 0x2c
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	08011ff8 	.word	0x08011ff8

080079a8 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80079b8:	f003 0307 	and.w	r3, r3, #7
 80079bc:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80079be:	68fb      	ldr	r3, [r7, #12]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079de:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d003      	beq.n	80079ee <HAL_FDCAN_ActivateNotification+0x22>
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	f040 80c8 	bne.w	8007b7e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f003 0307 	and.w	r3, r3, #7
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d03b      	beq.n	8007a82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d004      	beq.n	8007a1e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d031      	beq.n	8007a82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d004      	beq.n	8007a32 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d027      	beq.n	8007a82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d01d      	beq.n	8007a82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d004      	beq.n	8007a5a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d013      	beq.n	8007a82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00c      	beq.n	8007a92 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d107      	bne.n	8007a92 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0201 	orr.w	r2, r2, #1
 8007a90:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d004      	beq.n	8007aa6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d13b      	bne.n	8007b1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d004      	beq.n	8007aba <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d131      	bne.n	8007b1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f003 0304 	and.w	r3, r3, #4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d127      	bne.n	8007b1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d11d      	bne.n	8007b1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d113      	bne.n	8007b1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00c      	beq.n	8007b2e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0202 	orr.w	r2, r2, #2
 8007b2c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d009      	beq.n	8007b4c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d009      	beq.n	8007b6a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e006      	b.n	8007b8c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b82:	f043 0202 	orr.w	r2, r3, #2
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
  }
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bda:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	4013      	ands	r3, r2
 8007be6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bee:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8007bf2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007c0a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4013      	ands	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d006      	beq.n	8007c42 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2240      	movs	r2, #64	; 0x40
 8007c3a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f92e 	bl	8007e9e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01b      	beq.n	8007c88 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d014      	beq.n	8007c88 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007c66:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4013      	ands	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c7e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007c80:	6939      	ldr	r1, [r7, #16]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8ec 	bl	8007e60 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c94:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f8b6 	bl	8007e0a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6a3a      	ldr	r2, [r7, #32]
 8007caa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007cac:	6a39      	ldr	r1, [r7, #32]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7f9 fc20 	bl	80014f4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d007      	beq.n	8007cca <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007cc2:	69f9      	ldr	r1, [r7, #28]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f8ab 	bl	8007e20 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f8a0 	bl	8007e36 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01a      	beq.n	8007d3a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d013      	beq.n	8007d3a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007d1a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4013      	ands	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2280      	movs	r2, #128	; 0x80
 8007d30:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f888 	bl	8007e4a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00e      	beq.n	8007d66 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d007      	beq.n	8007d66 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d5e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f888 	bl	8007e76 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00e      	beq.n	8007d92 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007d8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f87c 	bl	8007e8a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d011      	beq.n	8007dc4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007db6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d007      	beq.n	8007dda <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007dd2:	6979      	ldr	r1, [r7, #20]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f876 	bl	8007ec6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d009      	beq.n	8007df4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f858 	bl	8007eb2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007e02:	bf00      	nop
 8007e04:	3728      	adds	r7, #40	; 0x28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007ee4:	4b27      	ldr	r3, [pc, #156]	; (8007f84 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007ee6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ef6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efe:	041a      	lsls	r2, r3, #16
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f1c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	061a      	lsls	r2, r3, #24
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	e005      	b.n	8007f6a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3304      	adds	r3, #4
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d3f3      	bcc.n	8007f5e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007f76:	bf00      	nop
 8007f78:	bf00      	nop
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	4000a400 	.word	0x4000a400

08007f88 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b089      	sub	sp, #36	; 0x24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007fa6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	e00a      	b.n	8007fca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007fbc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007fc2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fc8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007fd4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007fda:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007fe0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	440b      	add	r3, r1
 8007ffa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	3304      	adds	r3, #4
 8008006:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	3304      	adds	r3, #4
 8008012:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	e020      	b.n	800805c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	3303      	adds	r3, #3
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4413      	add	r3, r2
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	3302      	adds	r3, #2
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	440b      	add	r3, r1
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008032:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	3301      	adds	r3, #1
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	440b      	add	r3, r1
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008040:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	440a      	add	r2, r1
 8008048:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800804a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	3304      	adds	r3, #4
 8008054:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	3304      	adds	r3, #4
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	0c1b      	lsrs	r3, r3, #16
 8008062:	4a06      	ldr	r2, [pc, #24]	; (800807c <FDCAN_CopyMessageToRAM+0xf4>)
 8008064:	5cd3      	ldrb	r3, [r2, r3]
 8008066:	461a      	mov	r2, r3
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	4293      	cmp	r3, r2
 800806c:	d3d5      	bcc.n	800801a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	3724      	adds	r7, #36	; 0x24
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	08011ff8 	.word	0x08011ff8

08008080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800808e:	e15a      	b.n	8008346 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	2101      	movs	r1, #1
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	4013      	ands	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 814c 	beq.w	8008340 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d005      	beq.n	80080c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d130      	bne.n	8008122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	2203      	movs	r2, #3
 80080cc:	fa02 f303 	lsl.w	r3, r2, r3
 80080d0:	43db      	mvns	r3, r3
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	4013      	ands	r3, r2
 80080d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080f6:	2201      	movs	r2, #1
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	43db      	mvns	r3, r3
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	4013      	ands	r3, r2
 8008104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	091b      	lsrs	r3, r3, #4
 800810c:	f003 0201 	and.w	r2, r3, #1
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	fa02 f303 	lsl.w	r3, r2, r3
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	4313      	orrs	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b03      	cmp	r3, #3
 800812c:	d017      	beq.n	800815e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	2203      	movs	r2, #3
 800813a:	fa02 f303 	lsl.w	r3, r2, r3
 800813e:	43db      	mvns	r3, r3
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4013      	ands	r3, r2
 8008144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	005b      	lsls	r3, r3, #1
 800814e:	fa02 f303 	lsl.w	r3, r2, r3
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d123      	bne.n	80081b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	08da      	lsrs	r2, r3, #3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3208      	adds	r2, #8
 8008172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	220f      	movs	r2, #15
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	43db      	mvns	r3, r3
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4013      	ands	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	691a      	ldr	r2, [r3, #16]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	08da      	lsrs	r2, r3, #3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3208      	adds	r2, #8
 80081ac:	6939      	ldr	r1, [r7, #16]
 80081ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	2203      	movs	r2, #3
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	43db      	mvns	r3, r3
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	4013      	ands	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f003 0203 	and.w	r2, r3, #3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	fa02 f303 	lsl.w	r3, r2, r3
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80a6 	beq.w	8008340 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081f4:	4b5b      	ldr	r3, [pc, #364]	; (8008364 <HAL_GPIO_Init+0x2e4>)
 80081f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f8:	4a5a      	ldr	r2, [pc, #360]	; (8008364 <HAL_GPIO_Init+0x2e4>)
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	6613      	str	r3, [r2, #96]	; 0x60
 8008200:	4b58      	ldr	r3, [pc, #352]	; (8008364 <HAL_GPIO_Init+0x2e4>)
 8008202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	60bb      	str	r3, [r7, #8]
 800820a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800820c:	4a56      	ldr	r2, [pc, #344]	; (8008368 <HAL_GPIO_Init+0x2e8>)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	089b      	lsrs	r3, r3, #2
 8008212:	3302      	adds	r3, #2
 8008214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	220f      	movs	r2, #15
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	43db      	mvns	r3, r3
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	4013      	ands	r3, r2
 800822e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008236:	d01f      	beq.n	8008278 <HAL_GPIO_Init+0x1f8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a4c      	ldr	r2, [pc, #304]	; (800836c <HAL_GPIO_Init+0x2ec>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d019      	beq.n	8008274 <HAL_GPIO_Init+0x1f4>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a4b      	ldr	r2, [pc, #300]	; (8008370 <HAL_GPIO_Init+0x2f0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d013      	beq.n	8008270 <HAL_GPIO_Init+0x1f0>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a4a      	ldr	r2, [pc, #296]	; (8008374 <HAL_GPIO_Init+0x2f4>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00d      	beq.n	800826c <HAL_GPIO_Init+0x1ec>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a49      	ldr	r2, [pc, #292]	; (8008378 <HAL_GPIO_Init+0x2f8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d007      	beq.n	8008268 <HAL_GPIO_Init+0x1e8>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a48      	ldr	r2, [pc, #288]	; (800837c <HAL_GPIO_Init+0x2fc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d101      	bne.n	8008264 <HAL_GPIO_Init+0x1e4>
 8008260:	2305      	movs	r3, #5
 8008262:	e00a      	b.n	800827a <HAL_GPIO_Init+0x1fa>
 8008264:	2306      	movs	r3, #6
 8008266:	e008      	b.n	800827a <HAL_GPIO_Init+0x1fa>
 8008268:	2304      	movs	r3, #4
 800826a:	e006      	b.n	800827a <HAL_GPIO_Init+0x1fa>
 800826c:	2303      	movs	r3, #3
 800826e:	e004      	b.n	800827a <HAL_GPIO_Init+0x1fa>
 8008270:	2302      	movs	r3, #2
 8008272:	e002      	b.n	800827a <HAL_GPIO_Init+0x1fa>
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <HAL_GPIO_Init+0x1fa>
 8008278:	2300      	movs	r3, #0
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	f002 0203 	and.w	r2, r2, #3
 8008280:	0092      	lsls	r2, r2, #2
 8008282:	4093      	lsls	r3, r2
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800828a:	4937      	ldr	r1, [pc, #220]	; (8008368 <HAL_GPIO_Init+0x2e8>)
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	089b      	lsrs	r3, r3, #2
 8008290:	3302      	adds	r3, #2
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008298:	4b39      	ldr	r3, [pc, #228]	; (8008380 <HAL_GPIO_Init+0x300>)
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	43db      	mvns	r3, r3
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	4013      	ands	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80082bc:	4a30      	ldr	r2, [pc, #192]	; (8008380 <HAL_GPIO_Init+0x300>)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80082c2:	4b2f      	ldr	r3, [pc, #188]	; (8008380 <HAL_GPIO_Init+0x300>)
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	43db      	mvns	r3, r3
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4013      	ands	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082e6:	4a26      	ldr	r2, [pc, #152]	; (8008380 <HAL_GPIO_Init+0x300>)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80082ec:	4b24      	ldr	r3, [pc, #144]	; (8008380 <HAL_GPIO_Init+0x300>)
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	43db      	mvns	r3, r3
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	4013      	ands	r3, r2
 80082fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008310:	4a1b      	ldr	r2, [pc, #108]	; (8008380 <HAL_GPIO_Init+0x300>)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008316:	4b1a      	ldr	r3, [pc, #104]	; (8008380 <HAL_GPIO_Init+0x300>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	43db      	mvns	r3, r3
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4013      	ands	r3, r2
 8008324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800833a:	4a11      	ldr	r2, [pc, #68]	; (8008380 <HAL_GPIO_Init+0x300>)
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	3301      	adds	r3, #1
 8008344:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	fa22 f303 	lsr.w	r3, r2, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	f47f ae9d 	bne.w	8008090 <HAL_GPIO_Init+0x10>
  }
}
 8008356:	bf00      	nop
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	40021000 	.word	0x40021000
 8008368:	40010000 	.word	0x40010000
 800836c:	48000400 	.word	0x48000400
 8008370:	48000800 	.word	0x48000800
 8008374:	48000c00 	.word	0x48000c00
 8008378:	48001000 	.word	0x48001000
 800837c:	48001400 	.word	0x48001400
 8008380:	40010400 	.word	0x40010400

08008384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	887b      	ldrh	r3, [r7, #2]
 8008396:	4013      	ands	r3, r2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800839c:	2301      	movs	r3, #1
 800839e:	73fb      	strb	r3, [r7, #15]
 80083a0:	e001      	b.n	80083a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	807b      	strh	r3, [r7, #2]
 80083c0:	4613      	mov	r3, r2
 80083c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80083c4:	787b      	ldrb	r3, [r7, #1]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80083ca:	887a      	ldrh	r2, [r7, #2]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80083d0:	e002      	b.n	80083d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80083d2:	887a      	ldrh	r2, [r7, #2]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80083f6:	887a      	ldrh	r2, [r7, #2]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4013      	ands	r3, r2
 80083fc:	041a      	lsls	r2, r3, #16
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	43d9      	mvns	r1, r3
 8008402:	887b      	ldrh	r3, [r7, #2]
 8008404:	400b      	ands	r3, r1
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	619a      	str	r2, [r3, #24]
}
 800840c:	bf00      	nop
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008422:	4b08      	ldr	r3, [pc, #32]	; (8008444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008424:	695a      	ldr	r2, [r3, #20]
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	4013      	ands	r3, r2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d006      	beq.n	800843c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800842e:	4a05      	ldr	r2, [pc, #20]	; (8008444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	4618      	mov	r0, r3
 8008438:	f7f8 ffee 	bl	8001418 <HAL_GPIO_EXTI_Callback>
  }
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	40010400 	.word	0x40010400

08008448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e081      	b.n	800855e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d106      	bne.n	8008474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7f9 fe3a 	bl	80020e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2224      	movs	r2, #36	; 0x24
 8008478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 0201 	bic.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008498:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d107      	bne.n	80084c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	689a      	ldr	r2, [r3, #8]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084be:	609a      	str	r2, [r3, #8]
 80084c0:	e006      	b.n	80084d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d104      	bne.n	80084e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80084f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68da      	ldr	r2, [r3, #12]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008504:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691a      	ldr	r2, [r3, #16]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	69d9      	ldr	r1, [r3, #28]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1a      	ldr	r2, [r3, #32]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2220      	movs	r2, #32
 800854a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af02      	add	r7, sp, #8
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	4608      	mov	r0, r1
 8008572:	4611      	mov	r1, r2
 8008574:	461a      	mov	r2, r3
 8008576:	4603      	mov	r3, r0
 8008578:	817b      	strh	r3, [r7, #10]
 800857a:	460b      	mov	r3, r1
 800857c:	813b      	strh	r3, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b20      	cmp	r3, #32
 800858c:	f040 80f9 	bne.w	8008782 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <HAL_I2C_Mem_Write+0x34>
 8008596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d105      	bne.n	80085a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e0ed      	b.n	8008784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d101      	bne.n	80085b6 <HAL_I2C_Mem_Write+0x4e>
 80085b2:	2302      	movs	r3, #2
 80085b4:	e0e6      	b.n	8008784 <HAL_I2C_Mem_Write+0x21c>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085be:	f7fe f813 	bl	80065e8 <HAL_GetTick>
 80085c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	2319      	movs	r3, #25
 80085ca:	2201      	movs	r2, #1
 80085cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 fbcb 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e0d1      	b.n	8008784 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2221      	movs	r2, #33	; 0x21
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2240      	movs	r2, #64	; 0x40
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a3a      	ldr	r2, [r7, #32]
 80085fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008608:	88f8      	ldrh	r0, [r7, #6]
 800860a:	893a      	ldrh	r2, [r7, #8]
 800860c:	8979      	ldrh	r1, [r7, #10]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	4603      	mov	r3, r0
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 fadb 	bl	8008bd4 <I2C_RequestMemoryWrite>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e0a9      	b.n	8008784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008634:	b29b      	uxth	r3, r3
 8008636:	2bff      	cmp	r3, #255	; 0xff
 8008638:	d90e      	bls.n	8008658 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	22ff      	movs	r2, #255	; 0xff
 800863e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008644:	b2da      	uxtb	r2, r3
 8008646:	8979      	ldrh	r1, [r7, #10]
 8008648:	2300      	movs	r3, #0
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 fd33 	bl	80090bc <I2C_TransferConfig>
 8008656:	e00f      	b.n	8008678 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800865c:	b29a      	uxth	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008666:	b2da      	uxtb	r2, r3
 8008668:	8979      	ldrh	r1, [r7, #10]
 800866a:	2300      	movs	r3, #0
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fd22 	bl	80090bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fbb5 	bl	8008dec <I2C_WaitOnTXISFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e07b      	b.n	8008784 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	781a      	ldrb	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	3b01      	subs	r3, #1
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b4:	3b01      	subs	r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d034      	beq.n	8008730 <HAL_I2C_Mem_Write+0x1c8>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d130      	bne.n	8008730 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	2200      	movs	r2, #0
 80086d6:	2180      	movs	r1, #128	; 0x80
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 fb47 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e04d      	b.n	8008784 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2bff      	cmp	r3, #255	; 0xff
 80086f0:	d90e      	bls.n	8008710 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	22ff      	movs	r2, #255	; 0xff
 80086f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	8979      	ldrh	r1, [r7, #10]
 8008700:	2300      	movs	r3, #0
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 fcd7 	bl	80090bc <I2C_TransferConfig>
 800870e:	e00f      	b.n	8008730 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008714:	b29a      	uxth	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800871e:	b2da      	uxtb	r2, r3
 8008720:	8979      	ldrh	r1, [r7, #10]
 8008722:	2300      	movs	r3, #0
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 fcc6 	bl	80090bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d19e      	bne.n	8008678 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 fb94 	bl	8008e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e01a      	b.n	8008784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2220      	movs	r2, #32
 8008754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6859      	ldr	r1, [r3, #4]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4b0a      	ldr	r3, [pc, #40]	; (800878c <HAL_I2C_Mem_Write+0x224>)
 8008762:	400b      	ands	r3, r1
 8008764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	e000      	b.n	8008784 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008782:	2302      	movs	r3, #2
  }
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	fe00e800 	.word	0xfe00e800

08008790 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af02      	add	r7, sp, #8
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	4608      	mov	r0, r1
 800879a:	4611      	mov	r1, r2
 800879c:	461a      	mov	r2, r3
 800879e:	4603      	mov	r3, r0
 80087a0:	817b      	strh	r3, [r7, #10]
 80087a2:	460b      	mov	r3, r1
 80087a4:	813b      	strh	r3, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	f040 80fd 	bne.w	80089b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <HAL_I2C_Mem_Read+0x34>
 80087be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d105      	bne.n	80087d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e0f1      	b.n	80089b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d101      	bne.n	80087de <HAL_I2C_Mem_Read+0x4e>
 80087da:	2302      	movs	r3, #2
 80087dc:	e0ea      	b.n	80089b4 <HAL_I2C_Mem_Read+0x224>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087e6:	f7fd feff 	bl	80065e8 <HAL_GetTick>
 80087ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	2319      	movs	r3, #25
 80087f2:	2201      	movs	r2, #1
 80087f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 fab7 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0d5      	b.n	80089b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2222      	movs	r2, #34	; 0x22
 800880c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2240      	movs	r2, #64	; 0x40
 8008814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a3a      	ldr	r2, [r7, #32]
 8008822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008830:	88f8      	ldrh	r0, [r7, #6]
 8008832:	893a      	ldrh	r2, [r7, #8]
 8008834:	8979      	ldrh	r1, [r7, #10]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	4603      	mov	r3, r0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 fa1b 	bl	8008c7c <I2C_RequestMemoryRead>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d005      	beq.n	8008858 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e0ad      	b.n	80089b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885c:	b29b      	uxth	r3, r3
 800885e:	2bff      	cmp	r3, #255	; 0xff
 8008860:	d90e      	bls.n	8008880 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	22ff      	movs	r2, #255	; 0xff
 8008866:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886c:	b2da      	uxtb	r2, r3
 800886e:	8979      	ldrh	r1, [r7, #10]
 8008870:	4b52      	ldr	r3, [pc, #328]	; (80089bc <HAL_I2C_Mem_Read+0x22c>)
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fc1f 	bl	80090bc <I2C_TransferConfig>
 800887e:	e00f      	b.n	80088a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888e:	b2da      	uxtb	r2, r3
 8008890:	8979      	ldrh	r1, [r7, #10]
 8008892:	4b4a      	ldr	r3, [pc, #296]	; (80089bc <HAL_I2C_Mem_Read+0x22c>)
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fc0e 	bl	80090bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	2200      	movs	r2, #0
 80088a8:	2104      	movs	r1, #4
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 fa5e 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e07c      	b.n	80089b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	b2d2      	uxtb	r2, r2
 80088c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d6:	3b01      	subs	r3, #1
 80088d8:	b29a      	uxth	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d034      	beq.n	8008960 <HAL_I2C_Mem_Read+0x1d0>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d130      	bne.n	8008960 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	2200      	movs	r2, #0
 8008906:	2180      	movs	r1, #128	; 0x80
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 fa2f 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e04d      	b.n	80089b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800891c:	b29b      	uxth	r3, r3
 800891e:	2bff      	cmp	r3, #255	; 0xff
 8008920:	d90e      	bls.n	8008940 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	22ff      	movs	r2, #255	; 0xff
 8008926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800892c:	b2da      	uxtb	r2, r3
 800892e:	8979      	ldrh	r1, [r7, #10]
 8008930:	2300      	movs	r3, #0
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fbbf 	bl	80090bc <I2C_TransferConfig>
 800893e:	e00f      	b.n	8008960 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800894e:	b2da      	uxtb	r2, r3
 8008950:	8979      	ldrh	r1, [r7, #10]
 8008952:	2300      	movs	r3, #0
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fbae 	bl	80090bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d19a      	bne.n	80088a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 fa7c 	bl	8008e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e01a      	b.n	80089b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2220      	movs	r2, #32
 8008984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6859      	ldr	r1, [r3, #4]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <HAL_I2C_Mem_Read+0x230>)
 8008992:	400b      	ands	r3, r1
 8008994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e000      	b.n	80089b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80089b2:	2302      	movs	r3, #2
  }
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	80002400 	.word	0x80002400
 80089c0:	fe00e800 	.word	0xfe00e800

080089c4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	; 0x28
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	607a      	str	r2, [r7, #4]
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	460b      	mov	r3, r1
 80089d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	f040 80f1 	bne.w	8008bc8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f4:	d101      	bne.n	80089fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80089f6:	2302      	movs	r3, #2
 80089f8:	e0e7      	b.n	8008bca <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d101      	bne.n	8008a08 <HAL_I2C_IsDeviceReady+0x44>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e0e0      	b.n	8008bca <HAL_I2C_IsDeviceReady+0x206>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2224      	movs	r2, #36	; 0x24
 8008a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d107      	bne.n	8008a36 <HAL_I2C_IsDeviceReady+0x72>
 8008a26:	897b      	ldrh	r3, [r7, #10]
 8008a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a34:	e004      	b.n	8008a40 <HAL_I2C_IsDeviceReady+0x7c>
 8008a36:	897b      	ldrh	r3, [r7, #10]
 8008a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a3c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	6812      	ldr	r2, [r2, #0]
 8008a44:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008a46:	f7fd fdcf 	bl	80065e8 <HAL_GetTick>
 8008a4a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	bf0c      	ite	eq
 8008a5a:	2301      	moveq	r3, #1
 8008a5c:	2300      	movne	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	f003 0310 	and.w	r3, r3, #16
 8008a6c:	2b10      	cmp	r3, #16
 8008a6e:	bf0c      	ite	eq
 8008a70:	2301      	moveq	r3, #1
 8008a72:	2300      	movne	r3, #0
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008a78:	e034      	b.n	8008ae4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a80:	d01a      	beq.n	8008ab8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a82:	f7fd fdb1 	bl	80065e8 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d302      	bcc.n	8008a98 <HAL_I2C_IsDeviceReady+0xd4>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10f      	bne.n	8008ab8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa4:	f043 0220 	orr.w	r2, r3, #32
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e088      	b.n	8008bca <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	bf0c      	ite	eq
 8008ac6:	2301      	moveq	r3, #1
 8008ac8:	2300      	movne	r3, #0
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f003 0310 	and.w	r3, r3, #16
 8008ad8:	2b10      	cmp	r3, #16
 8008ada:	bf0c      	ite	eq
 8008adc:	2301      	moveq	r3, #1
 8008ade:	2300      	movne	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008ae4:	7ffb      	ldrb	r3, [r7, #31]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <HAL_I2C_IsDeviceReady+0x12c>
 8008aea:	7fbb      	ldrb	r3, [r7, #30]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0c4      	beq.n	8008a7a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f003 0310 	and.w	r3, r3, #16
 8008afa:	2b10      	cmp	r3, #16
 8008afc:	d01a      	beq.n	8008b34 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2200      	movs	r2, #0
 8008b06:	2120      	movs	r1, #32
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f92f 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e058      	b.n	8008bca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	e04a      	b.n	8008bca <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2120      	movs	r1, #32
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 f914 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e03d      	b.n	8008bca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2210      	movs	r2, #16
 8008b54:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d118      	bne.n	8008b98 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b74:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2120      	movs	r1, #32
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 f8f3 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e01c      	b.n	8008bca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2220      	movs	r2, #32
 8008b96:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	f63f af3b 	bhi.w	8008a1e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2220      	movs	r2, #32
 8008bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb4:	f043 0220 	orr.w	r2, r3, #32
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008bc8:	2302      	movs	r3, #2
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3720      	adds	r7, #32
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af02      	add	r7, sp, #8
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	4608      	mov	r0, r1
 8008bde:	4611      	mov	r1, r2
 8008be0:	461a      	mov	r2, r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	817b      	strh	r3, [r7, #10]
 8008be6:	460b      	mov	r3, r1
 8008be8:	813b      	strh	r3, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	8979      	ldrh	r1, [r7, #10]
 8008bf4:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <I2C_RequestMemoryWrite+0xa4>)
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fa5d 	bl	80090bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	69b9      	ldr	r1, [r7, #24]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f8f0 	bl	8008dec <I2C_WaitOnTXISFlagUntilTimeout>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e02c      	b.n	8008c70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d105      	bne.n	8008c28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c1c:	893b      	ldrh	r3, [r7, #8]
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	629a      	str	r2, [r3, #40]	; 0x28
 8008c26:	e015      	b.n	8008c54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c28:	893b      	ldrh	r3, [r7, #8]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	69b9      	ldr	r1, [r7, #24]
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f8d6 	bl	8008dec <I2C_WaitOnTXISFlagUntilTimeout>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e012      	b.n	8008c70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c4a:	893b      	ldrh	r3, [r7, #8]
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2180      	movs	r1, #128	; 0x80
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 f884 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	80002000 	.word	0x80002000

08008c7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	4608      	mov	r0, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	817b      	strh	r3, [r7, #10]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	813b      	strh	r3, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008c96:	88fb      	ldrh	r3, [r7, #6]
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	8979      	ldrh	r1, [r7, #10]
 8008c9c:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <I2C_RequestMemoryRead+0xa4>)
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fa0a 	bl	80090bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ca8:	69fa      	ldr	r2, [r7, #28]
 8008caa:	69b9      	ldr	r1, [r7, #24]
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 f89d 	bl	8008dec <I2C_WaitOnTXISFlagUntilTimeout>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e02c      	b.n	8008d16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cbc:	88fb      	ldrh	r3, [r7, #6]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d105      	bne.n	8008cce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cc2:	893b      	ldrh	r3, [r7, #8]
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	629a      	str	r2, [r3, #40]	; 0x28
 8008ccc:	e015      	b.n	8008cfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008cce:	893b      	ldrh	r3, [r7, #8]
 8008cd0:	0a1b      	lsrs	r3, r3, #8
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	69b9      	ldr	r1, [r7, #24]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 f883 	bl	8008dec <I2C_WaitOnTXISFlagUntilTimeout>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e012      	b.n	8008d16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cf0:	893b      	ldrh	r3, [r7, #8]
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2200      	movs	r2, #0
 8008d02:	2140      	movs	r1, #64	; 0x40
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 f831 	bl	8008d6c <I2C_WaitOnFlagUntilTimeout>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	80002000 	.word	0x80002000

08008d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d103      	bne.n	8008d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d007      	beq.n	8008d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	619a      	str	r2, [r3, #24]
  }
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d7c:	e022      	b.n	8008dc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d84:	d01e      	beq.n	8008dc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d86:	f7fd fc2f 	bl	80065e8 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d302      	bcc.n	8008d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d113      	bne.n	8008dc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da0:	f043 0220 	orr.w	r2, r3, #32
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2220      	movs	r2, #32
 8008dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e00f      	b.n	8008de4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	4013      	ands	r3, r2
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	bf0c      	ite	eq
 8008dd4:	2301      	moveq	r3, #1
 8008dd6:	2300      	movne	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	461a      	mov	r2, r3
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d0cd      	beq.n	8008d7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008df8:	e02c      	b.n	8008e54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	68b9      	ldr	r1, [r7, #8]
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 f870 	bl	8008ee4 <I2C_IsErrorOccurred>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e02a      	b.n	8008e64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e14:	d01e      	beq.n	8008e54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e16:	f7fd fbe7 	bl	80065e8 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d302      	bcc.n	8008e2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d113      	bne.n	8008e54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e30:	f043 0220 	orr.w	r2, r3, #32
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e007      	b.n	8008e64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d1cb      	bne.n	8008dfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e78:	e028      	b.n	8008ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	68b9      	ldr	r1, [r7, #8]
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 f830 	bl	8008ee4 <I2C_IsErrorOccurred>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e026      	b.n	8008edc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e8e:	f7fd fbab 	bl	80065e8 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d302      	bcc.n	8008ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d113      	bne.n	8008ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea8:	f043 0220 	orr.w	r2, r3, #32
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e007      	b.n	8008edc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d1cf      	bne.n	8008e7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08a      	sub	sp, #40	; 0x28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d075      	beq.n	8008ffc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2210      	movs	r2, #16
 8008f16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f18:	e056      	b.n	8008fc8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f20:	d052      	beq.n	8008fc8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f22:	f7fd fb61 	bl	80065e8 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d302      	bcc.n	8008f38 <I2C_IsErrorOccurred+0x54>
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d147      	bne.n	8008fc8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f5a:	d12e      	bne.n	8008fba <I2C_IsErrorOccurred+0xd6>
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f62:	d02a      	beq.n	8008fba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008f64:	7cfb      	ldrb	r3, [r7, #19]
 8008f66:	2b20      	cmp	r3, #32
 8008f68:	d027      	beq.n	8008fba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f78:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008f7a:	f7fd fb35 	bl	80065e8 <HAL_GetTick>
 8008f7e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f80:	e01b      	b.n	8008fba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008f82:	f7fd fb31 	bl	80065e8 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b19      	cmp	r3, #25
 8008f8e:	d914      	bls.n	8008fba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f94:	f043 0220 	orr.w	r2, r3, #32
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d1dc      	bne.n	8008f82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	f003 0320 	and.w	r3, r3, #32
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d003      	beq.n	8008fde <I2C_IsErrorOccurred+0xfa>
 8008fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d09d      	beq.n	8008f1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d103      	bne.n	8008fee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2220      	movs	r2, #32
 8008fec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008fee:	6a3b      	ldr	r3, [r7, #32]
 8008ff0:	f043 0304 	orr.w	r3, r3, #4
 8008ff4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	f043 0301 	orr.w	r3, r3, #1
 8009014:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800901e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	f043 0308 	orr.w	r3, r3, #8
 8009036:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009040:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	f043 0302 	orr.w	r3, r3, #2
 8009058:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009062:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800906a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800906e:	2b00      	cmp	r3, #0
 8009070:	d01c      	beq.n	80090ac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff fe56 	bl	8008d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6859      	ldr	r1, [r3, #4]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	4b0d      	ldr	r3, [pc, #52]	; (80090b8 <I2C_IsErrorOccurred+0x1d4>)
 8009084:	400b      	ands	r3, r1
 8009086:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	431a      	orrs	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80090ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3728      	adds	r7, #40	; 0x28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	fe00e800 	.word	0xfe00e800

080090bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	607b      	str	r3, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	817b      	strh	r3, [r7, #10]
 80090ca:	4613      	mov	r3, r2
 80090cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090ce:	897b      	ldrh	r3, [r7, #10]
 80090d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80090d4:	7a7b      	ldrb	r3, [r7, #9]
 80090d6:	041b      	lsls	r3, r3, #16
 80090d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090dc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090ea:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	0d5b      	lsrs	r3, r3, #21
 80090f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80090fa:	4b08      	ldr	r3, [pc, #32]	; (800911c <I2C_TransferConfig+0x60>)
 80090fc:	430b      	orrs	r3, r1
 80090fe:	43db      	mvns	r3, r3
 8009100:	ea02 0103 	and.w	r1, r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	430a      	orrs	r2, r1
 800910c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	03ff63ff 	.word	0x03ff63ff

08009120 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b20      	cmp	r3, #32
 8009134:	d138      	bne.n	80091a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800913c:	2b01      	cmp	r3, #1
 800913e:	d101      	bne.n	8009144 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009140:	2302      	movs	r3, #2
 8009142:	e032      	b.n	80091aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2224      	movs	r2, #36	; 0x24
 8009150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 0201 	bic.w	r2, r2, #1
 8009162:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009172:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6819      	ldr	r1, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0201 	orr.w	r2, r2, #1
 8009192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	e000      	b.n	80091aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091a8:	2302      	movs	r3, #2
  }
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d139      	bne.n	8009240 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d101      	bne.n	80091da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091d6:	2302      	movs	r3, #2
 80091d8:	e033      	b.n	8009242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2224      	movs	r2, #36	; 0x24
 80091e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 0201 	bic.w	r2, r2, #1
 80091f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009208:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	021b      	lsls	r3, r3, #8
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	4313      	orrs	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2220      	movs	r2, #32
 8009230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	e000      	b.n	8009242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009240:	2302      	movs	r3, #2
  }
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d141      	bne.n	80092e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800925e:	4b4b      	ldr	r3, [pc, #300]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800926a:	d131      	bne.n	80092d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800926c:	4b47      	ldr	r3, [pc, #284]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800926e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009272:	4a46      	ldr	r2, [pc, #280]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009278:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800927c:	4b43      	ldr	r3, [pc, #268]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009284:	4a41      	ldr	r2, [pc, #260]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800928a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800928c:	4b40      	ldr	r3, [pc, #256]	; (8009390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2232      	movs	r2, #50	; 0x32
 8009292:	fb02 f303 	mul.w	r3, r2, r3
 8009296:	4a3f      	ldr	r2, [pc, #252]	; (8009394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009298:	fba2 2303 	umull	r2, r3, r2, r3
 800929c:	0c9b      	lsrs	r3, r3, #18
 800929e:	3301      	adds	r3, #1
 80092a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80092a2:	e002      	b.n	80092aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80092aa:	4b38      	ldr	r3, [pc, #224]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b6:	d102      	bne.n	80092be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1f2      	bne.n	80092a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80092be:	4b33      	ldr	r3, [pc, #204]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ca:	d158      	bne.n	800937e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e057      	b.n	8009380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80092d0:	4b2e      	ldr	r3, [pc, #184]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092d6:	4a2d      	ldr	r2, [pc, #180]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80092e0:	e04d      	b.n	800937e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092e8:	d141      	bne.n	800936e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80092ea:	4b28      	ldr	r3, [pc, #160]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092f6:	d131      	bne.n	800935c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80092f8:	4b24      	ldr	r3, [pc, #144]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092fe:	4a23      	ldr	r2, [pc, #140]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009308:	4b20      	ldr	r3, [pc, #128]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009310:	4a1e      	ldr	r2, [pc, #120]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009318:	4b1d      	ldr	r3, [pc, #116]	; (8009390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2232      	movs	r2, #50	; 0x32
 800931e:	fb02 f303 	mul.w	r3, r2, r3
 8009322:	4a1c      	ldr	r2, [pc, #112]	; (8009394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009324:	fba2 2303 	umull	r2, r3, r2, r3
 8009328:	0c9b      	lsrs	r3, r3, #18
 800932a:	3301      	adds	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800932e:	e002      	b.n	8009336 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3b01      	subs	r3, #1
 8009334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009336:	4b15      	ldr	r3, [pc, #84]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800933e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009342:	d102      	bne.n	800934a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1f2      	bne.n	8009330 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800934a:	4b10      	ldr	r3, [pc, #64]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009356:	d112      	bne.n	800937e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e011      	b.n	8009380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800935c:	4b0b      	ldr	r3, [pc, #44]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800935e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009362:	4a0a      	ldr	r2, [pc, #40]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800936c:	e007      	b.n	800937e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800936e:	4b07      	ldr	r3, [pc, #28]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009376:	4a05      	ldr	r2, [pc, #20]	; (800938c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800937c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	40007000 	.word	0x40007000
 8009390:	20000000 	.word	0x20000000
 8009394:	431bde83 	.word	0x431bde83

08009398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e306      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d075      	beq.n	80094a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093b6:	4b97      	ldr	r3, [pc, #604]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f003 030c 	and.w	r3, r3, #12
 80093be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093c0:	4b94      	ldr	r3, [pc, #592]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f003 0303 	and.w	r3, r3, #3
 80093c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2b0c      	cmp	r3, #12
 80093ce:	d102      	bne.n	80093d6 <HAL_RCC_OscConfig+0x3e>
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d002      	beq.n	80093dc <HAL_RCC_OscConfig+0x44>
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b08      	cmp	r3, #8
 80093da:	d10b      	bne.n	80093f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093dc:	4b8d      	ldr	r3, [pc, #564]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d05b      	beq.n	80094a0 <HAL_RCC_OscConfig+0x108>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d157      	bne.n	80094a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e2e1      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fc:	d106      	bne.n	800940c <HAL_RCC_OscConfig+0x74>
 80093fe:	4b85      	ldr	r3, [pc, #532]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a84      	ldr	r2, [pc, #528]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	e01d      	b.n	8009448 <HAL_RCC_OscConfig+0xb0>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009414:	d10c      	bne.n	8009430 <HAL_RCC_OscConfig+0x98>
 8009416:	4b7f      	ldr	r3, [pc, #508]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a7e      	ldr	r2, [pc, #504]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 800941c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	4b7c      	ldr	r3, [pc, #496]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a7b      	ldr	r2, [pc, #492]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	e00b      	b.n	8009448 <HAL_RCC_OscConfig+0xb0>
 8009430:	4b78      	ldr	r3, [pc, #480]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a77      	ldr	r2, [pc, #476]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	4b75      	ldr	r3, [pc, #468]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a74      	ldr	r2, [pc, #464]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d013      	beq.n	8009478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009450:	f7fd f8ca 	bl	80065e8 <HAL_GetTick>
 8009454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009456:	e008      	b.n	800946a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009458:	f7fd f8c6 	bl	80065e8 <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2b64      	cmp	r3, #100	; 0x64
 8009464:	d901      	bls.n	800946a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e2a6      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800946a:	4b6a      	ldr	r3, [pc, #424]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0f0      	beq.n	8009458 <HAL_RCC_OscConfig+0xc0>
 8009476:	e014      	b.n	80094a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009478:	f7fd f8b6 	bl	80065e8 <HAL_GetTick>
 800947c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800947e:	e008      	b.n	8009492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009480:	f7fd f8b2 	bl	80065e8 <HAL_GetTick>
 8009484:	4602      	mov	r2, r0
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	2b64      	cmp	r3, #100	; 0x64
 800948c:	d901      	bls.n	8009492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e292      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009492:	4b60      	ldr	r3, [pc, #384]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1f0      	bne.n	8009480 <HAL_RCC_OscConfig+0xe8>
 800949e:	e000      	b.n	80094a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d075      	beq.n	800959a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094ae:	4b59      	ldr	r3, [pc, #356]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 030c 	and.w	r3, r3, #12
 80094b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094b8:	4b56      	ldr	r3, [pc, #344]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	2b0c      	cmp	r3, #12
 80094c6:	d102      	bne.n	80094ce <HAL_RCC_OscConfig+0x136>
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d002      	beq.n	80094d4 <HAL_RCC_OscConfig+0x13c>
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	2b04      	cmp	r3, #4
 80094d2:	d11f      	bne.n	8009514 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094d4:	4b4f      	ldr	r3, [pc, #316]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <HAL_RCC_OscConfig+0x154>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d101      	bne.n	80094ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e265      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094ec:	4b49      	ldr	r3, [pc, #292]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	061b      	lsls	r3, r3, #24
 80094fa:	4946      	ldr	r1, [pc, #280]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009500:	4b45      	ldr	r3, [pc, #276]	; (8009618 <HAL_RCC_OscConfig+0x280>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	f7fd f823 	bl	8006550 <HAL_InitTick>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d043      	beq.n	8009598 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e251      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d023      	beq.n	8009564 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800951c:	4b3d      	ldr	r3, [pc, #244]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a3c      	ldr	r2, [pc, #240]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009528:	f7fd f85e 	bl	80065e8 <HAL_GetTick>
 800952c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800952e:	e008      	b.n	8009542 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009530:	f7fd f85a 	bl	80065e8 <HAL_GetTick>
 8009534:	4602      	mov	r2, r0
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	2b02      	cmp	r3, #2
 800953c:	d901      	bls.n	8009542 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e23a      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009542:	4b34      	ldr	r3, [pc, #208]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0f0      	beq.n	8009530 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800954e:	4b31      	ldr	r3, [pc, #196]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	061b      	lsls	r3, r3, #24
 800955c:	492d      	ldr	r1, [pc, #180]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 800955e:	4313      	orrs	r3, r2
 8009560:	604b      	str	r3, [r1, #4]
 8009562:	e01a      	b.n	800959a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009564:	4b2b      	ldr	r3, [pc, #172]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a2a      	ldr	r2, [pc, #168]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 800956a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800956e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009570:	f7fd f83a 	bl	80065e8 <HAL_GetTick>
 8009574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009576:	e008      	b.n	800958a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009578:	f7fd f836 	bl	80065e8 <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	2b02      	cmp	r3, #2
 8009584:	d901      	bls.n	800958a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e216      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800958a:	4b22      	ldr	r3, [pc, #136]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1f0      	bne.n	8009578 <HAL_RCC_OscConfig+0x1e0>
 8009596:	e000      	b.n	800959a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009598:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0308 	and.w	r3, r3, #8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d041      	beq.n	800962a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d01c      	beq.n	80095e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095ae:	4b19      	ldr	r3, [pc, #100]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80095b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095b4:	4a17      	ldr	r2, [pc, #92]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80095b6:	f043 0301 	orr.w	r3, r3, #1
 80095ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095be:	f7fd f813 	bl	80065e8 <HAL_GetTick>
 80095c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095c4:	e008      	b.n	80095d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095c6:	f7fd f80f 	bl	80065e8 <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d901      	bls.n	80095d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e1ef      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095d8:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80095da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0ef      	beq.n	80095c6 <HAL_RCC_OscConfig+0x22e>
 80095e6:	e020      	b.n	800962a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095e8:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80095ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ee:	4a09      	ldr	r2, [pc, #36]	; (8009614 <HAL_RCC_OscConfig+0x27c>)
 80095f0:	f023 0301 	bic.w	r3, r3, #1
 80095f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095f8:	f7fc fff6 	bl	80065e8 <HAL_GetTick>
 80095fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095fe:	e00d      	b.n	800961c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009600:	f7fc fff2 	bl	80065e8 <HAL_GetTick>
 8009604:	4602      	mov	r2, r0
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	2b02      	cmp	r3, #2
 800960c:	d906      	bls.n	800961c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e1d2      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
 8009612:	bf00      	nop
 8009614:	40021000 	.word	0x40021000
 8009618:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800961c:	4b8c      	ldr	r3, [pc, #560]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 800961e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1ea      	bne.n	8009600 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0304 	and.w	r3, r3, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 80a6 	beq.w	8009784 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009638:	2300      	movs	r3, #0
 800963a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800963c:	4b84      	ldr	r3, [pc, #528]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 800963e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <HAL_RCC_OscConfig+0x2b4>
 8009648:	2301      	movs	r3, #1
 800964a:	e000      	b.n	800964e <HAL_RCC_OscConfig+0x2b6>
 800964c:	2300      	movs	r3, #0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00d      	beq.n	800966e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009652:	4b7f      	ldr	r3, [pc, #508]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 8009654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009656:	4a7e      	ldr	r2, [pc, #504]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 8009658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800965c:	6593      	str	r3, [r2, #88]	; 0x58
 800965e:	4b7c      	ldr	r3, [pc, #496]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 8009660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800966a:	2301      	movs	r3, #1
 800966c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800966e:	4b79      	ldr	r3, [pc, #484]	; (8009854 <HAL_RCC_OscConfig+0x4bc>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009676:	2b00      	cmp	r3, #0
 8009678:	d118      	bne.n	80096ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800967a:	4b76      	ldr	r3, [pc, #472]	; (8009854 <HAL_RCC_OscConfig+0x4bc>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a75      	ldr	r2, [pc, #468]	; (8009854 <HAL_RCC_OscConfig+0x4bc>)
 8009680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009686:	f7fc ffaf 	bl	80065e8 <HAL_GetTick>
 800968a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800968c:	e008      	b.n	80096a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800968e:	f7fc ffab 	bl	80065e8 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b02      	cmp	r3, #2
 800969a:	d901      	bls.n	80096a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e18b      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096a0:	4b6c      	ldr	r3, [pc, #432]	; (8009854 <HAL_RCC_OscConfig+0x4bc>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0f0      	beq.n	800968e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d108      	bne.n	80096c6 <HAL_RCC_OscConfig+0x32e>
 80096b4:	4b66      	ldr	r3, [pc, #408]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80096b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ba:	4a65      	ldr	r2, [pc, #404]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80096bc:	f043 0301 	orr.w	r3, r3, #1
 80096c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096c4:	e024      	b.n	8009710 <HAL_RCC_OscConfig+0x378>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	2b05      	cmp	r3, #5
 80096cc:	d110      	bne.n	80096f0 <HAL_RCC_OscConfig+0x358>
 80096ce:	4b60      	ldr	r3, [pc, #384]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80096d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d4:	4a5e      	ldr	r2, [pc, #376]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80096d6:	f043 0304 	orr.w	r3, r3, #4
 80096da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096de:	4b5c      	ldr	r3, [pc, #368]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80096e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e4:	4a5a      	ldr	r2, [pc, #360]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80096e6:	f043 0301 	orr.w	r3, r3, #1
 80096ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096ee:	e00f      	b.n	8009710 <HAL_RCC_OscConfig+0x378>
 80096f0:	4b57      	ldr	r3, [pc, #348]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80096f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f6:	4a56      	ldr	r2, [pc, #344]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80096f8:	f023 0301 	bic.w	r3, r3, #1
 80096fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009700:	4b53      	ldr	r3, [pc, #332]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 8009702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009706:	4a52      	ldr	r2, [pc, #328]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 8009708:	f023 0304 	bic.w	r3, r3, #4
 800970c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d016      	beq.n	8009746 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009718:	f7fc ff66 	bl	80065e8 <HAL_GetTick>
 800971c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800971e:	e00a      	b.n	8009736 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009720:	f7fc ff62 	bl	80065e8 <HAL_GetTick>
 8009724:	4602      	mov	r2, r0
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	f241 3288 	movw	r2, #5000	; 0x1388
 800972e:	4293      	cmp	r3, r2
 8009730:	d901      	bls.n	8009736 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e140      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009736:	4b46      	ldr	r3, [pc, #280]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 8009738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0ed      	beq.n	8009720 <HAL_RCC_OscConfig+0x388>
 8009744:	e015      	b.n	8009772 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009746:	f7fc ff4f 	bl	80065e8 <HAL_GetTick>
 800974a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800974c:	e00a      	b.n	8009764 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800974e:	f7fc ff4b 	bl	80065e8 <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	f241 3288 	movw	r2, #5000	; 0x1388
 800975c:	4293      	cmp	r3, r2
 800975e:	d901      	bls.n	8009764 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e129      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009764:	4b3a      	ldr	r3, [pc, #232]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 8009766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1ed      	bne.n	800974e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009772:	7ffb      	ldrb	r3, [r7, #31]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d105      	bne.n	8009784 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009778:	4b35      	ldr	r3, [pc, #212]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 800977a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800977c:	4a34      	ldr	r2, [pc, #208]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 800977e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009782:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b00      	cmp	r3, #0
 800978e:	d03c      	beq.n	800980a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01c      	beq.n	80097d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009798:	4b2d      	ldr	r3, [pc, #180]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 800979a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800979e:	4a2c      	ldr	r2, [pc, #176]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80097a0:	f043 0301 	orr.w	r3, r3, #1
 80097a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097a8:	f7fc ff1e 	bl	80065e8 <HAL_GetTick>
 80097ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80097ae:	e008      	b.n	80097c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097b0:	f7fc ff1a 	bl	80065e8 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d901      	bls.n	80097c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e0fa      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80097c2:	4b23      	ldr	r3, [pc, #140]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80097c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097c8:	f003 0302 	and.w	r3, r3, #2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0ef      	beq.n	80097b0 <HAL_RCC_OscConfig+0x418>
 80097d0:	e01b      	b.n	800980a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80097d2:	4b1f      	ldr	r3, [pc, #124]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80097d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097d8:	4a1d      	ldr	r2, [pc, #116]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80097da:	f023 0301 	bic.w	r3, r3, #1
 80097de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097e2:	f7fc ff01 	bl	80065e8 <HAL_GetTick>
 80097e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097e8:	e008      	b.n	80097fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097ea:	f7fc fefd 	bl	80065e8 <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e0dd      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097fc:	4b14      	ldr	r3, [pc, #80]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 80097fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1ef      	bne.n	80097ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	69db      	ldr	r3, [r3, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 80d1 	beq.w	80099b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009814:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 030c 	and.w	r3, r3, #12
 800981c:	2b0c      	cmp	r3, #12
 800981e:	f000 808b 	beq.w	8009938 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	2b02      	cmp	r3, #2
 8009828:	d15e      	bne.n	80098e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800982a:	4b09      	ldr	r3, [pc, #36]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a08      	ldr	r2, [pc, #32]	; (8009850 <HAL_RCC_OscConfig+0x4b8>)
 8009830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009836:	f7fc fed7 	bl	80065e8 <HAL_GetTick>
 800983a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800983c:	e00c      	b.n	8009858 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800983e:	f7fc fed3 	bl	80065e8 <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d905      	bls.n	8009858 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e0b3      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
 8009850:	40021000 	.word	0x40021000
 8009854:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009858:	4b59      	ldr	r3, [pc, #356]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1ec      	bne.n	800983e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009864:	4b56      	ldr	r3, [pc, #344]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	4b56      	ldr	r3, [pc, #344]	; (80099c4 <HAL_RCC_OscConfig+0x62c>)
 800986a:	4013      	ands	r3, r2
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6a11      	ldr	r1, [r2, #32]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009874:	3a01      	subs	r2, #1
 8009876:	0112      	lsls	r2, r2, #4
 8009878:	4311      	orrs	r1, r2
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800987e:	0212      	lsls	r2, r2, #8
 8009880:	4311      	orrs	r1, r2
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009886:	0852      	lsrs	r2, r2, #1
 8009888:	3a01      	subs	r2, #1
 800988a:	0552      	lsls	r2, r2, #21
 800988c:	4311      	orrs	r1, r2
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009892:	0852      	lsrs	r2, r2, #1
 8009894:	3a01      	subs	r2, #1
 8009896:	0652      	lsls	r2, r2, #25
 8009898:	4311      	orrs	r1, r2
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800989e:	06d2      	lsls	r2, r2, #27
 80098a0:	430a      	orrs	r2, r1
 80098a2:	4947      	ldr	r1, [pc, #284]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098a8:	4b45      	ldr	r3, [pc, #276]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a44      	ldr	r2, [pc, #272]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80098b4:	4b42      	ldr	r3, [pc, #264]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	4a41      	ldr	r2, [pc, #260]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c0:	f7fc fe92 	bl	80065e8 <HAL_GetTick>
 80098c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098c6:	e008      	b.n	80098da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098c8:	f7fc fe8e 	bl	80065e8 <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d901      	bls.n	80098da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e06e      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098da:	4b39      	ldr	r3, [pc, #228]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0f0      	beq.n	80098c8 <HAL_RCC_OscConfig+0x530>
 80098e6:	e066      	b.n	80099b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098e8:	4b35      	ldr	r3, [pc, #212]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a34      	ldr	r2, [pc, #208]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80098f4:	4b32      	ldr	r3, [pc, #200]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	4a31      	ldr	r2, [pc, #196]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 80098fa:	f023 0303 	bic.w	r3, r3, #3
 80098fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009900:	4b2f      	ldr	r3, [pc, #188]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	4a2e      	ldr	r2, [pc, #184]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 8009906:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800990a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800990e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009910:	f7fc fe6a 	bl	80065e8 <HAL_GetTick>
 8009914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009918:	f7fc fe66 	bl	80065e8 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e046      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800992a:	4b25      	ldr	r3, [pc, #148]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f0      	bne.n	8009918 <HAL_RCC_OscConfig+0x580>
 8009936:	e03e      	b.n	80099b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d101      	bne.n	8009944 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e039      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009944:	4b1e      	ldr	r3, [pc, #120]	; (80099c0 <HAL_RCC_OscConfig+0x628>)
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f003 0203 	and.w	r2, r3, #3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	429a      	cmp	r2, r3
 8009956:	d12c      	bne.n	80099b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	3b01      	subs	r3, #1
 8009964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009966:	429a      	cmp	r2, r3
 8009968:	d123      	bne.n	80099b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009976:	429a      	cmp	r2, r3
 8009978:	d11b      	bne.n	80099b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009986:	429a      	cmp	r2, r3
 8009988:	d113      	bne.n	80099b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009994:	085b      	lsrs	r3, r3, #1
 8009996:	3b01      	subs	r3, #1
 8009998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800999a:	429a      	cmp	r2, r3
 800999c:	d109      	bne.n	80099b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a8:	085b      	lsrs	r3, r3, #1
 80099aa:	3b01      	subs	r3, #1
 80099ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d001      	beq.n	80099b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e000      	b.n	80099b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3720      	adds	r7, #32
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	40021000 	.word	0x40021000
 80099c4:	019f800c 	.word	0x019f800c

080099c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e11e      	b.n	8009c1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099e0:	4b91      	ldr	r3, [pc, #580]	; (8009c28 <HAL_RCC_ClockConfig+0x260>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 030f 	and.w	r3, r3, #15
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d910      	bls.n	8009a10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ee:	4b8e      	ldr	r3, [pc, #568]	; (8009c28 <HAL_RCC_ClockConfig+0x260>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f023 020f 	bic.w	r2, r3, #15
 80099f6:	498c      	ldr	r1, [pc, #560]	; (8009c28 <HAL_RCC_ClockConfig+0x260>)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099fe:	4b8a      	ldr	r3, [pc, #552]	; (8009c28 <HAL_RCC_ClockConfig+0x260>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 030f 	and.w	r3, r3, #15
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d001      	beq.n	8009a10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e106      	b.n	8009c1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d073      	beq.n	8009b04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d129      	bne.n	8009a78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a24:	4b81      	ldr	r3, [pc, #516]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e0f4      	b.n	8009c1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009a34:	f000 f99c 	bl	8009d70 <RCC_GetSysClockFreqFromPLLSource>
 8009a38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	4a7c      	ldr	r2, [pc, #496]	; (8009c30 <HAL_RCC_ClockConfig+0x268>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d93f      	bls.n	8009ac2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009a42:	4b7a      	ldr	r3, [pc, #488]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d009      	beq.n	8009a62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d033      	beq.n	8009ac2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d12f      	bne.n	8009ac2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009a62:	4b72      	ldr	r3, [pc, #456]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a6a:	4a70      	ldr	r2, [pc, #448]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009a72:	2380      	movs	r3, #128	; 0x80
 8009a74:	617b      	str	r3, [r7, #20]
 8009a76:	e024      	b.n	8009ac2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d107      	bne.n	8009a90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a80:	4b6a      	ldr	r3, [pc, #424]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d109      	bne.n	8009aa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e0c6      	b.n	8009c1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a90:	4b66      	ldr	r3, [pc, #408]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d101      	bne.n	8009aa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e0be      	b.n	8009c1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009aa0:	f000 f8ce 	bl	8009c40 <HAL_RCC_GetSysClockFreq>
 8009aa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	4a61      	ldr	r2, [pc, #388]	; (8009c30 <HAL_RCC_ClockConfig+0x268>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d909      	bls.n	8009ac2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009aae:	4b5f      	ldr	r3, [pc, #380]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ab6:	4a5d      	ldr	r2, [pc, #372]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009abc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009abe:	2380      	movs	r3, #128	; 0x80
 8009ac0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ac2:	4b5a      	ldr	r3, [pc, #360]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f023 0203 	bic.w	r2, r3, #3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	4957      	ldr	r1, [pc, #348]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ad4:	f7fc fd88 	bl	80065e8 <HAL_GetTick>
 8009ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ada:	e00a      	b.n	8009af2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009adc:	f7fc fd84 	bl	80065e8 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d901      	bls.n	8009af2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e095      	b.n	8009c1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009af2:	4b4e      	ldr	r3, [pc, #312]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f003 020c 	and.w	r2, r3, #12
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d1eb      	bne.n	8009adc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0302 	and.w	r3, r3, #2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d023      	beq.n	8009b58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 0304 	and.w	r3, r3, #4
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d005      	beq.n	8009b28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b1c:	4b43      	ldr	r3, [pc, #268]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	4a42      	ldr	r2, [pc, #264]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009b26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d007      	beq.n	8009b44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009b34:	4b3d      	ldr	r3, [pc, #244]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b3c:	4a3b      	ldr	r2, [pc, #236]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009b3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009b42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b44:	4b39      	ldr	r3, [pc, #228]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	4936      	ldr	r1, [pc, #216]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	608b      	str	r3, [r1, #8]
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b80      	cmp	r3, #128	; 0x80
 8009b5c:	d105      	bne.n	8009b6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009b5e:	4b33      	ldr	r3, [pc, #204]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	4a32      	ldr	r2, [pc, #200]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b6a:	4b2f      	ldr	r3, [pc, #188]	; (8009c28 <HAL_RCC_ClockConfig+0x260>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 030f 	and.w	r3, r3, #15
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d21d      	bcs.n	8009bb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b78:	4b2b      	ldr	r3, [pc, #172]	; (8009c28 <HAL_RCC_ClockConfig+0x260>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f023 020f 	bic.w	r2, r3, #15
 8009b80:	4929      	ldr	r1, [pc, #164]	; (8009c28 <HAL_RCC_ClockConfig+0x260>)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009b88:	f7fc fd2e 	bl	80065e8 <HAL_GetTick>
 8009b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b8e:	e00a      	b.n	8009ba6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b90:	f7fc fd2a 	bl	80065e8 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e03b      	b.n	8009c1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ba6:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <HAL_RCC_ClockConfig+0x260>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 030f 	and.w	r3, r3, #15
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d1ed      	bne.n	8009b90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0304 	and.w	r3, r3, #4
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d008      	beq.n	8009bd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bc0:	4b1a      	ldr	r3, [pc, #104]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4917      	ldr	r1, [pc, #92]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0308 	and.w	r3, r3, #8
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d009      	beq.n	8009bf2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bde:	4b13      	ldr	r3, [pc, #76]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	490f      	ldr	r1, [pc, #60]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009bf2:	f000 f825 	bl	8009c40 <HAL_RCC_GetSysClockFreq>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <HAL_RCC_ClockConfig+0x264>)
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	091b      	lsrs	r3, r3, #4
 8009bfe:	f003 030f 	and.w	r3, r3, #15
 8009c02:	490c      	ldr	r1, [pc, #48]	; (8009c34 <HAL_RCC_ClockConfig+0x26c>)
 8009c04:	5ccb      	ldrb	r3, [r1, r3]
 8009c06:	f003 031f 	and.w	r3, r3, #31
 8009c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c0e:	4a0a      	ldr	r2, [pc, #40]	; (8009c38 <HAL_RCC_ClockConfig+0x270>)
 8009c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009c12:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <HAL_RCC_ClockConfig+0x274>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fc fc9a 	bl	8006550 <HAL_InitTick>
 8009c1c:	4603      	mov	r3, r0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	40022000 	.word	0x40022000
 8009c2c:	40021000 	.word	0x40021000
 8009c30:	04c4b400 	.word	0x04c4b400
 8009c34:	08011fe0 	.word	0x08011fe0
 8009c38:	20000000 	.word	0x20000000
 8009c3c:	20000008 	.word	0x20000008

08009c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009c46:	4b2c      	ldr	r3, [pc, #176]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f003 030c 	and.w	r3, r3, #12
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	d102      	bne.n	8009c58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c52:	4b2a      	ldr	r3, [pc, #168]	; (8009cfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	e047      	b.n	8009ce8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009c58:	4b27      	ldr	r3, [pc, #156]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f003 030c 	and.w	r3, r3, #12
 8009c60:	2b08      	cmp	r3, #8
 8009c62:	d102      	bne.n	8009c6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c64:	4b25      	ldr	r3, [pc, #148]	; (8009cfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c66:	613b      	str	r3, [r7, #16]
 8009c68:	e03e      	b.n	8009ce8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009c6a:	4b23      	ldr	r3, [pc, #140]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f003 030c 	and.w	r3, r3, #12
 8009c72:	2b0c      	cmp	r3, #12
 8009c74:	d136      	bne.n	8009ce4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c76:	4b20      	ldr	r3, [pc, #128]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f003 0303 	and.w	r3, r3, #3
 8009c7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c80:	4b1d      	ldr	r3, [pc, #116]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	091b      	lsrs	r3, r3, #4
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b03      	cmp	r3, #3
 8009c92:	d10c      	bne.n	8009cae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c94:	4a19      	ldr	r2, [pc, #100]	; (8009cfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c9c:	4a16      	ldr	r2, [pc, #88]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c9e:	68d2      	ldr	r2, [r2, #12]
 8009ca0:	0a12      	lsrs	r2, r2, #8
 8009ca2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ca6:	fb02 f303 	mul.w	r3, r2, r3
 8009caa:	617b      	str	r3, [r7, #20]
      break;
 8009cac:	e00c      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009cae:	4a13      	ldr	r2, [pc, #76]	; (8009cfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb6:	4a10      	ldr	r2, [pc, #64]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009cb8:	68d2      	ldr	r2, [r2, #12]
 8009cba:	0a12      	lsrs	r2, r2, #8
 8009cbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009cc0:	fb02 f303 	mul.w	r3, r2, r3
 8009cc4:	617b      	str	r3, [r7, #20]
      break;
 8009cc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009cc8:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	0e5b      	lsrs	r3, r3, #25
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce0:	613b      	str	r3, [r7, #16]
 8009ce2:	e001      	b.n	8009ce8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009ce8:	693b      	ldr	r3, [r7, #16]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40021000 	.word	0x40021000
 8009cfc:	00f42400 	.word	0x00f42400

08009d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d00:	b480      	push	{r7}
 8009d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d04:	4b03      	ldr	r3, [pc, #12]	; (8009d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d06:	681b      	ldr	r3, [r3, #0]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20000000 	.word	0x20000000

08009d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009d1c:	f7ff fff0 	bl	8009d00 <HAL_RCC_GetHCLKFreq>
 8009d20:	4602      	mov	r2, r0
 8009d22:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	0a1b      	lsrs	r3, r3, #8
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	4904      	ldr	r1, [pc, #16]	; (8009d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d2e:	5ccb      	ldrb	r3, [r1, r3]
 8009d30:	f003 031f 	and.w	r3, r3, #31
 8009d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	40021000 	.word	0x40021000
 8009d40:	08011ff0 	.word	0x08011ff0

08009d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009d48:	f7ff ffda 	bl	8009d00 <HAL_RCC_GetHCLKFreq>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	0adb      	lsrs	r3, r3, #11
 8009d54:	f003 0307 	and.w	r3, r3, #7
 8009d58:	4904      	ldr	r1, [pc, #16]	; (8009d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d5a:	5ccb      	ldrb	r3, [r1, r3]
 8009d5c:	f003 031f 	and.w	r3, r3, #31
 8009d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	40021000 	.word	0x40021000
 8009d6c:	08011ff0 	.word	0x08011ff0

08009d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b087      	sub	sp, #28
 8009d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d76:	4b1e      	ldr	r3, [pc, #120]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f003 0303 	and.w	r3, r3, #3
 8009d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d80:	4b1b      	ldr	r3, [pc, #108]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	091b      	lsrs	r3, r3, #4
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d10c      	bne.n	8009dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d94:	4a17      	ldr	r2, [pc, #92]	; (8009df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d9c:	4a14      	ldr	r2, [pc, #80]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d9e:	68d2      	ldr	r2, [r2, #12]
 8009da0:	0a12      	lsrs	r2, r2, #8
 8009da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009da6:	fb02 f303 	mul.w	r3, r2, r3
 8009daa:	617b      	str	r3, [r7, #20]
    break;
 8009dac:	e00c      	b.n	8009dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009dae:	4a11      	ldr	r2, [pc, #68]	; (8009df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db6:	4a0e      	ldr	r2, [pc, #56]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009db8:	68d2      	ldr	r2, [r2, #12]
 8009dba:	0a12      	lsrs	r2, r2, #8
 8009dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009dc0:	fb02 f303 	mul.w	r3, r2, r3
 8009dc4:	617b      	str	r3, [r7, #20]
    break;
 8009dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009dc8:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	0e5b      	lsrs	r3, r3, #25
 8009dce:	f003 0303 	and.w	r3, r3, #3
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009de2:	687b      	ldr	r3, [r7, #4]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	371c      	adds	r7, #28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	40021000 	.word	0x40021000
 8009df4:	00f42400 	.word	0x00f42400

08009df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e00:	2300      	movs	r3, #0
 8009e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e04:	2300      	movs	r3, #0
 8009e06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 8098 	beq.w	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e16:	2300      	movs	r3, #0
 8009e18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e1a:	4b43      	ldr	r3, [pc, #268]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10d      	bne.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e26:	4b40      	ldr	r3, [pc, #256]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2a:	4a3f      	ldr	r2, [pc, #252]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e30:	6593      	str	r3, [r2, #88]	; 0x58
 8009e32:	4b3d      	ldr	r3, [pc, #244]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e3a:	60bb      	str	r3, [r7, #8]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e42:	4b3a      	ldr	r3, [pc, #232]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a39      	ldr	r2, [pc, #228]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e4e:	f7fc fbcb 	bl	80065e8 <HAL_GetTick>
 8009e52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e54:	e009      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e56:	f7fc fbc7 	bl	80065e8 <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d902      	bls.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	74fb      	strb	r3, [r7, #19]
        break;
 8009e68:	e005      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e6a:	4b30      	ldr	r3, [pc, #192]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0ef      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009e76:	7cfb      	ldrb	r3, [r7, #19]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d159      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009e7c:	4b2a      	ldr	r3, [pc, #168]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d01e      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d019      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009e98:	4b23      	ldr	r3, [pc, #140]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ea4:	4b20      	ldr	r3, [pc, #128]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eaa:	4a1f      	ldr	r2, [pc, #124]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009eb4:	4b1c      	ldr	r3, [pc, #112]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eba:	4a1b      	ldr	r2, [pc, #108]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009ec4:	4a18      	ldr	r2, [pc, #96]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d016      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed6:	f7fc fb87 	bl	80065e8 <HAL_GetTick>
 8009eda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009edc:	e00b      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ede:	f7fc fb83 	bl	80065e8 <HAL_GetTick>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d902      	bls.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	74fb      	strb	r3, [r7, #19]
            break;
 8009ef4:	e006      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ef6:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efc:	f003 0302 	and.w	r3, r3, #2
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d0ec      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009f04:	7cfb      	ldrb	r3, [r7, #19]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10b      	bne.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f0a:	4b07      	ldr	r3, [pc, #28]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f18:	4903      	ldr	r1, [pc, #12]	; (8009f28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009f20:	e008      	b.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f22:	7cfb      	ldrb	r3, [r7, #19]
 8009f24:	74bb      	strb	r3, [r7, #18]
 8009f26:	e005      	b.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009f28:	40021000 	.word	0x40021000
 8009f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f30:	7cfb      	ldrb	r3, [r7, #19]
 8009f32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f34:	7c7b      	ldrb	r3, [r7, #17]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d105      	bne.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f3a:	4ba6      	ldr	r3, [pc, #664]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3e:	4aa5      	ldr	r2, [pc, #660]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009f52:	4ba0      	ldr	r3, [pc, #640]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f58:	f023 0203 	bic.w	r2, r3, #3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	499c      	ldr	r1, [pc, #624]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00a      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009f74:	4b97      	ldr	r3, [pc, #604]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7a:	f023 020c 	bic.w	r2, r3, #12
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	4994      	ldr	r1, [pc, #592]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0304 	and.w	r3, r3, #4
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00a      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009f96:	4b8f      	ldr	r3, [pc, #572]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	498b      	ldr	r1, [pc, #556]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0308 	and.w	r3, r3, #8
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00a      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009fb8:	4b86      	ldr	r3, [pc, #536]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	4983      	ldr	r1, [pc, #524]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fda:	4b7e      	ldr	r3, [pc, #504]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	497a      	ldr	r1, [pc, #488]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00a      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ffc:	4b75      	ldr	r3, [pc, #468]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a002:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	4972      	ldr	r1, [pc, #456]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a01e:	4b6d      	ldr	r3, [pc, #436]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	4969      	ldr	r1, [pc, #420]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00a      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a040:	4b64      	ldr	r3, [pc, #400]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a046:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	4961      	ldr	r1, [pc, #388]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a050:	4313      	orrs	r3, r2
 800a052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00a      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a062:	4b5c      	ldr	r3, [pc, #368]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a068:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	4958      	ldr	r1, [pc, #352]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a072:	4313      	orrs	r3, r2
 800a074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a080:	2b00      	cmp	r3, #0
 800a082:	d015      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a084:	4b53      	ldr	r3, [pc, #332]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a092:	4950      	ldr	r1, [pc, #320]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a094:	4313      	orrs	r3, r2
 800a096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0a2:	d105      	bne.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0a4:	4b4b      	ldr	r3, [pc, #300]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	4a4a      	ldr	r2, [pc, #296]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d015      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a0bc:	4b45      	ldr	r3, [pc, #276]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ca:	4942      	ldr	r1, [pc, #264]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0da:	d105      	bne.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0dc:	4b3d      	ldr	r3, [pc, #244]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	4a3c      	ldr	r2, [pc, #240]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d015      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a0f4:	4b37      	ldr	r3, [pc, #220]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a102:	4934      	ldr	r1, [pc, #208]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a104:	4313      	orrs	r3, r2
 800a106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a112:	d105      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a114:	4b2f      	ldr	r3, [pc, #188]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	4a2e      	ldr	r2, [pc, #184]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a11a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a11e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d015      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a12c:	4b29      	ldr	r3, [pc, #164]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13a:	4926      	ldr	r1, [pc, #152]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a13c:	4313      	orrs	r3, r2
 800a13e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a14a:	d105      	bne.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a14c:	4b21      	ldr	r3, [pc, #132]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	4a20      	ldr	r2, [pc, #128]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a156:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d015      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a164:	4b1b      	ldr	r3, [pc, #108]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a172:	4918      	ldr	r1, [pc, #96]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a174:	4313      	orrs	r3, r2
 800a176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a182:	d105      	bne.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a184:	4b13      	ldr	r3, [pc, #76]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	4a12      	ldr	r2, [pc, #72]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a18a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a18e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d015      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a19c:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1aa:	490a      	ldr	r1, [pc, #40]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1ba:	d105      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a1bc:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	4a04      	ldr	r2, [pc, #16]	; (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a1c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a1c8:	7cbb      	ldrb	r3, [r7, #18]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	40021000 	.word	0x40021000

0800a1d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e049      	b.n	800a27e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7f7 ffca 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3304      	adds	r3, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4610      	mov	r0, r2
 800a218:	f000 fb70 	bl	800a8fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d001      	beq.n	800a2a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e04a      	b.n	800a336 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68da      	ldr	r2, [r3, #12]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f042 0201 	orr.w	r2, r2, #1
 800a2b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a21      	ldr	r2, [pc, #132]	; (800a344 <HAL_TIM_Base_Start_IT+0xbc>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d018      	beq.n	800a2f4 <HAL_TIM_Base_Start_IT+0x6c>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ca:	d013      	beq.n	800a2f4 <HAL_TIM_Base_Start_IT+0x6c>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a1d      	ldr	r2, [pc, #116]	; (800a348 <HAL_TIM_Base_Start_IT+0xc0>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d00e      	beq.n	800a2f4 <HAL_TIM_Base_Start_IT+0x6c>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a1c      	ldr	r2, [pc, #112]	; (800a34c <HAL_TIM_Base_Start_IT+0xc4>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d009      	beq.n	800a2f4 <HAL_TIM_Base_Start_IT+0x6c>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a1a      	ldr	r2, [pc, #104]	; (800a350 <HAL_TIM_Base_Start_IT+0xc8>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d004      	beq.n	800a2f4 <HAL_TIM_Base_Start_IT+0x6c>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a19      	ldr	r2, [pc, #100]	; (800a354 <HAL_TIM_Base_Start_IT+0xcc>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d115      	bne.n	800a320 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689a      	ldr	r2, [r3, #8]
 800a2fa:	4b17      	ldr	r3, [pc, #92]	; (800a358 <HAL_TIM_Base_Start_IT+0xd0>)
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2b06      	cmp	r3, #6
 800a304:	d015      	beq.n	800a332 <HAL_TIM_Base_Start_IT+0xaa>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a30c:	d011      	beq.n	800a332 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f042 0201 	orr.w	r2, r2, #1
 800a31c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a31e:	e008      	b.n	800a332 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f042 0201 	orr.w	r2, r2, #1
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	e000      	b.n	800a334 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a332:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	40012c00 	.word	0x40012c00
 800a348:	40000400 	.word	0x40000400
 800a34c:	40000800 	.word	0x40000800
 800a350:	40013400 	.word	0x40013400
 800a354:	40014000 	.word	0x40014000
 800a358:	00010007 	.word	0x00010007

0800a35c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f022 0201 	bic.w	r2, r2, #1
 800a372:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6a1a      	ldr	r2, [r3, #32]
 800a37a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a37e:	4013      	ands	r3, r2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10f      	bne.n	800a3a4 <HAL_TIM_Base_Stop_IT+0x48>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6a1a      	ldr	r2, [r3, #32]
 800a38a:	f244 4344 	movw	r3, #17476	; 0x4444
 800a38e:	4013      	ands	r3, r2
 800a390:	2b00      	cmp	r3, #0
 800a392:	d107      	bne.n	800a3a4 <HAL_TIM_Base_Stop_IT+0x48>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0201 	bic.w	r2, r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d122      	bne.n	800a416 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d11b      	bne.n	800a416 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f06f 0202 	mvn.w	r2, #2
 800a3e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	f003 0303 	and.w	r3, r3, #3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d003      	beq.n	800a404 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fa5f 	bl	800a8c0 <HAL_TIM_IC_CaptureCallback>
 800a402:	e005      	b.n	800a410 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fa51 	bl	800a8ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa62 	bl	800a8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b04      	cmp	r3, #4
 800a422:	d122      	bne.n	800a46a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	f003 0304 	and.w	r3, r3, #4
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d11b      	bne.n	800a46a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f06f 0204 	mvn.w	r2, #4
 800a43a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2202      	movs	r2, #2
 800a440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d003      	beq.n	800a458 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fa35 	bl	800a8c0 <HAL_TIM_IC_CaptureCallback>
 800a456:	e005      	b.n	800a464 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fa27 	bl	800a8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fa38 	bl	800a8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	f003 0308 	and.w	r3, r3, #8
 800a474:	2b08      	cmp	r3, #8
 800a476:	d122      	bne.n	800a4be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f003 0308 	and.w	r3, r3, #8
 800a482:	2b08      	cmp	r3, #8
 800a484:	d11b      	bne.n	800a4be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f06f 0208 	mvn.w	r2, #8
 800a48e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2204      	movs	r2, #4
 800a494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	f003 0303 	and.w	r3, r3, #3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fa0b 	bl	800a8c0 <HAL_TIM_IC_CaptureCallback>
 800a4aa:	e005      	b.n	800a4b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f9fd 	bl	800a8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fa0e 	bl	800a8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b10      	cmp	r3, #16
 800a4ca:	d122      	bne.n	800a512 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	f003 0310 	and.w	r3, r3, #16
 800a4d6:	2b10      	cmp	r3, #16
 800a4d8:	d11b      	bne.n	800a512 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f06f 0210 	mvn.w	r2, #16
 800a4e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2208      	movs	r2, #8
 800a4e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f9e1 	bl	800a8c0 <HAL_TIM_IC_CaptureCallback>
 800a4fe:	e005      	b.n	800a50c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f9d3 	bl	800a8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f9e4 	bl	800a8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d10e      	bne.n	800a53e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d107      	bne.n	800a53e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f06f 0201 	mvn.w	r2, #1
 800a536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7f6 febf 	bl	80012bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a548:	2b80      	cmp	r3, #128	; 0x80
 800a54a:	d10e      	bne.n	800a56a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a556:	2b80      	cmp	r3, #128	; 0x80
 800a558:	d107      	bne.n	800a56a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fb81 	bl	800ac6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a578:	d10e      	bne.n	800a598 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a584:	2b80      	cmp	r3, #128	; 0x80
 800a586:	d107      	bne.n	800a598 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fb74 	bl	800ac80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a2:	2b40      	cmp	r3, #64	; 0x40
 800a5a4:	d10e      	bne.n	800a5c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b0:	2b40      	cmp	r3, #64	; 0x40
 800a5b2:	d107      	bne.n	800a5c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f992 	bl	800a8e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	f003 0320 	and.w	r3, r3, #32
 800a5ce:	2b20      	cmp	r3, #32
 800a5d0:	d10e      	bne.n	800a5f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f003 0320 	and.w	r3, r3, #32
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	d107      	bne.n	800a5f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f06f 0220 	mvn.w	r2, #32
 800a5e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fb34 	bl	800ac58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5fe:	d10f      	bne.n	800a620 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a60a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a60e:	d107      	bne.n	800a620 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fb3a 	bl	800ac94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a62a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a62e:	d10f      	bne.n	800a650 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a63a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a63e:	d107      	bne.n	800a650 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fb2c 	bl	800aca8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a65a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a65e:	d10f      	bne.n	800a680 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a66a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a66e:	d107      	bne.n	800a680 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fb1e 	bl	800acbc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a68a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a68e:	d10f      	bne.n	800a6b0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a69a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a69e:	d107      	bne.n	800a6b0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fb10 	bl	800acd0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <HAL_TIM_ConfigClockSource+0x1c>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e0de      	b.n	800a892 <HAL_TIM_ConfigClockSource+0x1da>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2202      	movs	r2, #2
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a6f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a6f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a63      	ldr	r2, [pc, #396]	; (800a89c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	f000 80a9 	beq.w	800a866 <HAL_TIM_ConfigClockSource+0x1ae>
 800a714:	4a61      	ldr	r2, [pc, #388]	; (800a89c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a716:	4293      	cmp	r3, r2
 800a718:	f200 80ae 	bhi.w	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a71c:	4a60      	ldr	r2, [pc, #384]	; (800a8a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	f000 80a1 	beq.w	800a866 <HAL_TIM_ConfigClockSource+0x1ae>
 800a724:	4a5e      	ldr	r2, [pc, #376]	; (800a8a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a726:	4293      	cmp	r3, r2
 800a728:	f200 80a6 	bhi.w	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a72c:	4a5d      	ldr	r2, [pc, #372]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	f000 8099 	beq.w	800a866 <HAL_TIM_ConfigClockSource+0x1ae>
 800a734:	4a5b      	ldr	r2, [pc, #364]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a736:	4293      	cmp	r3, r2
 800a738:	f200 809e 	bhi.w	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a73c:	4a5a      	ldr	r2, [pc, #360]	; (800a8a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	f000 8091 	beq.w	800a866 <HAL_TIM_ConfigClockSource+0x1ae>
 800a744:	4a58      	ldr	r2, [pc, #352]	; (800a8a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a746:	4293      	cmp	r3, r2
 800a748:	f200 8096 	bhi.w	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a74c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a750:	f000 8089 	beq.w	800a866 <HAL_TIM_ConfigClockSource+0x1ae>
 800a754:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a758:	f200 808e 	bhi.w	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a75c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a760:	d03e      	beq.n	800a7e0 <HAL_TIM_ConfigClockSource+0x128>
 800a762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a766:	f200 8087 	bhi.w	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a76e:	f000 8086 	beq.w	800a87e <HAL_TIM_ConfigClockSource+0x1c6>
 800a772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a776:	d87f      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a778:	2b70      	cmp	r3, #112	; 0x70
 800a77a:	d01a      	beq.n	800a7b2 <HAL_TIM_ConfigClockSource+0xfa>
 800a77c:	2b70      	cmp	r3, #112	; 0x70
 800a77e:	d87b      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a780:	2b60      	cmp	r3, #96	; 0x60
 800a782:	d050      	beq.n	800a826 <HAL_TIM_ConfigClockSource+0x16e>
 800a784:	2b60      	cmp	r3, #96	; 0x60
 800a786:	d877      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a788:	2b50      	cmp	r3, #80	; 0x50
 800a78a:	d03c      	beq.n	800a806 <HAL_TIM_ConfigClockSource+0x14e>
 800a78c:	2b50      	cmp	r3, #80	; 0x50
 800a78e:	d873      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a790:	2b40      	cmp	r3, #64	; 0x40
 800a792:	d058      	beq.n	800a846 <HAL_TIM_ConfigClockSource+0x18e>
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	d86f      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a798:	2b30      	cmp	r3, #48	; 0x30
 800a79a:	d064      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x1ae>
 800a79c:	2b30      	cmp	r3, #48	; 0x30
 800a79e:	d86b      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a7a0:	2b20      	cmp	r3, #32
 800a7a2:	d060      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x1ae>
 800a7a4:	2b20      	cmp	r3, #32
 800a7a6:	d867      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d05c      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x1ae>
 800a7ac:	2b10      	cmp	r3, #16
 800a7ae:	d05a      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x1ae>
 800a7b0:	e062      	b.n	800a878 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	6899      	ldr	r1, [r3, #8]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	f000 f9a7 	bl	800ab14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	609a      	str	r2, [r3, #8]
      break;
 800a7de:	e04f      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	6899      	ldr	r1, [r3, #8]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f000 f990 	bl	800ab14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	689a      	ldr	r2, [r3, #8]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a802:	609a      	str	r2, [r3, #8]
      break;
 800a804:	e03c      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	6859      	ldr	r1, [r3, #4]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	461a      	mov	r2, r3
 800a814:	f000 f902 	bl	800aa1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2150      	movs	r1, #80	; 0x50
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 f95b 	bl	800aada <TIM_ITRx_SetConfig>
      break;
 800a824:	e02c      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6818      	ldr	r0, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	6859      	ldr	r1, [r3, #4]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	461a      	mov	r2, r3
 800a834:	f000 f921 	bl	800aa7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2160      	movs	r1, #96	; 0x60
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 f94b 	bl	800aada <TIM_ITRx_SetConfig>
      break;
 800a844:	e01c      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	6859      	ldr	r1, [r3, #4]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	461a      	mov	r2, r3
 800a854:	f000 f8e2 	bl	800aa1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2140      	movs	r1, #64	; 0x40
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 f93b 	bl	800aada <TIM_ITRx_SetConfig>
      break;
 800a864:	e00c      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4619      	mov	r1, r3
 800a870:	4610      	mov	r0, r2
 800a872:	f000 f932 	bl	800aada <TIM_ITRx_SetConfig>
      break;
 800a876:	e003      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	73fb      	strb	r3, [r7, #15]
      break;
 800a87c:	e000      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a87e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a890:	7bfb      	ldrb	r3, [r7, #15]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	00100070 	.word	0x00100070
 800a8a0:	00100040 	.word	0x00100040
 800a8a4:	00100030 	.word	0x00100030
 800a8a8:	00100020 	.word	0x00100020

0800a8ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a3c      	ldr	r2, [pc, #240]	; (800aa00 <TIM_Base_SetConfig+0x104>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00f      	beq.n	800a934 <TIM_Base_SetConfig+0x38>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a91a:	d00b      	beq.n	800a934 <TIM_Base_SetConfig+0x38>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a39      	ldr	r2, [pc, #228]	; (800aa04 <TIM_Base_SetConfig+0x108>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d007      	beq.n	800a934 <TIM_Base_SetConfig+0x38>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a38      	ldr	r2, [pc, #224]	; (800aa08 <TIM_Base_SetConfig+0x10c>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d003      	beq.n	800a934 <TIM_Base_SetConfig+0x38>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a37      	ldr	r2, [pc, #220]	; (800aa0c <TIM_Base_SetConfig+0x110>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d108      	bne.n	800a946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a93a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	4313      	orrs	r3, r2
 800a944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a2d      	ldr	r2, [pc, #180]	; (800aa00 <TIM_Base_SetConfig+0x104>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d01b      	beq.n	800a986 <TIM_Base_SetConfig+0x8a>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a954:	d017      	beq.n	800a986 <TIM_Base_SetConfig+0x8a>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a2a      	ldr	r2, [pc, #168]	; (800aa04 <TIM_Base_SetConfig+0x108>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d013      	beq.n	800a986 <TIM_Base_SetConfig+0x8a>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a29      	ldr	r2, [pc, #164]	; (800aa08 <TIM_Base_SetConfig+0x10c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00f      	beq.n	800a986 <TIM_Base_SetConfig+0x8a>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a28      	ldr	r2, [pc, #160]	; (800aa0c <TIM_Base_SetConfig+0x110>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d00b      	beq.n	800a986 <TIM_Base_SetConfig+0x8a>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a27      	ldr	r2, [pc, #156]	; (800aa10 <TIM_Base_SetConfig+0x114>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d007      	beq.n	800a986 <TIM_Base_SetConfig+0x8a>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a26      	ldr	r2, [pc, #152]	; (800aa14 <TIM_Base_SetConfig+0x118>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d003      	beq.n	800a986 <TIM_Base_SetConfig+0x8a>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a25      	ldr	r2, [pc, #148]	; (800aa18 <TIM_Base_SetConfig+0x11c>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d108      	bne.n	800a998 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a98c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4313      	orrs	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a10      	ldr	r2, [pc, #64]	; (800aa00 <TIM_Base_SetConfig+0x104>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d00f      	beq.n	800a9e4 <TIM_Base_SetConfig+0xe8>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <TIM_Base_SetConfig+0x110>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d00b      	beq.n	800a9e4 <TIM_Base_SetConfig+0xe8>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a10      	ldr	r2, [pc, #64]	; (800aa10 <TIM_Base_SetConfig+0x114>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d007      	beq.n	800a9e4 <TIM_Base_SetConfig+0xe8>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a0f      	ldr	r2, [pc, #60]	; (800aa14 <TIM_Base_SetConfig+0x118>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d003      	beq.n	800a9e4 <TIM_Base_SetConfig+0xe8>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a0e      	ldr	r2, [pc, #56]	; (800aa18 <TIM_Base_SetConfig+0x11c>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d103      	bne.n	800a9ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	691a      	ldr	r2, [r3, #16]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	615a      	str	r2, [r3, #20]
}
 800a9f2:	bf00      	nop
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	40012c00 	.word	0x40012c00
 800aa04:	40000400 	.word	0x40000400
 800aa08:	40000800 	.word	0x40000800
 800aa0c:	40013400 	.word	0x40013400
 800aa10:	40014000 	.word	0x40014000
 800aa14:	40014400 	.word	0x40014400
 800aa18:	40014800 	.word	0x40014800

0800aa1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	f023 0201 	bic.w	r2, r3, #1
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	011b      	lsls	r3, r3, #4
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f023 030a 	bic.w	r3, r3, #10
 800aa58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	621a      	str	r2, [r3, #32]
}
 800aa6e:	bf00      	nop
 800aa70:	371c      	adds	r7, #28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b087      	sub	sp, #28
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	60f8      	str	r0, [r7, #12]
 800aa82:	60b9      	str	r1, [r7, #8]
 800aa84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	f023 0210 	bic.w	r2, r3, #16
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aaa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	031b      	lsls	r3, r3, #12
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	011b      	lsls	r3, r3, #4
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	621a      	str	r2, [r3, #32]
}
 800aace:	bf00      	nop
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aada:	b480      	push	{r7}
 800aadc:	b085      	sub	sp, #20
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800aaf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	f043 0307 	orr.w	r3, r3, #7
 800ab00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	609a      	str	r2, [r3, #8]
}
 800ab08:	bf00      	nop
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b087      	sub	sp, #28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	021a      	lsls	r2, r3, #8
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	431a      	orrs	r2, r3
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	609a      	str	r2, [r3, #8]
}
 800ab48:	bf00      	nop
 800ab4a:	371c      	adds	r7, #28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d101      	bne.n	800ab6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab68:	2302      	movs	r3, #2
 800ab6a:	e065      	b.n	800ac38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a2c      	ldr	r2, [pc, #176]	; (800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d004      	beq.n	800aba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a2b      	ldr	r2, [pc, #172]	; (800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d108      	bne.n	800abb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800abb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a1b      	ldr	r2, [pc, #108]	; (800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d018      	beq.n	800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe2:	d013      	beq.n	800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a18      	ldr	r2, [pc, #96]	; (800ac4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d00e      	beq.n	800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a17      	ldr	r2, [pc, #92]	; (800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d009      	beq.n	800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a12      	ldr	r2, [pc, #72]	; (800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d004      	beq.n	800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a13      	ldr	r2, [pc, #76]	; (800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d10c      	bne.n	800ac26 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	40012c00 	.word	0x40012c00
 800ac48:	40013400 	.word	0x40013400
 800ac4c:	40000400 	.word	0x40000400
 800ac50:	40000800 	.word	0x40000800
 800ac54:	40014000 	.word	0x40014000

0800ac58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e042      	b.n	800ad7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d106      	bne.n	800ad0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7f7 fadb 	bl	80022c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2224      	movs	r2, #36	; 0x24
 800ad12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f022 0201 	bic.w	r2, r2, #1
 800ad24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fd9c 	bl	800b864 <UART_SetConfig>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d101      	bne.n	800ad36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e022      	b.n	800ad7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 f85c 	bl	800bdfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689a      	ldr	r2, [r3, #8]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0201 	orr.w	r2, r2, #1
 800ad72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f001 f8e3 	bl	800bf40 <UART_CheckIdleState>
 800ad7a:	4603      	mov	r3, r0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b091      	sub	sp, #68	; 0x44
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad98:	2b20      	cmp	r3, #32
 800ad9a:	f040 808c 	bne.w	800aeb6 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <HAL_UART_Transmit_IT+0x26>
 800ada4:	88fb      	ldrh	r3, [r7, #6]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e084      	b.n	800aeb8 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d101      	bne.n	800adbc <HAL_UART_Transmit_IT+0x38>
 800adb8:	2302      	movs	r3, #2
 800adba:	e07d      	b.n	800aeb8 <HAL_UART_Transmit_IT+0x134>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	88fa      	ldrh	r2, [r7, #6]
 800adce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	88fa      	ldrh	r2, [r7, #6]
 800add6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2221      	movs	r2, #33	; 0x21
 800adec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf8:	d12e      	bne.n	800ae58 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae02:	d107      	bne.n	800ae14 <HAL_UART_Transmit_IT+0x90>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d103      	bne.n	800ae14 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4a2d      	ldr	r2, [pc, #180]	; (800aec4 <HAL_UART_Transmit_IT+0x140>)
 800ae10:	675a      	str	r2, [r3, #116]	; 0x74
 800ae12:	e002      	b.n	800ae1a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4a2c      	ldr	r2, [pc, #176]	; (800aec8 <HAL_UART_Transmit_IT+0x144>)
 800ae18:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3308      	adds	r3, #8
 800ae28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	e853 3f00 	ldrex	r3, [r3]
 800ae30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae38:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3308      	adds	r3, #8
 800ae40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae42:	637a      	str	r2, [r7, #52]	; 0x34
 800ae44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae4a:	e841 2300 	strex	r3, r2, [r1]
 800ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1e5      	bne.n	800ae22 <HAL_UART_Transmit_IT+0x9e>
 800ae56:	e02c      	b.n	800aeb2 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae60:	d107      	bne.n	800ae72 <HAL_UART_Transmit_IT+0xee>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d103      	bne.n	800ae72 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4a17      	ldr	r2, [pc, #92]	; (800aecc <HAL_UART_Transmit_IT+0x148>)
 800ae6e:	675a      	str	r2, [r3, #116]	; 0x74
 800ae70:	e002      	b.n	800ae78 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4a16      	ldr	r2, [pc, #88]	; (800aed0 <HAL_UART_Transmit_IT+0x14c>)
 800ae76:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9e:	623b      	str	r3, [r7, #32]
 800aea0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea2:	69f9      	ldr	r1, [r7, #28]
 800aea4:	6a3a      	ldr	r2, [r7, #32]
 800aea6:	e841 2300 	strex	r3, r2, [r1]
 800aeaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1e6      	bne.n	800ae80 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	e000      	b.n	800aeb8 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800aeb6:	2302      	movs	r3, #2
  }
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3744      	adds	r7, #68	; 0x44
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	0800c921 	.word	0x0800c921
 800aec8:	0800c841 	.word	0x0800c841
 800aecc:	0800c77f 	.word	0x0800c77f
 800aed0:	0800c6c7 	.word	0x0800c6c7

0800aed4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b08a      	sub	sp, #40	; 0x28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	4613      	mov	r3, r2
 800aee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aee8:	2b20      	cmp	r3, #32
 800aeea:	d17a      	bne.n	800afe2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <HAL_UART_Transmit_DMA+0x24>
 800aef2:	88fb      	ldrh	r3, [r7, #6]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d101      	bne.n	800aefc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e073      	b.n	800afe4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af02:	2b01      	cmp	r3, #1
 800af04:	d101      	bne.n	800af0a <HAL_UART_Transmit_DMA+0x36>
 800af06:	2302      	movs	r3, #2
 800af08:	e06c      	b.n	800afe4 <HAL_UART_Transmit_DMA+0x110>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	88fa      	ldrh	r2, [r7, #6]
 800af1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	88fa      	ldrh	r2, [r7, #6]
 800af24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2221      	movs	r2, #33	; 0x21
 800af34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d02c      	beq.n	800af9a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af44:	4a29      	ldr	r2, [pc, #164]	; (800afec <HAL_UART_Transmit_DMA+0x118>)
 800af46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af4c:	4a28      	ldr	r2, [pc, #160]	; (800aff0 <HAL_UART_Transmit_DMA+0x11c>)
 800af4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af54:	4a27      	ldr	r2, [pc, #156]	; (800aff4 <HAL_UART_Transmit_DMA+0x120>)
 800af56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af5c:	2200      	movs	r2, #0
 800af5e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af68:	4619      	mov	r1, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3328      	adds	r3, #40	; 0x28
 800af70:	461a      	mov	r2, r3
 800af72:	88fb      	ldrh	r3, [r7, #6]
 800af74:	f7fb ff56 	bl	8006e24 <HAL_DMA_Start_IT>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00d      	beq.n	800af9a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2210      	movs	r2, #16
 800af82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2220      	movs	r2, #32
 800af92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e024      	b.n	800afe4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2240      	movs	r2, #64	; 0x40
 800afa0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3308      	adds	r3, #8
 800afb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	e853 3f00 	ldrex	r3, [r3]
 800afb8:	613b      	str	r3, [r7, #16]
   return(result);
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc0:	627b      	str	r3, [r7, #36]	; 0x24
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afca:	623a      	str	r2, [r7, #32]
 800afcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afce:	69f9      	ldr	r1, [r7, #28]
 800afd0:	6a3a      	ldr	r2, [r7, #32]
 800afd2:	e841 2300 	strex	r3, r2, [r1]
 800afd6:	61bb      	str	r3, [r7, #24]
   return(result);
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e5      	bne.n	800afaa <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	e000      	b.n	800afe4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800afe2:	2302      	movs	r3, #2
  }
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3728      	adds	r7, #40	; 0x28
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	0800c407 	.word	0x0800c407
 800aff0:	0800c4a1 	.word	0x0800c4a1
 800aff4:	0800c61b 	.word	0x0800c61b

0800aff8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08a      	sub	sp, #40	; 0x28
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	4613      	mov	r3, r2
 800b004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b00c:	2b20      	cmp	r3, #32
 800b00e:	d142      	bne.n	800b096 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <HAL_UART_Receive_DMA+0x24>
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e03b      	b.n	800b098 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b026:	2b01      	cmp	r3, #1
 800b028:	d101      	bne.n	800b02e <HAL_UART_Receive_DMA+0x36>
 800b02a:	2302      	movs	r3, #2
 800b02c:	e034      	b.n	800b098 <HAL_UART_Receive_DMA+0xa0>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a17      	ldr	r2, [pc, #92]	; (800b0a0 <HAL_UART_Receive_DMA+0xa8>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d01f      	beq.n	800b086 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d018      	beq.n	800b086 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	e853 3f00 	ldrex	r3, [r3]
 800b060:	613b      	str	r3, [r7, #16]
   return(result);
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	623b      	str	r3, [r7, #32]
 800b074:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b076:	69f9      	ldr	r1, [r7, #28]
 800b078:	6a3a      	ldr	r2, [r7, #32]
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e6      	bne.n	800b054 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	461a      	mov	r2, r3
 800b08a:	68b9      	ldr	r1, [r7, #8]
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f001 f86b 	bl	800c168 <UART_Start_Receive_DMA>
 800b092:	4603      	mov	r3, r0
 800b094:	e000      	b.n	800b098 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b096:	2302      	movs	r3, #2
  }
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3728      	adds	r7, #40	; 0x28
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	40008000 	.word	0x40008000

0800b0a4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b090      	sub	sp, #64	; 0x40
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c6:	2b80      	cmp	r3, #128	; 0x80
 800b0c8:	d139      	bne.n	800b13e <HAL_UART_DMAStop+0x9a>
 800b0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0cc:	2b21      	cmp	r3, #33	; 0x21
 800b0ce:	d136      	bne.n	800b13e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e5      	bne.n	800b0d0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d015      	beq.n	800b138 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b110:	4618      	mov	r0, r3
 800b112:	f7fb ff02 	bl	8006f1a <HAL_DMA_Abort>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00d      	beq.n	800b138 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b120:	4618      	mov	r0, r3
 800b122:	f7fc f869 	bl	80071f8 <HAL_DMA_GetError>
 800b126:	4603      	mov	r3, r0
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d105      	bne.n	800b138 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2210      	movs	r2, #16
 800b130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e044      	b.n	800b1c2 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 f8bd 	bl	800c2b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b148:	2b40      	cmp	r3, #64	; 0x40
 800b14a:	d139      	bne.n	800b1c0 <HAL_UART_DMAStop+0x11c>
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	2b22      	cmp	r3, #34	; 0x22
 800b150:	d136      	bne.n	800b1c0 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3308      	adds	r3, #8
 800b158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	60bb      	str	r3, [r7, #8]
   return(result);
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b168:	633b      	str	r3, [r7, #48]	; 0x30
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3308      	adds	r3, #8
 800b170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b172:	61ba      	str	r2, [r7, #24]
 800b174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b176:	6979      	ldr	r1, [r7, #20]
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	e841 2300 	strex	r3, r2, [r1]
 800b17e:	613b      	str	r3, [r7, #16]
   return(result);
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e5      	bne.n	800b152 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d015      	beq.n	800b1ba <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b192:	4618      	mov	r0, r3
 800b194:	f7fb fec1 	bl	8006f1a <HAL_DMA_Abort>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00d      	beq.n	800b1ba <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fc f828 	bl	80071f8 <HAL_DMA_GetError>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b20      	cmp	r3, #32
 800b1ac:	d105      	bne.n	800b1ba <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2210      	movs	r2, #16
 800b1b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e003      	b.n	800b1c2 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f001 f8bd 	bl	800c33a <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3740      	adds	r7, #64	; 0x40
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b0ba      	sub	sp, #232	; 0xe8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b1f6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b204:	2b00      	cmp	r3, #0
 800b206:	d11b      	bne.n	800b240 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b20c:	f003 0320 	and.w	r3, r3, #32
 800b210:	2b00      	cmp	r3, #0
 800b212:	d015      	beq.n	800b240 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b218:	f003 0320 	and.w	r3, r3, #32
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d105      	bne.n	800b22c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d009      	beq.n	800b240 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 82d6 	beq.w	800b7e2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	4798      	blx	r3
      }
      return;
 800b23e:	e2d0      	b.n	800b7e2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b244:	2b00      	cmp	r3, #0
 800b246:	f000 811f 	beq.w	800b488 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b24a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b24e:	4b8b      	ldr	r3, [pc, #556]	; (800b47c <HAL_UART_IRQHandler+0x2b0>)
 800b250:	4013      	ands	r3, r2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d106      	bne.n	800b264 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b256:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b25a:	4b89      	ldr	r3, [pc, #548]	; (800b480 <HAL_UART_IRQHandler+0x2b4>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f000 8112 	beq.w	800b488 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d011      	beq.n	800b294 <HAL_UART_IRQHandler+0xc8>
 800b270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00b      	beq.n	800b294 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2201      	movs	r2, #1
 800b282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b28a:	f043 0201 	orr.w	r2, r3, #1
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b298:	f003 0302 	and.w	r3, r3, #2
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d011      	beq.n	800b2c4 <HAL_UART_IRQHandler+0xf8>
 800b2a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00b      	beq.n	800b2c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ba:	f043 0204 	orr.w	r2, r3, #4
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2c8:	f003 0304 	and.w	r3, r3, #4
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d011      	beq.n	800b2f4 <HAL_UART_IRQHandler+0x128>
 800b2d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2204      	movs	r2, #4
 800b2e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ea:	f043 0202 	orr.w	r2, r3, #2
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f8:	f003 0308 	and.w	r3, r3, #8
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d017      	beq.n	800b330 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b304:	f003 0320 	and.w	r3, r3, #32
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d105      	bne.n	800b318 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b30c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b310:	4b5a      	ldr	r3, [pc, #360]	; (800b47c <HAL_UART_IRQHandler+0x2b0>)
 800b312:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00b      	beq.n	800b330 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2208      	movs	r2, #8
 800b31e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b326:	f043 0208 	orr.w	r2, r3, #8
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d012      	beq.n	800b362 <HAL_UART_IRQHandler+0x196>
 800b33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00c      	beq.n	800b362 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b358:	f043 0220 	orr.w	r2, r3, #32
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 823c 	beq.w	800b7e6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b372:	f003 0320 	and.w	r3, r3, #32
 800b376:	2b00      	cmp	r3, #0
 800b378:	d013      	beq.n	800b3a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b37a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b37e:	f003 0320 	and.w	r3, r3, #32
 800b382:	2b00      	cmp	r3, #0
 800b384:	d105      	bne.n	800b392 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b38a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d007      	beq.n	800b3a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b6:	2b40      	cmp	r3, #64	; 0x40
 800b3b8:	d005      	beq.n	800b3c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b3ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d04f      	beq.n	800b466 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 ffb7 	bl	800c33a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d6:	2b40      	cmp	r3, #64	; 0x40
 800b3d8:	d141      	bne.n	800b45e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3308      	adds	r3, #8
 800b3e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b3f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3308      	adds	r3, #8
 800b402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b406:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b40a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b416:	e841 2300 	strex	r3, r2, [r1]
 800b41a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b41e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1d9      	bne.n	800b3da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d013      	beq.n	800b456 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b432:	4a14      	ldr	r2, [pc, #80]	; (800b484 <HAL_UART_IRQHandler+0x2b8>)
 800b434:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fb fdc6 	bl	8006fcc <HAL_DMA_Abort_IT>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d017      	beq.n	800b476 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b450:	4610      	mov	r0, r2
 800b452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b454:	e00f      	b.n	800b476 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f9ee 	bl	800b838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b45c:	e00b      	b.n	800b476 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f9ea 	bl	800b838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b464:	e007      	b.n	800b476 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f9e6 	bl	800b838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b474:	e1b7      	b.n	800b7e6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b476:	bf00      	nop
    return;
 800b478:	e1b5      	b.n	800b7e6 <HAL_UART_IRQHandler+0x61a>
 800b47a:	bf00      	nop
 800b47c:	10000001 	.word	0x10000001
 800b480:	04000120 	.word	0x04000120
 800b484:	0800c69b 	.word	0x0800c69b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	f040 814a 	bne.w	800b726 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b496:	f003 0310 	and.w	r3, r3, #16
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f000 8143 	beq.w	800b726 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b4a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4a4:	f003 0310 	and.w	r3, r3, #16
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 813c 	beq.w	800b726 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2210      	movs	r2, #16
 800b4b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c0:	2b40      	cmp	r3, #64	; 0x40
 800b4c2:	f040 80b5 	bne.w	800b630 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 8187 	beq.w	800b7ea <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b4e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	f080 817f 	bcs.w	800b7ea <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 0320 	and.w	r3, r3, #32
 800b502:	2b00      	cmp	r3, #0
 800b504:	f040 8086 	bne.w	800b614 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b514:	e853 3f00 	ldrex	r3, [r3]
 800b518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b51c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b536:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b53e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b542:	e841 2300 	strex	r3, r2, [r1]
 800b546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b54a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1da      	bne.n	800b508 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3308      	adds	r3, #8
 800b558:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b55c:	e853 3f00 	ldrex	r3, [r3]
 800b560:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b564:	f023 0301 	bic.w	r3, r3, #1
 800b568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3308      	adds	r3, #8
 800b572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b576:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b57a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b57e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b582:	e841 2300 	strex	r3, r2, [r1]
 800b586:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e1      	bne.n	800b552 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3308      	adds	r3, #8
 800b594:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b598:	e853 3f00 	ldrex	r3, [r3]
 800b59c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b59e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b5b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b5b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b5c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1e3      	bne.n	800b58e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5dc:	e853 3f00 	ldrex	r3, [r3]
 800b5e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5e4:	f023 0310 	bic.w	r3, r3, #16
 800b5e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5fe:	e841 2300 	strex	r3, r2, [r1]
 800b602:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1e4      	bne.n	800b5d4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fb fc83 	bl	8006f1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b620:	b29b      	uxth	r3, r3
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	b29b      	uxth	r3, r3
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f90f 	bl	800b84c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b62e:	e0dc      	b.n	800b7ea <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 80ce 	beq.w	800b7ee <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800b652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 80c9 	beq.w	800b7ee <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	461a      	mov	r2, r3
 800b67a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b67e:	647b      	str	r3, [r7, #68]	; 0x44
 800b680:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b686:	e841 2300 	strex	r3, r2, [r1]
 800b68a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1e4      	bne.n	800b65c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3308      	adds	r3, #8
 800b698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	e853 3f00 	ldrex	r3, [r3]
 800b6a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6a8:	f023 0301 	bic.w	r3, r3, #1
 800b6ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b6ba:	633a      	str	r2, [r7, #48]	; 0x30
 800b6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c2:	e841 2300 	strex	r3, r2, [r1]
 800b6c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1e1      	bne.n	800b692 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	e853 3f00 	ldrex	r3, [r3]
 800b6ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f023 0310 	bic.w	r3, r3, #16
 800b6f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	461a      	mov	r2, r3
 800b700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b704:	61fb      	str	r3, [r7, #28]
 800b706:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b708:	69b9      	ldr	r1, [r7, #24]
 800b70a:	69fa      	ldr	r2, [r7, #28]
 800b70c:	e841 2300 	strex	r3, r2, [r1]
 800b710:	617b      	str	r3, [r7, #20]
   return(result);
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1e4      	bne.n	800b6e2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f894 	bl	800b84c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b724:	e063      	b.n	800b7ee <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b72a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00e      	beq.n	800b750 <HAL_UART_IRQHandler+0x584>
 800b732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d008      	beq.n	800b750 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b746:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f001 f989 	bl	800ca60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b74e:	e051      	b.n	800b7f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d014      	beq.n	800b786 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b764:	2b00      	cmp	r3, #0
 800b766:	d105      	bne.n	800b774 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b76c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d008      	beq.n	800b786 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d03a      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	4798      	blx	r3
    }
    return;
 800b784:	e035      	b.n	800b7f2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d009      	beq.n	800b7a6 <HAL_UART_IRQHandler+0x5da>
 800b792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f001 f933 	bl	800ca0a <UART_EndTransmit_IT>
    return;
 800b7a4:	e026      	b.n	800b7f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d009      	beq.n	800b7c6 <HAL_UART_IRQHandler+0x5fa>
 800b7b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f001 f962 	bl	800ca88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7c4:	e016      	b.n	800b7f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d010      	beq.n	800b7f4 <HAL_UART_IRQHandler+0x628>
 800b7d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	da0c      	bge.n	800b7f4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f001 f94a 	bl	800ca74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7e0:	e008      	b.n	800b7f4 <HAL_UART_IRQHandler+0x628>
      return;
 800b7e2:	bf00      	nop
 800b7e4:	e006      	b.n	800b7f4 <HAL_UART_IRQHandler+0x628>
    return;
 800b7e6:	bf00      	nop
 800b7e8:	e004      	b.n	800b7f4 <HAL_UART_IRQHandler+0x628>
      return;
 800b7ea:	bf00      	nop
 800b7ec:	e002      	b.n	800b7f4 <HAL_UART_IRQHandler+0x628>
      return;
 800b7ee:	bf00      	nop
 800b7f0:	e000      	b.n	800b7f4 <HAL_UART_IRQHandler+0x628>
    return;
 800b7f2:	bf00      	nop
  }
}
 800b7f4:	37e8      	adds	r7, #232	; 0xe8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop

0800b7fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b868:	b08c      	sub	sp, #48	; 0x30
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	689a      	ldr	r2, [r3, #8]
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	431a      	orrs	r2, r3
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	431a      	orrs	r2, r3
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	69db      	ldr	r3, [r3, #28]
 800b888:	4313      	orrs	r3, r2
 800b88a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	4bab      	ldr	r3, [pc, #684]	; (800bb40 <UART_SetConfig+0x2dc>)
 800b894:	4013      	ands	r3, r2
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	6812      	ldr	r2, [r2, #0]
 800b89a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b89c:	430b      	orrs	r3, r1
 800b89e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	68da      	ldr	r2, [r3, #12]
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4aa0      	ldr	r2, [pc, #640]	; (800bb44 <UART_SetConfig+0x2e0>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d004      	beq.n	800b8d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b8da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	6812      	ldr	r2, [r2, #0]
 800b8e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ee:	f023 010f 	bic.w	r1, r3, #15
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a91      	ldr	r2, [pc, #580]	; (800bb48 <UART_SetConfig+0x2e4>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d125      	bne.n	800b954 <UART_SetConfig+0xf0>
 800b908:	4b90      	ldr	r3, [pc, #576]	; (800bb4c <UART_SetConfig+0x2e8>)
 800b90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b90e:	f003 0303 	and.w	r3, r3, #3
 800b912:	2b03      	cmp	r3, #3
 800b914:	d81a      	bhi.n	800b94c <UART_SetConfig+0xe8>
 800b916:	a201      	add	r2, pc, #4	; (adr r2, 800b91c <UART_SetConfig+0xb8>)
 800b918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91c:	0800b92d 	.word	0x0800b92d
 800b920:	0800b93d 	.word	0x0800b93d
 800b924:	0800b935 	.word	0x0800b935
 800b928:	0800b945 	.word	0x0800b945
 800b92c:	2301      	movs	r3, #1
 800b92e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b932:	e0d6      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b934:	2302      	movs	r3, #2
 800b936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b93a:	e0d2      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b93c:	2304      	movs	r3, #4
 800b93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b942:	e0ce      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b944:	2308      	movs	r3, #8
 800b946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b94a:	e0ca      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b94c:	2310      	movs	r3, #16
 800b94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b952:	e0c6      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a7d      	ldr	r2, [pc, #500]	; (800bb50 <UART_SetConfig+0x2ec>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d138      	bne.n	800b9d0 <UART_SetConfig+0x16c>
 800b95e:	4b7b      	ldr	r3, [pc, #492]	; (800bb4c <UART_SetConfig+0x2e8>)
 800b960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b964:	f003 030c 	and.w	r3, r3, #12
 800b968:	2b0c      	cmp	r3, #12
 800b96a:	d82d      	bhi.n	800b9c8 <UART_SetConfig+0x164>
 800b96c:	a201      	add	r2, pc, #4	; (adr r2, 800b974 <UART_SetConfig+0x110>)
 800b96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b972:	bf00      	nop
 800b974:	0800b9a9 	.word	0x0800b9a9
 800b978:	0800b9c9 	.word	0x0800b9c9
 800b97c:	0800b9c9 	.word	0x0800b9c9
 800b980:	0800b9c9 	.word	0x0800b9c9
 800b984:	0800b9b9 	.word	0x0800b9b9
 800b988:	0800b9c9 	.word	0x0800b9c9
 800b98c:	0800b9c9 	.word	0x0800b9c9
 800b990:	0800b9c9 	.word	0x0800b9c9
 800b994:	0800b9b1 	.word	0x0800b9b1
 800b998:	0800b9c9 	.word	0x0800b9c9
 800b99c:	0800b9c9 	.word	0x0800b9c9
 800b9a0:	0800b9c9 	.word	0x0800b9c9
 800b9a4:	0800b9c1 	.word	0x0800b9c1
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9ae:	e098      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9b6:	e094      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b9b8:	2304      	movs	r3, #4
 800b9ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9be:	e090      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b9c0:	2308      	movs	r3, #8
 800b9c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9c6:	e08c      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b9c8:	2310      	movs	r3, #16
 800b9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9ce:	e088      	b.n	800bae2 <UART_SetConfig+0x27e>
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a5f      	ldr	r2, [pc, #380]	; (800bb54 <UART_SetConfig+0x2f0>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d125      	bne.n	800ba26 <UART_SetConfig+0x1c2>
 800b9da:	4b5c      	ldr	r3, [pc, #368]	; (800bb4c <UART_SetConfig+0x2e8>)
 800b9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b9e4:	2b30      	cmp	r3, #48	; 0x30
 800b9e6:	d016      	beq.n	800ba16 <UART_SetConfig+0x1b2>
 800b9e8:	2b30      	cmp	r3, #48	; 0x30
 800b9ea:	d818      	bhi.n	800ba1e <UART_SetConfig+0x1ba>
 800b9ec:	2b20      	cmp	r3, #32
 800b9ee:	d00a      	beq.n	800ba06 <UART_SetConfig+0x1a2>
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	d814      	bhi.n	800ba1e <UART_SetConfig+0x1ba>
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <UART_SetConfig+0x19a>
 800b9f8:	2b10      	cmp	r3, #16
 800b9fa:	d008      	beq.n	800ba0e <UART_SetConfig+0x1aa>
 800b9fc:	e00f      	b.n	800ba1e <UART_SetConfig+0x1ba>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba04:	e06d      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba06:	2302      	movs	r3, #2
 800ba08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba0c:	e069      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba0e:	2304      	movs	r3, #4
 800ba10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba14:	e065      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba16:	2308      	movs	r3, #8
 800ba18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba1c:	e061      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba1e:	2310      	movs	r3, #16
 800ba20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba24:	e05d      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a4b      	ldr	r2, [pc, #300]	; (800bb58 <UART_SetConfig+0x2f4>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d125      	bne.n	800ba7c <UART_SetConfig+0x218>
 800ba30:	4b46      	ldr	r3, [pc, #280]	; (800bb4c <UART_SetConfig+0x2e8>)
 800ba32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ba3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ba3c:	d016      	beq.n	800ba6c <UART_SetConfig+0x208>
 800ba3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ba40:	d818      	bhi.n	800ba74 <UART_SetConfig+0x210>
 800ba42:	2b80      	cmp	r3, #128	; 0x80
 800ba44:	d00a      	beq.n	800ba5c <UART_SetConfig+0x1f8>
 800ba46:	2b80      	cmp	r3, #128	; 0x80
 800ba48:	d814      	bhi.n	800ba74 <UART_SetConfig+0x210>
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <UART_SetConfig+0x1f0>
 800ba4e:	2b40      	cmp	r3, #64	; 0x40
 800ba50:	d008      	beq.n	800ba64 <UART_SetConfig+0x200>
 800ba52:	e00f      	b.n	800ba74 <UART_SetConfig+0x210>
 800ba54:	2300      	movs	r3, #0
 800ba56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba5a:	e042      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba62:	e03e      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba64:	2304      	movs	r3, #4
 800ba66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba6a:	e03a      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba6c:	2308      	movs	r3, #8
 800ba6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba72:	e036      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba74:	2310      	movs	r3, #16
 800ba76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba7a:	e032      	b.n	800bae2 <UART_SetConfig+0x27e>
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a30      	ldr	r2, [pc, #192]	; (800bb44 <UART_SetConfig+0x2e0>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d12a      	bne.n	800badc <UART_SetConfig+0x278>
 800ba86:	4b31      	ldr	r3, [pc, #196]	; (800bb4c <UART_SetConfig+0x2e8>)
 800ba88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ba90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba94:	d01a      	beq.n	800bacc <UART_SetConfig+0x268>
 800ba96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba9a:	d81b      	bhi.n	800bad4 <UART_SetConfig+0x270>
 800ba9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baa0:	d00c      	beq.n	800babc <UART_SetConfig+0x258>
 800baa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baa6:	d815      	bhi.n	800bad4 <UART_SetConfig+0x270>
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d003      	beq.n	800bab4 <UART_SetConfig+0x250>
 800baac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bab0:	d008      	beq.n	800bac4 <UART_SetConfig+0x260>
 800bab2:	e00f      	b.n	800bad4 <UART_SetConfig+0x270>
 800bab4:	2300      	movs	r3, #0
 800bab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baba:	e012      	b.n	800bae2 <UART_SetConfig+0x27e>
 800babc:	2302      	movs	r3, #2
 800babe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bac2:	e00e      	b.n	800bae2 <UART_SetConfig+0x27e>
 800bac4:	2304      	movs	r3, #4
 800bac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baca:	e00a      	b.n	800bae2 <UART_SetConfig+0x27e>
 800bacc:	2308      	movs	r3, #8
 800bace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bad2:	e006      	b.n	800bae2 <UART_SetConfig+0x27e>
 800bad4:	2310      	movs	r3, #16
 800bad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bada:	e002      	b.n	800bae2 <UART_SetConfig+0x27e>
 800badc:	2310      	movs	r3, #16
 800bade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a17      	ldr	r2, [pc, #92]	; (800bb44 <UART_SetConfig+0x2e0>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	f040 80a8 	bne.w	800bc3e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800baee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800baf2:	2b08      	cmp	r3, #8
 800baf4:	d834      	bhi.n	800bb60 <UART_SetConfig+0x2fc>
 800baf6:	a201      	add	r2, pc, #4	; (adr r2, 800bafc <UART_SetConfig+0x298>)
 800baf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafc:	0800bb21 	.word	0x0800bb21
 800bb00:	0800bb61 	.word	0x0800bb61
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb61 	.word	0x0800bb61
 800bb0c:	0800bb2f 	.word	0x0800bb2f
 800bb10:	0800bb61 	.word	0x0800bb61
 800bb14:	0800bb61 	.word	0x0800bb61
 800bb18:	0800bb61 	.word	0x0800bb61
 800bb1c:	0800bb37 	.word	0x0800bb37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb20:	f7fe f8fa 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800bb24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb26:	e021      	b.n	800bb6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb28:	4b0c      	ldr	r3, [pc, #48]	; (800bb5c <UART_SetConfig+0x2f8>)
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb2c:	e01e      	b.n	800bb6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb2e:	f7fe f887 	bl	8009c40 <HAL_RCC_GetSysClockFreq>
 800bb32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb34:	e01a      	b.n	800bb6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb3c:	e016      	b.n	800bb6c <UART_SetConfig+0x308>
 800bb3e:	bf00      	nop
 800bb40:	cfff69f3 	.word	0xcfff69f3
 800bb44:	40008000 	.word	0x40008000
 800bb48:	40013800 	.word	0x40013800
 800bb4c:	40021000 	.word	0x40021000
 800bb50:	40004400 	.word	0x40004400
 800bb54:	40004800 	.word	0x40004800
 800bb58:	40004c00 	.word	0x40004c00
 800bb5c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bb60:	2300      	movs	r3, #0
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bb64:	2301      	movs	r3, #1
 800bb66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bb6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f000 812a 	beq.w	800bdc8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb78:	4a9e      	ldr	r2, [pc, #632]	; (800bdf4 <UART_SetConfig+0x590>)
 800bb7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb86:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	005b      	lsls	r3, r3, #1
 800bb90:	4413      	add	r3, r2
 800bb92:	69ba      	ldr	r2, [r7, #24]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d305      	bcc.n	800bba4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d903      	bls.n	800bbac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bbaa:	e10d      	b.n	800bdc8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbae:	2200      	movs	r2, #0
 800bbb0:	60bb      	str	r3, [r7, #8]
 800bbb2:	60fa      	str	r2, [r7, #12]
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb8:	4a8e      	ldr	r2, [pc, #568]	; (800bdf4 <UART_SetConfig+0x590>)
 800bbba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	603b      	str	r3, [r7, #0]
 800bbc4:	607a      	str	r2, [r7, #4]
 800bbc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bbce:	f7f5 f893 	bl	8000cf8 <__aeabi_uldivmod>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	f04f 0200 	mov.w	r2, #0
 800bbde:	f04f 0300 	mov.w	r3, #0
 800bbe2:	020b      	lsls	r3, r1, #8
 800bbe4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bbe8:	0202      	lsls	r2, r0, #8
 800bbea:	6979      	ldr	r1, [r7, #20]
 800bbec:	6849      	ldr	r1, [r1, #4]
 800bbee:	0849      	lsrs	r1, r1, #1
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	eb12 0804 	adds.w	r8, r2, r4
 800bbfa:	eb43 0905 	adc.w	r9, r3, r5
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	469a      	mov	sl, r3
 800bc06:	4693      	mov	fp, r2
 800bc08:	4652      	mov	r2, sl
 800bc0a:	465b      	mov	r3, fp
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f7f5 f872 	bl	8000cf8 <__aeabi_uldivmod>
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	4613      	mov	r3, r2
 800bc1a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc1c:	6a3b      	ldr	r3, [r7, #32]
 800bc1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc22:	d308      	bcc.n	800bc36 <UART_SetConfig+0x3d2>
 800bc24:	6a3b      	ldr	r3, [r7, #32]
 800bc26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc2a:	d204      	bcs.n	800bc36 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6a3a      	ldr	r2, [r7, #32]
 800bc32:	60da      	str	r2, [r3, #12]
 800bc34:	e0c8      	b.n	800bdc8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc3c:	e0c4      	b.n	800bdc8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	69db      	ldr	r3, [r3, #28]
 800bc42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc46:	d167      	bne.n	800bd18 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800bc48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc4c:	2b08      	cmp	r3, #8
 800bc4e:	d828      	bhi.n	800bca2 <UART_SetConfig+0x43e>
 800bc50:	a201      	add	r2, pc, #4	; (adr r2, 800bc58 <UART_SetConfig+0x3f4>)
 800bc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc56:	bf00      	nop
 800bc58:	0800bc7d 	.word	0x0800bc7d
 800bc5c:	0800bc85 	.word	0x0800bc85
 800bc60:	0800bc8d 	.word	0x0800bc8d
 800bc64:	0800bca3 	.word	0x0800bca3
 800bc68:	0800bc93 	.word	0x0800bc93
 800bc6c:	0800bca3 	.word	0x0800bca3
 800bc70:	0800bca3 	.word	0x0800bca3
 800bc74:	0800bca3 	.word	0x0800bca3
 800bc78:	0800bc9b 	.word	0x0800bc9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc7c:	f7fe f84c 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800bc80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc82:	e014      	b.n	800bcae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc84:	f7fe f85e 	bl	8009d44 <HAL_RCC_GetPCLK2Freq>
 800bc88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc8a:	e010      	b.n	800bcae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc8c:	4b5a      	ldr	r3, [pc, #360]	; (800bdf8 <UART_SetConfig+0x594>)
 800bc8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc90:	e00d      	b.n	800bcae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc92:	f7fd ffd5 	bl	8009c40 <HAL_RCC_GetSysClockFreq>
 800bc96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc98:	e009      	b.n	800bcae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bca0:	e005      	b.n	800bcae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800bca2:	2300      	movs	r3, #0
 800bca4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bcac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 8089 	beq.w	800bdc8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcba:	4a4e      	ldr	r2, [pc, #312]	; (800bdf4 <UART_SetConfig+0x590>)
 800bcbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcc8:	005a      	lsls	r2, r3, #1
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	085b      	lsrs	r3, r3, #1
 800bcd0:	441a      	add	r2, r3
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcdc:	6a3b      	ldr	r3, [r7, #32]
 800bcde:	2b0f      	cmp	r3, #15
 800bce0:	d916      	bls.n	800bd10 <UART_SetConfig+0x4ac>
 800bce2:	6a3b      	ldr	r3, [r7, #32]
 800bce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bce8:	d212      	bcs.n	800bd10 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	f023 030f 	bic.w	r3, r3, #15
 800bcf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	085b      	lsrs	r3, r3, #1
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f003 0307 	and.w	r3, r3, #7
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	8bfb      	ldrh	r3, [r7, #30]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	8bfa      	ldrh	r2, [r7, #30]
 800bd0c:	60da      	str	r2, [r3, #12]
 800bd0e:	e05b      	b.n	800bdc8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd16:	e057      	b.n	800bdc8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd1c:	2b08      	cmp	r3, #8
 800bd1e:	d828      	bhi.n	800bd72 <UART_SetConfig+0x50e>
 800bd20:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <UART_SetConfig+0x4c4>)
 800bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bd4d 	.word	0x0800bd4d
 800bd2c:	0800bd55 	.word	0x0800bd55
 800bd30:	0800bd5d 	.word	0x0800bd5d
 800bd34:	0800bd73 	.word	0x0800bd73
 800bd38:	0800bd63 	.word	0x0800bd63
 800bd3c:	0800bd73 	.word	0x0800bd73
 800bd40:	0800bd73 	.word	0x0800bd73
 800bd44:	0800bd73 	.word	0x0800bd73
 800bd48:	0800bd6b 	.word	0x0800bd6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd4c:	f7fd ffe4 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800bd50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd52:	e014      	b.n	800bd7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd54:	f7fd fff6 	bl	8009d44 <HAL_RCC_GetPCLK2Freq>
 800bd58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd5a:	e010      	b.n	800bd7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd5c:	4b26      	ldr	r3, [pc, #152]	; (800bdf8 <UART_SetConfig+0x594>)
 800bd5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd60:	e00d      	b.n	800bd7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd62:	f7fd ff6d 	bl	8009c40 <HAL_RCC_GetSysClockFreq>
 800bd66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd68:	e009      	b.n	800bd7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd70:	e005      	b.n	800bd7e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd7c:	bf00      	nop
    }

    if (pclk != 0U)
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d021      	beq.n	800bdc8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd88:	4a1a      	ldr	r2, [pc, #104]	; (800bdf4 <UART_SetConfig+0x590>)
 800bd8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd92:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	085b      	lsrs	r3, r3, #1
 800bd9c:	441a      	add	r2, r3
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	2b0f      	cmp	r3, #15
 800bdac:	d909      	bls.n	800bdc2 <UART_SetConfig+0x55e>
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdb4:	d205      	bcs.n	800bdc2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	60da      	str	r2, [r3, #12]
 800bdc0:	e002      	b.n	800bdc8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	2200      	movs	r2, #0
 800bddc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2200      	movs	r2, #0
 800bde2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bde4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3730      	adds	r7, #48	; 0x30
 800bdec:	46bd      	mov	sp, r7
 800bdee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdf2:	bf00      	nop
 800bdf4:	08012008 	.word	0x08012008
 800bdf8:	00f42400 	.word	0x00f42400

0800bdfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be08:	f003 0301 	and.w	r3, r3, #1
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00a      	beq.n	800be26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	430a      	orrs	r2, r1
 800be24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2a:	f003 0302 	and.w	r3, r3, #2
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00a      	beq.n	800be48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	430a      	orrs	r2, r1
 800be46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4c:	f003 0304 	and.w	r3, r3, #4
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00a      	beq.n	800be6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	430a      	orrs	r2, r1
 800be68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be6e:	f003 0308 	and.w	r3, r3, #8
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00a      	beq.n	800be8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	430a      	orrs	r2, r1
 800be8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be90:	f003 0310 	and.w	r3, r3, #16
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00a      	beq.n	800beae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	430a      	orrs	r2, r1
 800beac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb2:	f003 0320 	and.w	r3, r3, #32
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00a      	beq.n	800bed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	430a      	orrs	r2, r1
 800bece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d01a      	beq.n	800bf12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	430a      	orrs	r2, r1
 800bef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800befa:	d10a      	bne.n	800bf12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	430a      	orrs	r2, r1
 800bf10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	430a      	orrs	r2, r1
 800bf32:	605a      	str	r2, [r3, #4]
  }
}
 800bf34:	bf00      	nop
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af02      	add	r7, sp, #8
 800bf46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf50:	f7fa fb4a 	bl	80065e8 <HAL_GetTick>
 800bf54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0308 	and.w	r3, r3, #8
 800bf60:	2b08      	cmp	r3, #8
 800bf62:	d10e      	bne.n	800bf82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f82f 	bl	800bfd6 <UART_WaitOnFlagUntilTimeout>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	e025      	b.n	800bfce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f003 0304 	and.w	r3, r3, #4
 800bf8c:	2b04      	cmp	r3, #4
 800bf8e:	d10e      	bne.n	800bfae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f819 	bl	800bfd6 <UART_WaitOnFlagUntilTimeout>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d001      	beq.n	800bfae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	e00f      	b.n	800bfce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b09c      	sub	sp, #112	; 0x70
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	60b9      	str	r1, [r7, #8]
 800bfe0:	603b      	str	r3, [r7, #0]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfe6:	e0a9      	b.n	800c13c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfee:	f000 80a5 	beq.w	800c13c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bff2:	f7fa faf9 	bl	80065e8 <HAL_GetTick>
 800bff6:	4602      	mov	r2, r0
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bffe:	429a      	cmp	r2, r3
 800c000:	d302      	bcc.n	800c008 <UART_WaitOnFlagUntilTimeout+0x32>
 800c002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c004:	2b00      	cmp	r3, #0
 800c006:	d140      	bne.n	800c08a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c010:	e853 3f00 	ldrex	r3, [r3]
 800c014:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c018:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c01c:	667b      	str	r3, [r7, #100]	; 0x64
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c026:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c028:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c02c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c02e:	e841 2300 	strex	r3, r2, [r1]
 800c032:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1e6      	bne.n	800c008 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3308      	adds	r3, #8
 800c040:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c044:	e853 3f00 	ldrex	r3, [r3]
 800c048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	f023 0301 	bic.w	r3, r3, #1
 800c050:	663b      	str	r3, [r7, #96]	; 0x60
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3308      	adds	r3, #8
 800c058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c05a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c05c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c062:	e841 2300 	strex	r3, r2, [r1]
 800c066:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1e5      	bne.n	800c03a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2220      	movs	r2, #32
 800c072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2220      	movs	r2, #32
 800c07a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c086:	2303      	movs	r3, #3
 800c088:	e069      	b.n	800c15e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b00      	cmp	r3, #0
 800c096:	d051      	beq.n	800c13c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0a6:	d149      	bne.n	800c13c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	e853 3f00 	ldrex	r3, [r3]
 800c0be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c0c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c0d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0d8:	e841 2300 	strex	r3, r2, [r1]
 800c0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1e6      	bne.n	800c0b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	e853 3f00 	ldrex	r3, [r3]
 800c0f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	f023 0301 	bic.w	r3, r3, #1
 800c0fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3308      	adds	r3, #8
 800c102:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c104:	623a      	str	r2, [r7, #32]
 800c106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c108:	69f9      	ldr	r1, [r7, #28]
 800c10a:	6a3a      	ldr	r2, [r7, #32]
 800c10c:	e841 2300 	strex	r3, r2, [r1]
 800c110:	61bb      	str	r3, [r7, #24]
   return(result);
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1e5      	bne.n	800c0e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2220      	movs	r2, #32
 800c11c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2220      	movs	r2, #32
 800c124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2220      	movs	r2, #32
 800c12c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c138:	2303      	movs	r3, #3
 800c13a:	e010      	b.n	800c15e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	69da      	ldr	r2, [r3, #28]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	4013      	ands	r3, r2
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	429a      	cmp	r2, r3
 800c14a:	bf0c      	ite	eq
 800c14c:	2301      	moveq	r3, #1
 800c14e:	2300      	movne	r3, #0
 800c150:	b2db      	uxtb	r3, r3
 800c152:	461a      	mov	r2, r3
 800c154:	79fb      	ldrb	r3, [r7, #7]
 800c156:	429a      	cmp	r2, r3
 800c158:	f43f af46 	beq.w	800bfe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3770      	adds	r7, #112	; 0x70
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
	...

0800c168 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b096      	sub	sp, #88	; 0x58
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	4613      	mov	r3, r2
 800c174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	68ba      	ldr	r2, [r7, #8]
 800c17a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	88fa      	ldrh	r2, [r7, #6]
 800c180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2200      	movs	r2, #0
 800c188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2222      	movs	r2, #34	; 0x22
 800c190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d02c      	beq.n	800c1f6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1a0:	4a42      	ldr	r2, [pc, #264]	; (800c2ac <UART_Start_Receive_DMA+0x144>)
 800c1a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1a8:	4a41      	ldr	r2, [pc, #260]	; (800c2b0 <UART_Start_Receive_DMA+0x148>)
 800c1aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1b0:	4a40      	ldr	r2, [pc, #256]	; (800c2b4 <UART_Start_Receive_DMA+0x14c>)
 800c1b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	3324      	adds	r3, #36	; 0x24
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	88fb      	ldrh	r3, [r7, #6]
 800c1d0:	f7fa fe28 	bl	8006e24 <HAL_DMA_Start_IT>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00d      	beq.n	800c1f6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2210      	movs	r2, #16
 800c1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e055      	b.n	800c2a2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	691b      	ldr	r3, [r3, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d018      	beq.n	800c238 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c20e:	e853 3f00 	ldrex	r3, [r3]
 800c212:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c21a:	657b      	str	r3, [r7, #84]	; 0x54
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	461a      	mov	r2, r3
 800c222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c224:	64bb      	str	r3, [r7, #72]	; 0x48
 800c226:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c228:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c22a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c22c:	e841 2300 	strex	r3, r2, [r1]
 800c230:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e6      	bne.n	800c206 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3308      	adds	r3, #8
 800c23e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	e853 3f00 	ldrex	r3, [r3]
 800c246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	f043 0301 	orr.w	r3, r3, #1
 800c24e:	653b      	str	r3, [r7, #80]	; 0x50
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3308      	adds	r3, #8
 800c256:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c258:	637a      	str	r2, [r7, #52]	; 0x34
 800c25a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c25e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c260:	e841 2300 	strex	r3, r2, [r1]
 800c264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1e5      	bne.n	800c238 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3308      	adds	r3, #8
 800c272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	e853 3f00 	ldrex	r3, [r3]
 800c27a:	613b      	str	r3, [r7, #16]
   return(result);
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3308      	adds	r3, #8
 800c28a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c28c:	623a      	str	r2, [r7, #32]
 800c28e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	69f9      	ldr	r1, [r7, #28]
 800c292:	6a3a      	ldr	r2, [r7, #32]
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	61bb      	str	r3, [r7, #24]
   return(result);
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e5      	bne.n	800c26c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3758      	adds	r7, #88	; 0x58
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	0800c4bd 	.word	0x0800c4bd
 800c2b0:	0800c5e3 	.word	0x0800c5e3
 800c2b4:	0800c61b 	.word	0x0800c61b

0800c2b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b08f      	sub	sp, #60	; 0x3c
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	e853 3f00 	ldrex	r3, [r3]
 800c2cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c2d4:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2e6:	e841 2300 	strex	r3, r2, [r1]
 800c2ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1e6      	bne.n	800c2c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3308      	adds	r3, #8
 800c2f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	e853 3f00 	ldrex	r3, [r3]
 800c300:	60bb      	str	r3, [r7, #8]
   return(result);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c308:	633b      	str	r3, [r7, #48]	; 0x30
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3308      	adds	r3, #8
 800c310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c312:	61ba      	str	r2, [r7, #24]
 800c314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c316:	6979      	ldr	r1, [r7, #20]
 800c318:	69ba      	ldr	r2, [r7, #24]
 800c31a:	e841 2300 	strex	r3, r2, [r1]
 800c31e:	613b      	str	r3, [r7, #16]
   return(result);
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1e5      	bne.n	800c2f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2220      	movs	r2, #32
 800c32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c32e:	bf00      	nop
 800c330:	373c      	adds	r7, #60	; 0x3c
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c33a:	b480      	push	{r7}
 800c33c:	b095      	sub	sp, #84	; 0x54
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c356:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c360:	643b      	str	r3, [r7, #64]	; 0x40
 800c362:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e6      	bne.n	800c342 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3308      	adds	r3, #8
 800c37a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	e853 3f00 	ldrex	r3, [r3]
 800c382:	61fb      	str	r3, [r7, #28]
   return(result);
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c38a:	f023 0301 	bic.w	r3, r3, #1
 800c38e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	3308      	adds	r3, #8
 800c396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c398:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c39a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c39e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3a0:	e841 2300 	strex	r3, r2, [r1]
 800c3a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1e3      	bne.n	800c374 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d118      	bne.n	800c3e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	e853 3f00 	ldrex	r3, [r3]
 800c3c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	f023 0310 	bic.w	r3, r3, #16
 800c3c8:	647b      	str	r3, [r7, #68]	; 0x44
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3d2:	61bb      	str	r3, [r7, #24]
 800c3d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d6:	6979      	ldr	r1, [r7, #20]
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	e841 2300 	strex	r3, r2, [r1]
 800c3de:	613b      	str	r3, [r7, #16]
   return(result);
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1e6      	bne.n	800c3b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2220      	movs	r2, #32
 800c3ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c3fa:	bf00      	nop
 800c3fc:	3754      	adds	r7, #84	; 0x54
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b090      	sub	sp, #64	; 0x40
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c412:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f003 0320 	and.w	r3, r3, #32
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d137      	bne.n	800c492 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c424:	2200      	movs	r2, #0
 800c426:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3308      	adds	r3, #8
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c434:	e853 3f00 	ldrex	r3, [r3]
 800c438:	623b      	str	r3, [r7, #32]
   return(result);
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c440:	63bb      	str	r3, [r7, #56]	; 0x38
 800c442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3308      	adds	r3, #8
 800c448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c44a:	633a      	str	r2, [r7, #48]	; 0x30
 800c44c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c452:	e841 2300 	strex	r3, r2, [r1]
 800c456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1e5      	bne.n	800c42a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	e853 3f00 	ldrex	r3, [r3]
 800c46a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c472:	637b      	str	r3, [r7, #52]	; 0x34
 800c474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	461a      	mov	r2, r3
 800c47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47c:	61fb      	str	r3, [r7, #28]
 800c47e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c480:	69b9      	ldr	r1, [r7, #24]
 800c482:	69fa      	ldr	r2, [r7, #28]
 800c484:	e841 2300 	strex	r3, r2, [r1]
 800c488:	617b      	str	r3, [r7, #20]
   return(result);
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e6      	bne.n	800c45e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c490:	e002      	b.n	800c498 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c492:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c494:	f7f6 f8f8 	bl	8002688 <HAL_UART_TxCpltCallback>
}
 800c498:	bf00      	nop
 800c49a:	3740      	adds	r7, #64	; 0x40
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f7ff f9a4 	bl	800b7fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4b4:	bf00      	nop
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b09c      	sub	sp, #112	; 0x70
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f003 0320 	and.w	r3, r3, #32
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d171      	bne.n	800c5bc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4e8:	e853 3f00 	ldrex	r3, [r3]
 800c4ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800c500:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c506:	e841 2300 	strex	r3, r2, [r1]
 800c50a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1e6      	bne.n	800c4e0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	3308      	adds	r3, #8
 800c518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51c:	e853 3f00 	ldrex	r3, [r3]
 800c520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c524:	f023 0301 	bic.w	r3, r3, #1
 800c528:	667b      	str	r3, [r7, #100]	; 0x64
 800c52a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	3308      	adds	r3, #8
 800c530:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c532:	647a      	str	r2, [r7, #68]	; 0x44
 800c534:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c53a:	e841 2300 	strex	r3, r2, [r1]
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1e5      	bne.n	800c512 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3308      	adds	r3, #8
 800c54c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	e853 3f00 	ldrex	r3, [r3]
 800c554:	623b      	str	r3, [r7, #32]
   return(result);
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c55c:	663b      	str	r3, [r7, #96]	; 0x60
 800c55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3308      	adds	r3, #8
 800c564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c566:	633a      	str	r2, [r7, #48]	; 0x30
 800c568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c56e:	e841 2300 	strex	r3, r2, [r1]
 800c572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1e5      	bne.n	800c546 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c57a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c57c:	2220      	movs	r2, #32
 800c57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c586:	2b01      	cmp	r3, #1
 800c588:	d118      	bne.n	800c5bc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	e853 3f00 	ldrex	r3, [r3]
 800c596:	60fb      	str	r3, [r7, #12]
   return(result);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f023 0310 	bic.w	r3, r3, #16
 800c59e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5a8:	61fb      	str	r3, [r7, #28]
 800c5aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ac:	69b9      	ldr	r1, [r7, #24]
 800c5ae:	69fa      	ldr	r2, [r7, #28]
 800c5b0:	e841 2300 	strex	r3, r2, [r1]
 800c5b4:	617b      	str	r3, [r7, #20]
   return(result);
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1e6      	bne.n	800c58a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d107      	bne.n	800c5d4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c5ce:	f7ff f93d 	bl	800b84c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5d2:	e002      	b.n	800c5da <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c5d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c5d6:	f7ff f91b 	bl	800b810 <HAL_UART_RxCpltCallback>
}
 800c5da:	bf00      	nop
 800c5dc:	3770      	adds	r7, #112	; 0x70
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d109      	bne.n	800c60c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5fe:	085b      	lsrs	r3, r3, #1
 800c600:	b29b      	uxth	r3, r3
 800c602:	4619      	mov	r1, r3
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f7ff f921 	bl	800b84c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c60a:	e002      	b.n	800c612 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f7ff f909 	bl	800b824 <HAL_UART_RxHalfCpltCallback>
}
 800c612:	bf00      	nop
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b086      	sub	sp, #24
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c626:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c62e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c636:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c642:	2b80      	cmp	r3, #128	; 0x80
 800c644:	d109      	bne.n	800c65a <UART_DMAError+0x40>
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	2b21      	cmp	r3, #33	; 0x21
 800c64a:	d106      	bne.n	800c65a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	2200      	movs	r2, #0
 800c650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c654:	6978      	ldr	r0, [r7, #20]
 800c656:	f7ff fe2f 	bl	800c2b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c664:	2b40      	cmp	r3, #64	; 0x40
 800c666:	d109      	bne.n	800c67c <UART_DMAError+0x62>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b22      	cmp	r3, #34	; 0x22
 800c66c:	d106      	bne.n	800c67c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	2200      	movs	r2, #0
 800c672:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c676:	6978      	ldr	r0, [r7, #20]
 800c678:	f7ff fe5f 	bl	800c33a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c682:	f043 0210 	orr.w	r2, r3, #16
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c68c:	6978      	ldr	r0, [r7, #20]
 800c68e:	f7ff f8d3 	bl	800b838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c692:	bf00      	nop
 800c694:	3718      	adds	r7, #24
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b084      	sub	sp, #16
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f7ff f8bd 	bl	800b838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6be:	bf00      	nop
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b08f      	sub	sp, #60	; 0x3c
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6d4:	2b21      	cmp	r3, #33	; 0x21
 800c6d6:	d14c      	bne.n	800c772 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d132      	bne.n	800c74a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ea:	6a3b      	ldr	r3, [r7, #32]
 800c6ec:	e853 3f00 	ldrex	r3, [r3]
 800c6f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c702:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c704:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c70a:	e841 2300 	strex	r3, r2, [r1]
 800c70e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1e6      	bne.n	800c6e4 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	e853 3f00 	ldrex	r3, [r3]
 800c722:	60bb      	str	r3, [r7, #8]
   return(result);
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c72a:	633b      	str	r3, [r7, #48]	; 0x30
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	461a      	mov	r2, r3
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	61bb      	str	r3, [r7, #24]
 800c736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c738:	6979      	ldr	r1, [r7, #20]
 800c73a:	69ba      	ldr	r2, [r7, #24]
 800c73c:	e841 2300 	strex	r3, r2, [r1]
 800c740:	613b      	str	r3, [r7, #16]
   return(result);
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1e6      	bne.n	800c716 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c748:	e013      	b.n	800c772 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c74e:	781a      	ldrb	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c75a:	1c5a      	adds	r2, r3, #1
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c766:	b29b      	uxth	r3, r3
 800c768:	3b01      	subs	r3, #1
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c772:	bf00      	nop
 800c774:	373c      	adds	r7, #60	; 0x3c
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c77e:	b480      	push	{r7}
 800c780:	b091      	sub	sp, #68	; 0x44
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c78c:	2b21      	cmp	r3, #33	; 0x21
 800c78e:	d151      	bne.n	800c834 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c796:	b29b      	uxth	r3, r3
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d132      	bne.n	800c802 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	e853 3f00 	ldrex	r3, [r3]
 800c7a8:	623b      	str	r3, [r7, #32]
   return(result);
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	633b      	str	r3, [r7, #48]	; 0x30
 800c7bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7c2:	e841 2300 	strex	r3, r2, [r1]
 800c7c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1e6      	bne.n	800c79c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	e853 3f00 	ldrex	r3, [r3]
 800c7da:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7e2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ec:	61fb      	str	r3, [r7, #28]
 800c7ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f0:	69b9      	ldr	r1, [r7, #24]
 800c7f2:	69fa      	ldr	r2, [r7, #28]
 800c7f4:	e841 2300 	strex	r3, r2, [r1]
 800c7f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1e6      	bne.n	800c7ce <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c800:	e018      	b.n	800c834 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c806:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c816:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c81c:	1c9a      	adds	r2, r3, #2
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c828:	b29b      	uxth	r3, r3
 800c82a:	3b01      	subs	r3, #1
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c834:	bf00      	nop
 800c836:	3744      	adds	r7, #68	; 0x44
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c840:	b480      	push	{r7}
 800c842:	b091      	sub	sp, #68	; 0x44
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c84e:	2b21      	cmp	r3, #33	; 0x21
 800c850:	d160      	bne.n	800c914 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c858:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c85a:	e057      	b.n	800c90c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c862:	b29b      	uxth	r3, r3
 800c864:	2b00      	cmp	r3, #0
 800c866:	d133      	bne.n	800c8d0 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3308      	adds	r3, #8
 800c86e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	e853 3f00 	ldrex	r3, [r3]
 800c876:	623b      	str	r3, [r7, #32]
   return(result);
 800c878:	6a3b      	ldr	r3, [r7, #32]
 800c87a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c87e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	3308      	adds	r3, #8
 800c886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c888:	633a      	str	r2, [r7, #48]	; 0x30
 800c88a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c88e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c890:	e841 2300 	strex	r3, r2, [r1]
 800c894:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1e5      	bne.n	800c868 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ba:	61fb      	str	r3, [r7, #28]
 800c8bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8be:	69b9      	ldr	r1, [r7, #24]
 800c8c0:	69fa      	ldr	r2, [r7, #28]
 800c8c2:	e841 2300 	strex	r3, r2, [r1]
 800c8c6:	617b      	str	r3, [r7, #20]
   return(result);
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1e6      	bne.n	800c89c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c8ce:	e021      	b.n	800c914 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d013      	beq.n	800c906 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8e2:	781a      	ldrb	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c906:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c908:	3b01      	subs	r3, #1
 800c90a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c90c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1a4      	bne.n	800c85c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c912:	e7ff      	b.n	800c914 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800c914:	bf00      	nop
 800c916:	3744      	adds	r7, #68	; 0x44
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c920:	b480      	push	{r7}
 800c922:	b091      	sub	sp, #68	; 0x44
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c92e:	2b21      	cmp	r3, #33	; 0x21
 800c930:	d165      	bne.n	800c9fe <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c938:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c93a:	e05c      	b.n	800c9f6 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c942:	b29b      	uxth	r3, r3
 800c944:	2b00      	cmp	r3, #0
 800c946:	d133      	bne.n	800c9b0 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	3308      	adds	r3, #8
 800c94e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	e853 3f00 	ldrex	r3, [r3]
 800c956:	61fb      	str	r3, [r7, #28]
   return(result);
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c95e:	637b      	str	r3, [r7, #52]	; 0x34
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	3308      	adds	r3, #8
 800c966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c96a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c96c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c96e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c970:	e841 2300 	strex	r3, r2, [r1]
 800c974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1e5      	bne.n	800c948 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	e853 3f00 	ldrex	r3, [r3]
 800c988:	60bb      	str	r3, [r7, #8]
   return(result);
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c990:	633b      	str	r3, [r7, #48]	; 0x30
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	461a      	mov	r2, r3
 800c998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99a:	61bb      	str	r3, [r7, #24]
 800c99c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99e:	6979      	ldr	r1, [r7, #20]
 800c9a0:	69ba      	ldr	r2, [r7, #24]
 800c9a2:	e841 2300 	strex	r3, r2, [r1]
 800c9a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e6      	bne.n	800c97c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c9ae:	e026      	b.n	800c9fe <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d018      	beq.n	800c9f0 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9c2:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	881b      	ldrh	r3, [r3, #0]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9d2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9d8:	1c9a      	adds	r2, r3, #2
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c9f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c9f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d19f      	bne.n	800c93c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c9fc:	e7ff      	b.n	800c9fe <UART_TxISR_16BIT_FIFOEN+0xde>
 800c9fe:	bf00      	nop
 800ca00:	3744      	adds	r7, #68	; 0x44
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr

0800ca0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b088      	sub	sp, #32
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	e853 3f00 	ldrex	r3, [r3]
 800ca1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca26:	61fb      	str	r3, [r7, #28]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	61bb      	str	r3, [r7, #24]
 800ca32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca34:	6979      	ldr	r1, [r7, #20]
 800ca36:	69ba      	ldr	r2, [r7, #24]
 800ca38:	e841 2300 	strex	r3, r2, [r1]
 800ca3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1e6      	bne.n	800ca12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2220      	movs	r2, #32
 800ca48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7f5 fe18 	bl	8002688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca58:	bf00      	nop
 800ca5a:	3720      	adds	r7, #32
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d101      	bne.n	800cab2 <HAL_UARTEx_DisableFifoMode+0x16>
 800caae:	2302      	movs	r3, #2
 800cab0:	e027      	b.n	800cb02 <HAL_UARTEx_DisableFifoMode+0x66>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2224      	movs	r2, #36	; 0x24
 800cabe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f022 0201 	bic.w	r2, r2, #1
 800cad8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cae0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2220      	movs	r2, #32
 800caf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b084      	sub	sp, #16
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d101      	bne.n	800cb26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb22:	2302      	movs	r3, #2
 800cb24:	e02d      	b.n	800cb82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2224      	movs	r2, #36	; 0x24
 800cb32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f022 0201 	bic.w	r2, r2, #1
 800cb4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	430a      	orrs	r2, r1
 800cb60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f850 	bl	800cc08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2220      	movs	r2, #32
 800cb74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b084      	sub	sp, #16
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d101      	bne.n	800cba2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb9e:	2302      	movs	r3, #2
 800cba0:	e02d      	b.n	800cbfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2224      	movs	r2, #36	; 0x24
 800cbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f022 0201 	bic.w	r2, r2, #1
 800cbc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 f812 	bl	800cc08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2220      	movs	r2, #32
 800cbf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
	...

0800cc08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d108      	bne.n	800cc2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2201      	movs	r2, #1
 800cc24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc28:	e031      	b.n	800cc8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc2a:	2308      	movs	r3, #8
 800cc2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc2e:	2308      	movs	r3, #8
 800cc30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	0e5b      	lsrs	r3, r3, #25
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	f003 0307 	and.w	r3, r3, #7
 800cc40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	0f5b      	lsrs	r3, r3, #29
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	f003 0307 	and.w	r3, r3, #7
 800cc50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc52:	7bbb      	ldrb	r3, [r7, #14]
 800cc54:	7b3a      	ldrb	r2, [r7, #12]
 800cc56:	4911      	ldr	r1, [pc, #68]	; (800cc9c <UARTEx_SetNbDataToProcess+0x94>)
 800cc58:	5c8a      	ldrb	r2, [r1, r2]
 800cc5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc5e:	7b3a      	ldrb	r2, [r7, #12]
 800cc60:	490f      	ldr	r1, [pc, #60]	; (800cca0 <UARTEx_SetNbDataToProcess+0x98>)
 800cc62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc64:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	7b7a      	ldrb	r2, [r7, #13]
 800cc74:	4909      	ldr	r1, [pc, #36]	; (800cc9c <UARTEx_SetNbDataToProcess+0x94>)
 800cc76:	5c8a      	ldrb	r2, [r1, r2]
 800cc78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc7c:	7b7a      	ldrb	r2, [r7, #13]
 800cc7e:	4908      	ldr	r1, [pc, #32]	; (800cca0 <UARTEx_SetNbDataToProcess+0x98>)
 800cc80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc82:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cc8e:	bf00      	nop
 800cc90:	3714      	adds	r7, #20
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	08012020 	.word	0x08012020
 800cca0:	08012028 	.word	0x08012028

0800cca4 <LOG_checkNewData>:
 *      Author: harsha
 */

#include "Log.h"

uint8_t LOG_checkNewData(RunTime_TypeDef *r,Log *l,uint8_t motorID){
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	71fb      	strb	r3, [r7, #7]
	if (r->rdngNo != l->mLog[motorID].loggedRdngNo){
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	8819      	ldrh	r1, [r3, #0]
 800ccb6:	79fa      	ldrb	r2, [r7, #7]
 800ccb8:	68b8      	ldr	r0, [r7, #8]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	005b      	lsls	r3, r3, #1
 800ccbe:	4413      	add	r3, r2
 800ccc0:	005b      	lsls	r3, r3, #1
 800ccc2:	4403      	add	r3, r0
 800ccc4:	3302      	adds	r3, #2
 800ccc6:	881b      	ldrh	r3, [r3, #0]
 800ccc8:	4299      	cmp	r1, r3
 800ccca:	d001      	beq.n	800ccd0 <LOG_checkNewData+0x2c>
		return 1;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e000      	b.n	800ccd2 <LOG_checkNewData+0x2e>
	}
	return 0;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
	...

0800cce0 <Log_addDataToBuffer>:

uint8_t Log_addDataToBuffer(RunTime_TypeDef *r,uint16_t bufferLocation,uint8_t motorID){
 800cce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cce4:	b093      	sub	sp, #76	; 0x4c
 800cce6:	af0c      	add	r7, sp, #48	; 0x30
 800cce8:	6178      	str	r0, [r7, #20]
 800ccea:	460b      	mov	r3, r1
 800ccec:	827b      	strh	r3, [r7, #18]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	747b      	strb	r3, [r7, #17]
	sprintf(LogBuffer + bufferLocation,"D,%01d,%05d,%04d,%04d,%04d,%05.02f,%06.02f,%03d,%03d,%05d,E\r\n",motorID,r->rdngNo,r->targetRPM,r->presentRPM,r->pwm,r->currentA,r->power,r->motorTemp,r->mosfetTemp,r->motorError);
 800ccf2:	8a7b      	ldrh	r3, [r7, #18]
 800ccf4:	4a1f      	ldr	r2, [pc, #124]	; (800cd74 <Log_addDataToBuffer+0x94>)
 800ccf6:	189e      	adds	r6, r3, r2
 800ccf8:	f897 8011 	ldrb.w	r8, [r7, #17]
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	4699      	mov	r9, r3
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	899b      	ldrh	r3, [r3, #12]
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	89db      	ldrh	r3, [r3, #14]
 800cd0c:	60bb      	str	r3, [r7, #8]
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	8a1b      	ldrh	r3, [r3, #16]
 800cd12:	607b      	str	r3, [r7, #4]
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	699b      	ldr	r3, [r3, #24]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7f3 fc4d 	bl	80005b8 <__aeabi_f2d>
 800cd1e:	4604      	mov	r4, r0
 800cd20:	460d      	mov	r5, r1
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7f3 fc46 	bl	80005b8 <__aeabi_f2d>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	6979      	ldr	r1, [r7, #20]
 800cd32:	7cc9      	ldrb	r1, [r1, #19]
 800cd34:	4608      	mov	r0, r1
 800cd36:	6979      	ldr	r1, [r7, #20]
 800cd38:	7c89      	ldrb	r1, [r1, #18]
 800cd3a:	6039      	str	r1, [r7, #0]
 800cd3c:	6979      	ldr	r1, [r7, #20]
 800cd3e:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800cd40:	910a      	str	r1, [sp, #40]	; 0x28
 800cd42:	6839      	ldr	r1, [r7, #0]
 800cd44:	9109      	str	r1, [sp, #36]	; 0x24
 800cd46:	9008      	str	r0, [sp, #32]
 800cd48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cd4c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	9202      	str	r2, [sp, #8]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	9201      	str	r2, [sp, #4]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	464b      	mov	r3, r9
 800cd5e:	4642      	mov	r2, r8
 800cd60:	4905      	ldr	r1, [pc, #20]	; (800cd78 <Log_addDataToBuffer+0x98>)
 800cd62:	4630      	mov	r0, r6
 800cd64:	f001 fa6a 	bl	800e23c <siprintf>
	return PACKET_SIZE_NORMAL_MOTOR;
 800cd68:	2337      	movs	r3, #55	; 0x37
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd74:	20000a34 	.word	0x20000a34
 800cd78:	08011f44 	.word	0x08011f44

0800cd7c <Log_addSettingsDataToBuffer>:

uint8_t Log_addSettingsDataToBuffer(machineSettingsTypeDef *m,uint16_t bufferLocation){
 800cd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	b093      	sub	sp, #76	; 0x4c
 800cd82:	af0c      	add	r7, sp, #48	; 0x30
 800cd84:	6178      	str	r0, [r7, #20]
 800cd86:	460b      	mov	r3, r1
 800cd88:	827b      	strh	r3, [r7, #18]
	sprintf(LogBuffer + bufferLocation,"S,%05.02f,%05.02f,%04d,%04d,%05.02f,%05.02f,%04d,%02d,%02d,E\r\n",m->delivery_mMin,m->draft,m->cylinderSpeed,m->beaterSpeed,m->cylinderFeed,m->beaterFeed,m->lengthLimit,m->trunkDelay,m->rampTimes);
 800cd8a:	8a7b      	ldrh	r3, [r7, #18]
 800cd8c:	4a21      	ldr	r2, [pc, #132]	; (800ce14 <Log_addSettingsDataToBuffer+0x98>)
 800cd8e:	189e      	adds	r6, r3, r2
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7f3 fc0f 	bl	80005b8 <__aeabi_f2d>
 800cd9a:	4682      	mov	sl, r0
 800cd9c:	468b      	mov	fp, r1
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7f3 fc08 	bl	80005b8 <__aeabi_f2d>
 800cda8:	4604      	mov	r4, r0
 800cdaa:	460d      	mov	r5, r1
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	891b      	ldrh	r3, [r3, #8]
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	8a1b      	ldrh	r3, [r3, #16]
 800cdb6:	60bb      	str	r3, [r7, #8]
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7f3 fbfb 	bl	80005b8 <__aeabi_f2d>
 800cdc2:	4680      	mov	r8, r0
 800cdc4:	4689      	mov	r9, r1
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	695b      	ldr	r3, [r3, #20]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7f3 fbf4 	bl	80005b8 <__aeabi_f2d>
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	8b5b      	ldrh	r3, [r3, #26]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	8b1b      	ldrh	r3, [r3, #24]
 800cdda:	607b      	str	r3, [r7, #4]
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	69db      	ldr	r3, [r3, #28]
 800cde0:	930a      	str	r3, [sp, #40]	; 0x28
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	9309      	str	r3, [sp, #36]	; 0x24
 800cde6:	9208      	str	r2, [sp, #32]
 800cde8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cdec:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	9203      	str	r2, [sp, #12]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	9302      	str	r3, [sp, #8]
 800cdf8:	e9cd 4500 	strd	r4, r5, [sp]
 800cdfc:	4652      	mov	r2, sl
 800cdfe:	465b      	mov	r3, fp
 800ce00:	4905      	ldr	r1, [pc, #20]	; (800ce18 <Log_addSettingsDataToBuffer+0x9c>)
 800ce02:	4630      	mov	r0, r6
 800ce04:	f001 fa1a 	bl	800e23c <siprintf>
	return PACKET_SIZE_SETTINGS;
 800ce08:	2332      	movs	r3, #50	; 0x32
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	371c      	adds	r7, #28
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce14:	20000a34 	.word	0x20000a34
 800ce18:	08011f84 	.word	0x08011f84

0800ce1c <Log_StateChangeDataToBuffer>:


uint8_t Log_StateChangeDataToBuffer(StateTypeDef *s,uint16_t bufferLocation){
 800ce1c:	b590      	push	{r4, r7, lr}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af02      	add	r7, sp, #8
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	460b      	mov	r3, r1
 800ce26:	807b      	strh	r3, [r7, #2]
	sprintf(LogBuffer + bufferLocation,"R,%02d,%01d,%01d,%06lu,E\r\n",s->current_state,s->runMode,s->BT_pauseReason,s->oneSecTimer);
 800ce28:	887b      	ldrh	r3, [r7, #2]
 800ce2a:	4a0c      	ldr	r2, [pc, #48]	; (800ce5c <Log_StateChangeDataToBuffer+0x40>)
 800ce2c:	1898      	adds	r0, r3, r2
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	785b      	ldrb	r3, [r3, #1]
 800ce32:	4619      	mov	r1, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	795b      	ldrb	r3, [r3, #5]
 800ce38:	461c      	mov	r4, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7c5b      	ldrb	r3, [r3, #17]
 800ce3e:	461a      	mov	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	9301      	str	r3, [sp, #4]
 800ce46:	9200      	str	r2, [sp, #0]
 800ce48:	4623      	mov	r3, r4
 800ce4a:	460a      	mov	r2, r1
 800ce4c:	4904      	ldr	r1, [pc, #16]	; (800ce60 <Log_StateChangeDataToBuffer+0x44>)
 800ce4e:	f001 f9f5 	bl	800e23c <siprintf>
	return PACKET_SIZE_RUNSTATE;
 800ce52:	2313      	movs	r3, #19
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd90      	pop	{r4, r7, pc}
 800ce5c:	20000a34 	.word	0x20000a34
 800ce60:	08011fc4 	.word	0x08011fc4

0800ce64 <Log_changeLoggingMotor>:

//this assumes atleast one motor is setup for logging.
uint8_t Log_changeLoggingMotor(Log *l){
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	uint8_t currentMotor = l->loggingMotor ;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ce72:	73fb      	strb	r3, [r7, #15]

	while (1){
		currentMotor = currentMotor + 1;
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
 800ce76:	3301      	adds	r3, #1
 800ce78:	73fb      	strb	r3, [r7, #15]
		if (currentMotor > 5){
 800ce7a:	7bfb      	ldrb	r3, [r7, #15]
 800ce7c:	2b05      	cmp	r3, #5
 800ce7e:	d901      	bls.n	800ce84 <Log_changeLoggingMotor+0x20>
			currentMotor = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	73fb      	strb	r3, [r7, #15]
		}
		if (l->mLog[currentMotor].motorRunning == 1){ // we have the next motor we want to log
 800ce84:	7bfa      	ldrb	r2, [r7, #15]
 800ce86:	6879      	ldr	r1, [r7, #4]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	005b      	lsls	r3, r3, #1
 800ce8c:	4413      	add	r3, r2
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	440b      	add	r3, r1
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d006      	beq.n	800cea6 <Log_changeLoggingMotor+0x42>
			break;
		}
		if (currentMotor == l->loggingMotor){	// weve checked all motors, (in the case of only 1 motor being logged
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ce9e:	7bfa      	ldrb	r2, [r7, #15]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d002      	beq.n	800ceaa <Log_changeLoggingMotor+0x46>
		currentMotor = currentMotor + 1;
 800cea4:	e7e6      	b.n	800ce74 <Log_changeLoggingMotor+0x10>
			break;
 800cea6:	bf00      	nop
 800cea8:	e000      	b.n	800ceac <Log_changeLoggingMotor+0x48>
			break;
 800ceaa:	bf00      	nop
		}
	}

	return currentMotor;
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
	...

0800cebc <Log_setUpLogging>:


void Log_setUpLogging(Log *l,uint8_t *motorList,uint8_t noOfMotors){
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	4613      	mov	r3, r2
 800cec8:	71fb      	strb	r3, [r7, #7]
	Log_disableLogging(l);
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f000 f842 	bl	800cf54 <Log_disableLogging>
	for (int i=0;i<noOfMotors;i++){
 800ced0:	2300      	movs	r3, #0
 800ced2:	617b      	str	r3, [r7, #20]
 800ced4:	e02b      	b.n	800cf2e <Log_setUpLogging+0x72>
		l->mLog[motorList[i]].motorRunning = 1;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	4413      	add	r3, r2
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	4619      	mov	r1, r3
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	460b      	mov	r3, r1
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	440b      	add	r3, r1
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	4413      	add	r3, r2
 800ceec:	2201      	movs	r2, #1
 800ceee:	701a      	strb	r2, [r3, #0]
		l->mLog[motorList[i]].newData = 0;
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	68ba      	ldr	r2, [r7, #8]
 800cef4:	4413      	add	r3, r2
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	4619      	mov	r1, r3
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	460b      	mov	r3, r1
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	440b      	add	r3, r1
 800cf02:	005b      	lsls	r3, r3, #1
 800cf04:	4413      	add	r3, r2
 800cf06:	3304      	adds	r3, #4
 800cf08:	2200      	movs	r2, #0
 800cf0a:	801a      	strh	r2, [r3, #0]
		l->mLog[motorList[i]].loggedRdngNo = 0;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	4413      	add	r3, r2
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	4619      	mov	r1, r3
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	440b      	add	r3, r1
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	4413      	add	r3, r2
 800cf22:	3302      	adds	r3, #2
 800cf24:	2200      	movs	r2, #0
 800cf26:	801a      	strh	r2, [r3, #0]
	for (int i=0;i<noOfMotors;i++){
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	697a      	ldr	r2, [r7, #20]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	dbcf      	blt.n	800ced6 <Log_setUpLogging+0x1a>
	}
	L.loggingMotor = motorList[0];
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	781a      	ldrb	r2, [r3, #0]
 800cf3a:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <Log_setUpLogging+0x94>)
 800cf3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	L.DMA_transferOver = 1;
 800cf40:	4b03      	ldr	r3, [pc, #12]	; (800cf50 <Log_setUpLogging+0x94>)
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800cf48:	bf00      	nop
 800cf4a:	3718      	adds	r7, #24
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	200008d8 	.word	0x200008d8

0800cf54 <Log_disableLogging>:

void Log_disableLogging(Log *l){
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
	for (int i=0;i<6;i++){
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	60fb      	str	r3, [r7, #12]
 800cf60:	e01f      	b.n	800cfa2 <Log_disableLogging+0x4e>
		l->mLog[i].motorRunning = 0;
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	4613      	mov	r3, r2
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	4413      	add	r3, r2
 800cf6c:	005b      	lsls	r3, r3, #1
 800cf6e:	440b      	add	r3, r1
 800cf70:	2200      	movs	r2, #0
 800cf72:	701a      	strb	r2, [r3, #0]
		l->mLog[i].newData = 0;
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	005b      	lsls	r3, r3, #1
 800cf7c:	4413      	add	r3, r2
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	440b      	add	r3, r1
 800cf82:	3304      	adds	r3, #4
 800cf84:	2200      	movs	r2, #0
 800cf86:	801a      	strh	r2, [r3, #0]
		l->mLog[i].loggedRdngNo = 0;
 800cf88:	6879      	ldr	r1, [r7, #4]
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	4413      	add	r3, r2
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	440b      	add	r3, r1
 800cf96:	3302      	adds	r3, #2
 800cf98:	2200      	movs	r2, #0
 800cf9a:	801a      	strh	r2, [r3, #0]
	for (int i=0;i<6;i++){
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	60fb      	str	r3, [r7, #12]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2b05      	cmp	r3, #5
 800cfa6:	dddc      	ble.n	800cf62 <Log_disableLogging+0xe>
	}
}
 800cfa8:	bf00      	nop
 800cfaa:	bf00      	nop
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <Log_DoOneCycle>:


void Log_DoOneCycle(void){
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
	/* if DMA is not happening, check if buffer has space for the largest packet. if Yes, if we need to send a
	 * layer log, send that, else send the motor Log.check if we have new data, if yes, add data to the buffer,
	 * and change the motor. if no new data keep waiting.
	 */
	if (L.DMA_transferOver == 1){
 800cfbc:	4b5a      	ldr	r3, [pc, #360]	; (800d128 <Log_DoOneCycle+0x170>)
 800cfbe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	f040 80ae 	bne.w	800d124 <Log_DoOneCycle+0x16c>
		if ((BUFFER_LOG_SIZE - L.bufferIdx) > PACKET_SIZE_LIFT_MOTOR){
 800cfc8:	4b57      	ldr	r3, [pc, #348]	; (800d128 <Log_DoOneCycle+0x170>)
 800cfca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cfcc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800cfd0:	2b40      	cmp	r3, #64	; 0x40
 800cfd2:	f340 8099 	ble.w	800d108 <Log_DoOneCycle+0x150>
			if (L.logRunStateChange == 1){
 800cfd6:	4b54      	ldr	r3, [pc, #336]	; (800d128 <Log_DoOneCycle+0x170>)
 800cfd8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d113      	bne.n	800d008 <Log_DoOneCycle+0x50>
				L.bufferIdx  += Log_StateChangeDataToBuffer(&S,L.bufferIdx);
 800cfe0:	4b51      	ldr	r3, [pc, #324]	; (800d128 <Log_DoOneCycle+0x170>)
 800cfe2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	4851      	ldr	r0, [pc, #324]	; (800d12c <Log_DoOneCycle+0x174>)
 800cfe8:	f7ff ff18 	bl	800ce1c <Log_StateChangeDataToBuffer>
 800cfec:	4603      	mov	r3, r0
 800cfee:	4619      	mov	r1, r3
 800cff0:	4b4d      	ldr	r3, [pc, #308]	; (800d128 <Log_DoOneCycle+0x170>)
 800cff2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800cff4:	b28b      	uxth	r3, r1
 800cff6:	4413      	add	r3, r2
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	4b4b      	ldr	r3, [pc, #300]	; (800d128 <Log_DoOneCycle+0x170>)
 800cffc:	849a      	strh	r2, [r3, #36]	; 0x24
				L.logRunStateChange = 0;
 800cffe:	4b4a      	ldr	r3, [pc, #296]	; (800d128 <Log_DoOneCycle+0x170>)
 800d000:	2200      	movs	r2, #0
 800d002:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			HAL_UART_Transmit_DMA(&huart2, (uint8_t *)LogBuffer, L.bufferIdx);
			L.DMA_transferOver = 0;
			L.bufferIdx = 0;
		}
	}
}
 800d006:	e08d      	b.n	800d124 <Log_DoOneCycle+0x16c>
			else if (L.flushBuffer){ // to be used only in idle mode and error Mode so that we can get all the data in the buffer
 800d008:	4b47      	ldr	r3, [pc, #284]	; (800d128 <Log_DoOneCycle+0x170>)
 800d00a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d012      	beq.n	800d038 <Log_DoOneCycle+0x80>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t *)LogBuffer, L.bufferIdx);
 800d012:	4b45      	ldr	r3, [pc, #276]	; (800d128 <Log_DoOneCycle+0x170>)
 800d014:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d016:	461a      	mov	r2, r3
 800d018:	4945      	ldr	r1, [pc, #276]	; (800d130 <Log_DoOneCycle+0x178>)
 800d01a:	4846      	ldr	r0, [pc, #280]	; (800d134 <Log_DoOneCycle+0x17c>)
 800d01c:	f7fd ff5a 	bl	800aed4 <HAL_UART_Transmit_DMA>
				L.DMA_transferOver = 0;
 800d020:	4b41      	ldr	r3, [pc, #260]	; (800d128 <Log_DoOneCycle+0x170>)
 800d022:	2200      	movs	r2, #0
 800d024:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				L.bufferIdx = 0;
 800d028:	4b3f      	ldr	r3, [pc, #252]	; (800d128 <Log_DoOneCycle+0x170>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	849a      	strh	r2, [r3, #36]	; 0x24
				L.flushBuffer = 0;
 800d02e:	4b3e      	ldr	r3, [pc, #248]	; (800d128 <Log_DoOneCycle+0x170>)
 800d030:	2200      	movs	r2, #0
 800d032:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 800d036:	e075      	b.n	800d124 <Log_DoOneCycle+0x16c>
				L.mLog[L.loggingMotor].newData = LOG_checkNewData(&R[L.loggingMotor],&L,L.loggingMotor);
 800d038:	4b3b      	ldr	r3, [pc, #236]	; (800d128 <Log_DoOneCycle+0x170>)
 800d03a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d03e:	461a      	mov	r2, r3
 800d040:	232c      	movs	r3, #44	; 0x2c
 800d042:	fb02 f303 	mul.w	r3, r2, r3
 800d046:	4a3c      	ldr	r2, [pc, #240]	; (800d138 <Log_DoOneCycle+0x180>)
 800d048:	4413      	add	r3, r2
 800d04a:	4a37      	ldr	r2, [pc, #220]	; (800d128 <Log_DoOneCycle+0x170>)
 800d04c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800d050:	4935      	ldr	r1, [pc, #212]	; (800d128 <Log_DoOneCycle+0x170>)
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff fe26 	bl	800cca4 <LOG_checkNewData>
 800d058:	4603      	mov	r3, r0
 800d05a:	461a      	mov	r2, r3
 800d05c:	4b32      	ldr	r3, [pc, #200]	; (800d128 <Log_DoOneCycle+0x170>)
 800d05e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d062:	4619      	mov	r1, r3
 800d064:	b290      	uxth	r0, r2
 800d066:	4a30      	ldr	r2, [pc, #192]	; (800d128 <Log_DoOneCycle+0x170>)
 800d068:	460b      	mov	r3, r1
 800d06a:	005b      	lsls	r3, r3, #1
 800d06c:	440b      	add	r3, r1
 800d06e:	005b      	lsls	r3, r3, #1
 800d070:	4413      	add	r3, r2
 800d072:	3304      	adds	r3, #4
 800d074:	4602      	mov	r2, r0
 800d076:	801a      	strh	r2, [r3, #0]
				if(L.mLog[L.loggingMotor].newData){
 800d078:	4b2b      	ldr	r3, [pc, #172]	; (800d128 <Log_DoOneCycle+0x170>)
 800d07a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d07e:	4619      	mov	r1, r3
 800d080:	4a29      	ldr	r2, [pc, #164]	; (800d128 <Log_DoOneCycle+0x170>)
 800d082:	460b      	mov	r3, r1
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	440b      	add	r3, r1
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	4413      	add	r3, r2
 800d08c:	3304      	adds	r3, #4
 800d08e:	881b      	ldrh	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d047      	beq.n	800d124 <Log_DoOneCycle+0x16c>
					L.bufferIdx  += Log_addDataToBuffer(&R[L.loggingMotor],L.bufferIdx,L.loggingMotor);
 800d094:	4b24      	ldr	r3, [pc, #144]	; (800d128 <Log_DoOneCycle+0x170>)
 800d096:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d09a:	461a      	mov	r2, r3
 800d09c:	232c      	movs	r3, #44	; 0x2c
 800d09e:	fb02 f303 	mul.w	r3, r2, r3
 800d0a2:	4a25      	ldr	r2, [pc, #148]	; (800d138 <Log_DoOneCycle+0x180>)
 800d0a4:	4413      	add	r3, r2
 800d0a6:	4a20      	ldr	r2, [pc, #128]	; (800d128 <Log_DoOneCycle+0x170>)
 800d0a8:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 800d0aa:	4a1f      	ldr	r2, [pc, #124]	; (800d128 <Log_DoOneCycle+0x170>)
 800d0ac:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff fe15 	bl	800cce0 <Log_addDataToBuffer>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	4b1b      	ldr	r3, [pc, #108]	; (800d128 <Log_DoOneCycle+0x170>)
 800d0bc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d0be:	b28b      	uxth	r3, r1
 800d0c0:	4413      	add	r3, r2
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	4b18      	ldr	r3, [pc, #96]	; (800d128 <Log_DoOneCycle+0x170>)
 800d0c6:	849a      	strh	r2, [r3, #36]	; 0x24
					L.mLog[L.loggingMotor].loggedRdngNo = R[L.loggingMotor].rdngNo;
 800d0c8:	4b17      	ldr	r3, [pc, #92]	; (800d128 <Log_DoOneCycle+0x170>)
 800d0ca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	4b15      	ldr	r3, [pc, #84]	; (800d128 <Log_DoOneCycle+0x170>)
 800d0d2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	4a17      	ldr	r2, [pc, #92]	; (800d138 <Log_DoOneCycle+0x180>)
 800d0da:	232c      	movs	r3, #44	; 0x2c
 800d0dc:	fb00 f303 	mul.w	r3, r0, r3
 800d0e0:	4413      	add	r3, r2
 800d0e2:	8818      	ldrh	r0, [r3, #0]
 800d0e4:	4a10      	ldr	r2, [pc, #64]	; (800d128 <Log_DoOneCycle+0x170>)
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	440b      	add	r3, r1
 800d0ec:	005b      	lsls	r3, r3, #1
 800d0ee:	4413      	add	r3, r2
 800d0f0:	3302      	adds	r3, #2
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	801a      	strh	r2, [r3, #0]
					L.loggingMotor = Log_changeLoggingMotor(&L);
 800d0f6:	480c      	ldr	r0, [pc, #48]	; (800d128 <Log_DoOneCycle+0x170>)
 800d0f8:	f7ff feb4 	bl	800ce64 <Log_changeLoggingMotor>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	461a      	mov	r2, r3
 800d100:	4b09      	ldr	r3, [pc, #36]	; (800d128 <Log_DoOneCycle+0x170>)
 800d102:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800d106:	e00d      	b.n	800d124 <Log_DoOneCycle+0x16c>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t *)LogBuffer, L.bufferIdx);
 800d108:	4b07      	ldr	r3, [pc, #28]	; (800d128 <Log_DoOneCycle+0x170>)
 800d10a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d10c:	461a      	mov	r2, r3
 800d10e:	4908      	ldr	r1, [pc, #32]	; (800d130 <Log_DoOneCycle+0x178>)
 800d110:	4808      	ldr	r0, [pc, #32]	; (800d134 <Log_DoOneCycle+0x17c>)
 800d112:	f7fd fedf 	bl	800aed4 <HAL_UART_Transmit_DMA>
			L.DMA_transferOver = 0;
 800d116:	4b04      	ldr	r3, [pc, #16]	; (800d128 <Log_DoOneCycle+0x170>)
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			L.bufferIdx = 0;
 800d11e:	4b02      	ldr	r3, [pc, #8]	; (800d128 <Log_DoOneCycle+0x170>)
 800d120:	2200      	movs	r2, #0
 800d122:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800d124:	bf00      	nop
 800d126:	bd80      	pop	{r7, pc}
 800d128:	200008d8 	.word	0x200008d8
 800d12c:	20000738 	.word	0x20000738
 800d130:	20000a34 	.word	0x20000a34
 800d134:	200004d0 	.word	0x200004d0
 800d138:	2000076c 	.word	0x2000076c

0800d13c <Log_ResetRunTimeRdngNos>:


void Log_ResetRunTimeRdngNos(void){
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
	for (int i=0;i<6;i++){
 800d142:	2300      	movs	r3, #0
 800d144:	607b      	str	r3, [r7, #4]
 800d146:	e00a      	b.n	800d15e <Log_ResetRunTimeRdngNos+0x22>
		R[i].rdngNo = 0;
 800d148:	4a0a      	ldr	r2, [pc, #40]	; (800d174 <Log_ResetRunTimeRdngNos+0x38>)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	212c      	movs	r1, #44	; 0x2c
 800d14e:	fb01 f303 	mul.w	r3, r1, r3
 800d152:	4413      	add	r3, r2
 800d154:	2200      	movs	r2, #0
 800d156:	801a      	strh	r2, [r3, #0]
	for (int i=0;i<6;i++){
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3301      	adds	r3, #1
 800d15c:	607b      	str	r3, [r7, #4]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b05      	cmp	r3, #5
 800d162:	ddf1      	ble.n	800d148 <Log_ResetRunTimeRdngNos+0xc>
	}
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	370c      	adds	r7, #12
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	2000076c 	.word	0x2000076c

0800d178 <Log_ResetBufferIndex>:

void Log_ResetBufferIndex(Log *l){
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
	l->bufferIdx  = 0;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800d186:	bf00      	nop
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <SO_Reset_InitialLiftPosRecieved>:
void SO_Start_LiftRelativeError_Delay(void){
	htim6.Instance->SR &= ~TIM_SR_UIF; // Clear pending flag of timer6
	HAL_TIM_Base_Start_IT(&htim6); // start the 500ms tim6
}

void SO_Reset_InitialLiftPosRecieved(SysObserver *so){
 800d192:	b480      	push	{r7}
 800d194:	b083      	sub	sp, #12
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
	so->initialLiftPosRecieved = 0;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	701a      	strb	r2, [r3, #0]
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <SO_enableCANObservers>:


void SO_enableCANObservers(SysObserver *so,uint8_t *motorList,uint8_t noOfMotors){
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	71fb      	strb	r3, [r7, #7]
	for (int i=0;i<noOfMotors;i++){
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	617b      	str	r3, [r7, #20]
 800d1be:	e01c      	b.n	800d1fa <SO_enableCANObservers+0x4e>
		so->CO[motorList[i]].enable = 1;
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	005b      	lsls	r3, r3, #1
 800d1d0:	440b      	add	r3, r1
 800d1d2:	4413      	add	r3, r2
 800d1d4:	330c      	adds	r3, #12
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	701a      	strb	r2, [r3, #0]
		so->CO[motorList[i]].canDataCount = 0;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	4413      	add	r3, r2
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	005b      	lsls	r3, r3, #1
 800d1ea:	440b      	add	r3, r1
 800d1ec:	4413      	add	r3, r2
 800d1ee:	330b      	adds	r3, #11
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<noOfMotors;i++){
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	617b      	str	r3, [r7, #20]
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	697a      	ldr	r2, [r7, #20]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	dbde      	blt.n	800d1c0 <SO_enableCANObservers+0x14>
	}

	__HAL_TIM_SET_COUNTER(&htim16,0);
 800d202:	4b09      	ldr	r3, [pc, #36]	; (800d228 <SO_enableCANObservers+0x7c>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2200      	movs	r2, #0
 800d208:	625a      	str	r2, [r3, #36]	; 0x24
	htim16.Instance->SR &= ~TIM_SR_UIF; // Clear pending flag of timer16
 800d20a:	4b07      	ldr	r3, [pc, #28]	; (800d228 <SO_enableCANObservers+0x7c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	691a      	ldr	r2, [r3, #16]
 800d210:	4b05      	ldr	r3, [pc, #20]	; (800d228 <SO_enableCANObservers+0x7c>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f022 0201 	bic.w	r2, r2, #1
 800d218:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim16); // start the 1s tim16 in which we check the CAN states
 800d21a:	4803      	ldr	r0, [pc, #12]	; (800d228 <SO_enableCANObservers+0x7c>)
 800d21c:	f7fd f834 	bl	800a288 <HAL_TIM_Base_Start_IT>

}
 800d220:	bf00      	nop
 800d222:	3718      	adds	r7, #24
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	200003a8 	.word	0x200003a8

0800d22c <SO_disableAndResetCANObservers>:

void SO_disableAndResetCANObservers(SysObserver *so){
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
	for (int i=0;i<6;i++){
 800d234:	2300      	movs	r3, #0
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	e014      	b.n	800d264 <SO_disableAndResetCANObservers+0x38>
		so->CO[i].enable = 0;
 800d23a:	6879      	ldr	r1, [r7, #4]
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	4613      	mov	r3, r2
 800d240:	005b      	lsls	r3, r3, #1
 800d242:	4413      	add	r3, r2
 800d244:	440b      	add	r3, r1
 800d246:	330c      	adds	r3, #12
 800d248:	2200      	movs	r2, #0
 800d24a:	701a      	strb	r2, [r3, #0]
		so->CO[i].canDataCount = 0;
 800d24c:	6879      	ldr	r1, [r7, #4]
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	4613      	mov	r3, r2
 800d252:	005b      	lsls	r3, r3, #1
 800d254:	4413      	add	r3, r2
 800d256:	440b      	add	r3, r1
 800d258:	330b      	adds	r3, #11
 800d25a:	2200      	movs	r2, #0
 800d25c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<6;i++){
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3301      	adds	r3, #1
 800d262:	60fb      	str	r3, [r7, #12]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2b05      	cmp	r3, #5
 800d268:	dde7      	ble.n	800d23a <SO_disableAndResetCANObservers+0xe>
	}
	HAL_TIM_Base_Stop_IT(&htim16);
 800d26a:	4803      	ldr	r0, [pc, #12]	; (800d278 <SO_disableAndResetCANObservers+0x4c>)
 800d26c:	f7fd f876 	bl	800a35c <HAL_TIM_Base_Stop_IT>
}
 800d270:	bf00      	nop
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	200003a8 	.word	0x200003a8

0800d27c <SO_incrementCANCounter>:

void SO_incrementCANCounter(SysObserver *so,uint8_t motorID){
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	460b      	mov	r3, r1
 800d286:	70fb      	strb	r3, [r7, #3]
	so->CO[motorID].canDataCount++;
 800d288:	78fa      	ldrb	r2, [r7, #3]
 800d28a:	6879      	ldr	r1, [r7, #4]
 800d28c:	4613      	mov	r3, r2
 800d28e:	005b      	lsls	r3, r3, #1
 800d290:	4413      	add	r3, r2
 800d292:	440b      	add	r3, r1
 800d294:	330b      	adds	r3, #11
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	3301      	adds	r3, #1
 800d29a:	b2d8      	uxtb	r0, r3
 800d29c:	6879      	ldr	r1, [r7, #4]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	005b      	lsls	r3, r3, #1
 800d2a2:	4413      	add	r3, r2
 800d2a4:	440b      	add	r3, r1
 800d2a6:	330b      	adds	r3, #11
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	701a      	strb	r2, [r3, #0]
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <SO_checkCanObservers>:

uint8_t SO_checkCanObservers(SysObserver *so){
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	//at40ms ->about 25 data per sec, at 60ms -> about18 data per sec
	//so conservatively ten.
	//We found that when the lifts stop the data rate can go very low. so we just do 5.
	//returns i, the motor which has failed. if nothing has failed returns 99- NO FAIL
	for (int i = 0;i<6;i++){
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	60fb      	str	r3, [r7, #12]
 800d2c4:	e033      	b.n	800d32e <SO_checkCanObservers+0x76>
		if (so->CO[i].enable == 1){
 800d2c6:	6879      	ldr	r1, [r7, #4]
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	005b      	lsls	r3, r3, #1
 800d2ce:	4413      	add	r3, r2
 800d2d0:	440b      	add	r3, r1
 800d2d2:	330c      	adds	r3, #12
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d126      	bne.n	800d328 <SO_checkCanObservers+0x70>
			so->CO[i].lastCount = so->CO[i].canDataCount;
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	4413      	add	r3, r2
 800d2e4:	440b      	add	r3, r1
 800d2e6:	330b      	adds	r3, #11
 800d2e8:	7818      	ldrb	r0, [r3, #0]
 800d2ea:	6879      	ldr	r1, [r7, #4]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	005b      	lsls	r3, r3, #1
 800d2f2:	4413      	add	r3, r2
 800d2f4:	440b      	add	r3, r1
 800d2f6:	330d      	adds	r3, #13
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	701a      	strb	r2, [r3, #0]
			if (so->CO[i].canDataCount <= 5){
 800d2fc:	6879      	ldr	r1, [r7, #4]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	4613      	mov	r3, r2
 800d302:	005b      	lsls	r3, r3, #1
 800d304:	4413      	add	r3, r2
 800d306:	440b      	add	r3, r1
 800d308:	330b      	adds	r3, #11
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	2b05      	cmp	r3, #5
 800d30e:	d802      	bhi.n	800d316 <SO_checkCanObservers+0x5e>
				return i;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	b2db      	uxtb	r3, r3
 800d314:	e00f      	b.n	800d336 <SO_checkCanObservers+0x7e>
			}
			so->CO[i].canDataCount = 0;
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	4613      	mov	r3, r2
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	4413      	add	r3, r2
 800d320:	440b      	add	r3, r1
 800d322:	330b      	adds	r3, #11
 800d324:	2200      	movs	r2, #0
 800d326:	701a      	strb	r2, [r3, #0]
	for (int i = 0;i<6;i++){
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3301      	adds	r3, #1
 800d32c:	60fb      	str	r3, [r7, #12]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b05      	cmp	r3, #5
 800d332:	ddc8      	ble.n	800d2c6 <SO_checkCanObservers+0xe>
		}
	}
	return ALL_CANS_HEALTHY;
 800d334:	2363      	movs	r3, #99	; 0x63
}
 800d336:	4618      	mov	r0, r3
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <TowerLamp_SetState>:
 *      Author: harsha
 */

#include "TowerLamp.h"

void TowerLamp_SetState(MCP23017_HandleTypeDef *mcp,MCP23017_PortB *pb,int8_t buzzerOn,int8_t redOn, int8_t greenOn,int8_t amberOn){
 800d342:	b580      	push	{r7, lr}
 800d344:	b084      	sub	sp, #16
 800d346:	af00      	add	r7, sp, #0
 800d348:	60f8      	str	r0, [r7, #12]
 800d34a:	60b9      	str	r1, [r7, #8]
 800d34c:	4611      	mov	r1, r2
 800d34e:	461a      	mov	r2, r3
 800d350:	460b      	mov	r3, r1
 800d352:	71fb      	strb	r3, [r7, #7]
 800d354:	4613      	mov	r3, r2
 800d356:	71bb      	strb	r3, [r7, #6]
	mcp23017_read(mcp, MCP_GPIOB,mcp->outputGPIO);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	3306      	adds	r3, #6
 800d35c:	461a      	mov	r2, r3
 800d35e:	2113      	movs	r1, #19
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7f8 f9b2 	bl	80056ca <mcp23017_read>
	pb->raw = mcp->outputGPIO[0];
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	799a      	ldrb	r2, [r3, #6]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	701a      	strb	r2, [r3, #0]

	if (buzzerOn != -1){
 800d36e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d376:	d008      	beq.n	800d38a <TowerLamp_SetState+0x48>
		pb->values.towerBuzzer = buzzerOn;
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	b2d9      	uxtb	r1, r3
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	7813      	ldrb	r3, [r2, #0]
 800d384:	f361 13c7 	bfi	r3, r1, #7, #1
 800d388:	7013      	strb	r3, [r2, #0]
	}
	if (redOn != -1){
 800d38a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d38e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d392:	d008      	beq.n	800d3a6 <TowerLamp_SetState+0x64>
		pb->values.towerRed = redOn;
 800d394:	79bb      	ldrb	r3, [r7, #6]
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	b2d9      	uxtb	r1, r3
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	7813      	ldrb	r3, [r2, #0]
 800d3a0:	f361 1304 	bfi	r3, r1, #4, #1
 800d3a4:	7013      	strb	r3, [r2, #0]
	}
	if (greenOn != -1){
 800d3a6:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d3aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3ae:	d008      	beq.n	800d3c2 <TowerLamp_SetState+0x80>
		pb->values.towerGreen = greenOn;
 800d3b0:	7e3b      	ldrb	r3, [r7, #24]
 800d3b2:	f003 0301 	and.w	r3, r3, #1
 800d3b6:	b2d9      	uxtb	r1, r3
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	7813      	ldrb	r3, [r2, #0]
 800d3bc:	f361 1386 	bfi	r3, r1, #6, #1
 800d3c0:	7013      	strb	r3, [r2, #0]
	}
	if (amberOn != -1){
 800d3c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d3c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3ca:	d008      	beq.n	800d3de <TowerLamp_SetState+0x9c>
		pb->values.towerAmber = amberOn;
 800d3cc:	7f3b      	ldrb	r3, [r7, #28]
 800d3ce:	f003 0301 	and.w	r3, r3, #1
 800d3d2:	b2d9      	uxtb	r1, r3
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	7813      	ldrb	r3, [r2, #0]
 800d3d8:	f361 1345 	bfi	r3, r1, #5, #1
 800d3dc:	7013      	strb	r3, [r2, #0]
	}
}
 800d3de:	bf00      	nop
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <TowerLamp_ApplyState>:

void TowerLamp_ApplyState(MCP23017_HandleTypeDef *mcp,MCP23017_PortB *pb){
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	6039      	str	r1, [r7, #0]
	 mcp->outputGPIO[0] = pb->raw;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781a      	ldrb	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	719a      	strb	r2, [r3, #6]
	 mcp23017_write(mcp, OLATB,mcp->outputGPIO);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	3306      	adds	r3, #6
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	2115      	movs	r1, #21
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7f8 f97c 	bl	80056fe <mcp23017_write>
}
 800d406:	bf00      	nop
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <TowerLamp_NegateState>:


void TowerLamp_NegateState(MCP23017_HandleTypeDef *mcp,MCP23017_PortB *pb,uint8_t light){
 800d40e:	b580      	push	{r7, lr}
 800d410:	b084      	sub	sp, #16
 800d412:	af00      	add	r7, sp, #0
 800d414:	60f8      	str	r0, [r7, #12]
 800d416:	60b9      	str	r1, [r7, #8]
 800d418:	4613      	mov	r3, r2
 800d41a:	71fb      	strb	r3, [r7, #7]

	mcp23017_read(mcp, MCP_GPIOB,mcp->outputGPIO);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	3306      	adds	r3, #6
 800d420:	461a      	mov	r2, r3
 800d422:	2113      	movs	r1, #19
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f7f8 f950 	bl	80056ca <mcp23017_read>
	pb->raw = mcp->outputGPIO[0];
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	799a      	ldrb	r2, [r3, #6]
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	701a      	strb	r2, [r3, #0]

	if (light == TOWER_GREEN){
 800d432:	79fb      	ldrb	r3, [r7, #7]
 800d434:	2b02      	cmp	r3, #2
 800d436:	d10e      	bne.n	800d456 <TowerLamp_NegateState+0x48>
		pb->values.towerGreen = !pb->values.towerGreen;
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b00      	cmp	r3, #0
 800d444:	bf0c      	ite	eq
 800d446:	2301      	moveq	r3, #1
 800d448:	2300      	movne	r3, #0
 800d44a:	b2d9      	uxtb	r1, r3
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	7813      	ldrb	r3, [r2, #0]
 800d450:	f361 1386 	bfi	r3, r1, #6, #1
 800d454:	7013      	strb	r3, [r2, #0]
	}
	if (light == TOWER_RED){
 800d456:	79fb      	ldrb	r3, [r7, #7]
 800d458:	2b03      	cmp	r3, #3
 800d45a:	d10e      	bne.n	800d47a <TowerLamp_NegateState+0x6c>
		pb->values.towerRed = !pb->values.towerRed;
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	f003 0310 	and.w	r3, r3, #16
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b00      	cmp	r3, #0
 800d468:	bf0c      	ite	eq
 800d46a:	2301      	moveq	r3, #1
 800d46c:	2300      	movne	r3, #0
 800d46e:	b2d9      	uxtb	r1, r3
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	7813      	ldrb	r3, [r2, #0]
 800d474:	f361 1304 	bfi	r3, r1, #4, #1
 800d478:	7013      	strb	r3, [r2, #0]
	}
	if (light == TOWER_AMBER){
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	2b04      	cmp	r3, #4
 800d47e:	d10e      	bne.n	800d49e <TowerLamp_NegateState+0x90>
		pb->values.towerAmber = !pb->values.towerAmber;
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	f003 0320 	and.w	r3, r3, #32
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	bf0c      	ite	eq
 800d48e:	2301      	moveq	r3, #1
 800d490:	2300      	movne	r3, #0
 800d492:	b2d9      	uxtb	r1, r3
 800d494:	68ba      	ldr	r2, [r7, #8]
 800d496:	7813      	ldrb	r3, [r2, #0]
 800d498:	f361 1345 	bfi	r3, r1, #5, #1
 800d49c:	7013      	strb	r3, [r2, #0]
	}
}
 800d49e:	bf00      	nop
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
	...

0800d4a8 <UsrBtns_SetInitialStates>:

#include "userButtons.h"
#include "main.h"


void UsrBtns_SetInitialStates(void){
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	af00      	add	r7, sp, #0
	// pulled high , when idle
	usrBtns.redBtn = BTN_IDLE;
 800d4ac:	4b09      	ldr	r3, [pc, #36]	; (800d4d4 <UsrBtns_SetInitialStates+0x2c>)
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	805a      	strh	r2, [r3, #2]
	usrBtns.greenBtn = BTN_IDLE;
 800d4b2:	4b08      	ldr	r3, [pc, #32]	; (800d4d4 <UsrBtns_SetInitialStates+0x2c>)
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	701a      	strb	r2, [r3, #0]
	usrBtns.yellowBtn = BTN_IDLE;
 800d4b8:	4b06      	ldr	r3, [pc, #24]	; (800d4d4 <UsrBtns_SetInitialStates+0x2c>)
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	809a      	strh	r2, [r3, #4]
	usrBtns.rotarySwitch = HAL_GPIO_ReadPin(ROTARY_GPIO_Port,ROTARY_Pin);
 800d4be:	2108      	movs	r1, #8
 800d4c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d4c4:	f7fa ff5e 	bl	8008384 <HAL_GPIO_ReadPin>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	4b01      	ldr	r3, [pc, #4]	; (800d4d4 <UsrBtns_SetInitialStates+0x2c>)
 800d4ce:	719a      	strb	r2, [r3, #6]

}
 800d4d0:	bf00      	nop
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	200008b0 	.word	0x200008b0

0800d4d8 <__errno>:
 800d4d8:	4b01      	ldr	r3, [pc, #4]	; (800d4e0 <__errno+0x8>)
 800d4da:	6818      	ldr	r0, [r3, #0]
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	20000010 	.word	0x20000010

0800d4e4 <__libc_init_array>:
 800d4e4:	b570      	push	{r4, r5, r6, lr}
 800d4e6:	4d0d      	ldr	r5, [pc, #52]	; (800d51c <__libc_init_array+0x38>)
 800d4e8:	4c0d      	ldr	r4, [pc, #52]	; (800d520 <__libc_init_array+0x3c>)
 800d4ea:	1b64      	subs	r4, r4, r5
 800d4ec:	10a4      	asrs	r4, r4, #2
 800d4ee:	2600      	movs	r6, #0
 800d4f0:	42a6      	cmp	r6, r4
 800d4f2:	d109      	bne.n	800d508 <__libc_init_array+0x24>
 800d4f4:	4d0b      	ldr	r5, [pc, #44]	; (800d524 <__libc_init_array+0x40>)
 800d4f6:	4c0c      	ldr	r4, [pc, #48]	; (800d528 <__libc_init_array+0x44>)
 800d4f8:	f004 fca6 	bl	8011e48 <_init>
 800d4fc:	1b64      	subs	r4, r4, r5
 800d4fe:	10a4      	asrs	r4, r4, #2
 800d500:	2600      	movs	r6, #0
 800d502:	42a6      	cmp	r6, r4
 800d504:	d105      	bne.n	800d512 <__libc_init_array+0x2e>
 800d506:	bd70      	pop	{r4, r5, r6, pc}
 800d508:	f855 3b04 	ldr.w	r3, [r5], #4
 800d50c:	4798      	blx	r3
 800d50e:	3601      	adds	r6, #1
 800d510:	e7ee      	b.n	800d4f0 <__libc_init_array+0xc>
 800d512:	f855 3b04 	ldr.w	r3, [r5], #4
 800d516:	4798      	blx	r3
 800d518:	3601      	adds	r6, #1
 800d51a:	e7f2      	b.n	800d502 <__libc_init_array+0x1e>
 800d51c:	080124e4 	.word	0x080124e4
 800d520:	080124e4 	.word	0x080124e4
 800d524:	080124e4 	.word	0x080124e4
 800d528:	080124e8 	.word	0x080124e8

0800d52c <memset>:
 800d52c:	4402      	add	r2, r0
 800d52e:	4603      	mov	r3, r0
 800d530:	4293      	cmp	r3, r2
 800d532:	d100      	bne.n	800d536 <memset+0xa>
 800d534:	4770      	bx	lr
 800d536:	f803 1b01 	strb.w	r1, [r3], #1
 800d53a:	e7f9      	b.n	800d530 <memset+0x4>

0800d53c <__cvt>:
 800d53c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d540:	ec55 4b10 	vmov	r4, r5, d0
 800d544:	2d00      	cmp	r5, #0
 800d546:	460e      	mov	r6, r1
 800d548:	4619      	mov	r1, r3
 800d54a:	462b      	mov	r3, r5
 800d54c:	bfbb      	ittet	lt
 800d54e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d552:	461d      	movlt	r5, r3
 800d554:	2300      	movge	r3, #0
 800d556:	232d      	movlt	r3, #45	; 0x2d
 800d558:	700b      	strb	r3, [r1, #0]
 800d55a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d55c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d560:	4691      	mov	r9, r2
 800d562:	f023 0820 	bic.w	r8, r3, #32
 800d566:	bfbc      	itt	lt
 800d568:	4622      	movlt	r2, r4
 800d56a:	4614      	movlt	r4, r2
 800d56c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d570:	d005      	beq.n	800d57e <__cvt+0x42>
 800d572:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d576:	d100      	bne.n	800d57a <__cvt+0x3e>
 800d578:	3601      	adds	r6, #1
 800d57a:	2102      	movs	r1, #2
 800d57c:	e000      	b.n	800d580 <__cvt+0x44>
 800d57e:	2103      	movs	r1, #3
 800d580:	ab03      	add	r3, sp, #12
 800d582:	9301      	str	r3, [sp, #4]
 800d584:	ab02      	add	r3, sp, #8
 800d586:	9300      	str	r3, [sp, #0]
 800d588:	ec45 4b10 	vmov	d0, r4, r5
 800d58c:	4653      	mov	r3, sl
 800d58e:	4632      	mov	r2, r6
 800d590:	f001 fdc2 	bl	800f118 <_dtoa_r>
 800d594:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d598:	4607      	mov	r7, r0
 800d59a:	d102      	bne.n	800d5a2 <__cvt+0x66>
 800d59c:	f019 0f01 	tst.w	r9, #1
 800d5a0:	d022      	beq.n	800d5e8 <__cvt+0xac>
 800d5a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d5a6:	eb07 0906 	add.w	r9, r7, r6
 800d5aa:	d110      	bne.n	800d5ce <__cvt+0x92>
 800d5ac:	783b      	ldrb	r3, [r7, #0]
 800d5ae:	2b30      	cmp	r3, #48	; 0x30
 800d5b0:	d10a      	bne.n	800d5c8 <__cvt+0x8c>
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	f7f3 fabd 	bl	8000b38 <__aeabi_dcmpeq>
 800d5be:	b918      	cbnz	r0, 800d5c8 <__cvt+0x8c>
 800d5c0:	f1c6 0601 	rsb	r6, r6, #1
 800d5c4:	f8ca 6000 	str.w	r6, [sl]
 800d5c8:	f8da 3000 	ldr.w	r3, [sl]
 800d5cc:	4499      	add	r9, r3
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	4629      	mov	r1, r5
 800d5d6:	f7f3 faaf 	bl	8000b38 <__aeabi_dcmpeq>
 800d5da:	b108      	cbz	r0, 800d5e0 <__cvt+0xa4>
 800d5dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800d5e0:	2230      	movs	r2, #48	; 0x30
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	454b      	cmp	r3, r9
 800d5e6:	d307      	bcc.n	800d5f8 <__cvt+0xbc>
 800d5e8:	9b03      	ldr	r3, [sp, #12]
 800d5ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5ec:	1bdb      	subs	r3, r3, r7
 800d5ee:	4638      	mov	r0, r7
 800d5f0:	6013      	str	r3, [r2, #0]
 800d5f2:	b004      	add	sp, #16
 800d5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f8:	1c59      	adds	r1, r3, #1
 800d5fa:	9103      	str	r1, [sp, #12]
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	e7f0      	b.n	800d5e2 <__cvt+0xa6>

0800d600 <__exponent>:
 800d600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d602:	4603      	mov	r3, r0
 800d604:	2900      	cmp	r1, #0
 800d606:	bfb8      	it	lt
 800d608:	4249      	neglt	r1, r1
 800d60a:	f803 2b02 	strb.w	r2, [r3], #2
 800d60e:	bfb4      	ite	lt
 800d610:	222d      	movlt	r2, #45	; 0x2d
 800d612:	222b      	movge	r2, #43	; 0x2b
 800d614:	2909      	cmp	r1, #9
 800d616:	7042      	strb	r2, [r0, #1]
 800d618:	dd2a      	ble.n	800d670 <__exponent+0x70>
 800d61a:	f10d 0407 	add.w	r4, sp, #7
 800d61e:	46a4      	mov	ip, r4
 800d620:	270a      	movs	r7, #10
 800d622:	46a6      	mov	lr, r4
 800d624:	460a      	mov	r2, r1
 800d626:	fb91 f6f7 	sdiv	r6, r1, r7
 800d62a:	fb07 1516 	mls	r5, r7, r6, r1
 800d62e:	3530      	adds	r5, #48	; 0x30
 800d630:	2a63      	cmp	r2, #99	; 0x63
 800d632:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d636:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d63a:	4631      	mov	r1, r6
 800d63c:	dcf1      	bgt.n	800d622 <__exponent+0x22>
 800d63e:	3130      	adds	r1, #48	; 0x30
 800d640:	f1ae 0502 	sub.w	r5, lr, #2
 800d644:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d648:	1c44      	adds	r4, r0, #1
 800d64a:	4629      	mov	r1, r5
 800d64c:	4561      	cmp	r1, ip
 800d64e:	d30a      	bcc.n	800d666 <__exponent+0x66>
 800d650:	f10d 0209 	add.w	r2, sp, #9
 800d654:	eba2 020e 	sub.w	r2, r2, lr
 800d658:	4565      	cmp	r5, ip
 800d65a:	bf88      	it	hi
 800d65c:	2200      	movhi	r2, #0
 800d65e:	4413      	add	r3, r2
 800d660:	1a18      	subs	r0, r3, r0
 800d662:	b003      	add	sp, #12
 800d664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d66a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d66e:	e7ed      	b.n	800d64c <__exponent+0x4c>
 800d670:	2330      	movs	r3, #48	; 0x30
 800d672:	3130      	adds	r1, #48	; 0x30
 800d674:	7083      	strb	r3, [r0, #2]
 800d676:	70c1      	strb	r1, [r0, #3]
 800d678:	1d03      	adds	r3, r0, #4
 800d67a:	e7f1      	b.n	800d660 <__exponent+0x60>

0800d67c <_printf_float>:
 800d67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d680:	ed2d 8b02 	vpush	{d8}
 800d684:	b08d      	sub	sp, #52	; 0x34
 800d686:	460c      	mov	r4, r1
 800d688:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d68c:	4616      	mov	r6, r2
 800d68e:	461f      	mov	r7, r3
 800d690:	4605      	mov	r5, r0
 800d692:	f002 fe9f 	bl	80103d4 <_localeconv_r>
 800d696:	f8d0 a000 	ldr.w	sl, [r0]
 800d69a:	4650      	mov	r0, sl
 800d69c:	f7f2 fdca 	bl	8000234 <strlen>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	930a      	str	r3, [sp, #40]	; 0x28
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	9305      	str	r3, [sp, #20]
 800d6a8:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d6b0:	3307      	adds	r3, #7
 800d6b2:	f023 0307 	bic.w	r3, r3, #7
 800d6b6:	f103 0208 	add.w	r2, r3, #8
 800d6ba:	f8c8 2000 	str.w	r2, [r8]
 800d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d6c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d6ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d6ce:	9307      	str	r3, [sp, #28]
 800d6d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800d6d4:	ee08 0a10 	vmov	s16, r0
 800d6d8:	4b9f      	ldr	r3, [pc, #636]	; (800d958 <_printf_float+0x2dc>)
 800d6da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6e2:	f7f3 fa5b 	bl	8000b9c <__aeabi_dcmpun>
 800d6e6:	bb88      	cbnz	r0, 800d74c <_printf_float+0xd0>
 800d6e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6ec:	4b9a      	ldr	r3, [pc, #616]	; (800d958 <_printf_float+0x2dc>)
 800d6ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6f2:	f7f3 fa35 	bl	8000b60 <__aeabi_dcmple>
 800d6f6:	bb48      	cbnz	r0, 800d74c <_printf_float+0xd0>
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	4640      	mov	r0, r8
 800d6fe:	4649      	mov	r1, r9
 800d700:	f7f3 fa24 	bl	8000b4c <__aeabi_dcmplt>
 800d704:	b110      	cbz	r0, 800d70c <_printf_float+0x90>
 800d706:	232d      	movs	r3, #45	; 0x2d
 800d708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d70c:	4b93      	ldr	r3, [pc, #588]	; (800d95c <_printf_float+0x2e0>)
 800d70e:	4894      	ldr	r0, [pc, #592]	; (800d960 <_printf_float+0x2e4>)
 800d710:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d714:	bf94      	ite	ls
 800d716:	4698      	movls	r8, r3
 800d718:	4680      	movhi	r8, r0
 800d71a:	2303      	movs	r3, #3
 800d71c:	6123      	str	r3, [r4, #16]
 800d71e:	9b05      	ldr	r3, [sp, #20]
 800d720:	f023 0204 	bic.w	r2, r3, #4
 800d724:	6022      	str	r2, [r4, #0]
 800d726:	f04f 0900 	mov.w	r9, #0
 800d72a:	9700      	str	r7, [sp, #0]
 800d72c:	4633      	mov	r3, r6
 800d72e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d730:	4621      	mov	r1, r4
 800d732:	4628      	mov	r0, r5
 800d734:	f000 f9d8 	bl	800dae8 <_printf_common>
 800d738:	3001      	adds	r0, #1
 800d73a:	f040 8090 	bne.w	800d85e <_printf_float+0x1e2>
 800d73e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d742:	b00d      	add	sp, #52	; 0x34
 800d744:	ecbd 8b02 	vpop	{d8}
 800d748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74c:	4642      	mov	r2, r8
 800d74e:	464b      	mov	r3, r9
 800d750:	4640      	mov	r0, r8
 800d752:	4649      	mov	r1, r9
 800d754:	f7f3 fa22 	bl	8000b9c <__aeabi_dcmpun>
 800d758:	b140      	cbz	r0, 800d76c <_printf_float+0xf0>
 800d75a:	464b      	mov	r3, r9
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	bfbc      	itt	lt
 800d760:	232d      	movlt	r3, #45	; 0x2d
 800d762:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d766:	487f      	ldr	r0, [pc, #508]	; (800d964 <_printf_float+0x2e8>)
 800d768:	4b7f      	ldr	r3, [pc, #508]	; (800d968 <_printf_float+0x2ec>)
 800d76a:	e7d1      	b.n	800d710 <_printf_float+0x94>
 800d76c:	6863      	ldr	r3, [r4, #4]
 800d76e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d772:	9206      	str	r2, [sp, #24]
 800d774:	1c5a      	adds	r2, r3, #1
 800d776:	d13f      	bne.n	800d7f8 <_printf_float+0x17c>
 800d778:	2306      	movs	r3, #6
 800d77a:	6063      	str	r3, [r4, #4]
 800d77c:	9b05      	ldr	r3, [sp, #20]
 800d77e:	6861      	ldr	r1, [r4, #4]
 800d780:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d784:	2300      	movs	r3, #0
 800d786:	9303      	str	r3, [sp, #12]
 800d788:	ab0a      	add	r3, sp, #40	; 0x28
 800d78a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d78e:	ab09      	add	r3, sp, #36	; 0x24
 800d790:	ec49 8b10 	vmov	d0, r8, r9
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	6022      	str	r2, [r4, #0]
 800d798:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d79c:	4628      	mov	r0, r5
 800d79e:	f7ff fecd 	bl	800d53c <__cvt>
 800d7a2:	9b06      	ldr	r3, [sp, #24]
 800d7a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7a6:	2b47      	cmp	r3, #71	; 0x47
 800d7a8:	4680      	mov	r8, r0
 800d7aa:	d108      	bne.n	800d7be <_printf_float+0x142>
 800d7ac:	1cc8      	adds	r0, r1, #3
 800d7ae:	db02      	blt.n	800d7b6 <_printf_float+0x13a>
 800d7b0:	6863      	ldr	r3, [r4, #4]
 800d7b2:	4299      	cmp	r1, r3
 800d7b4:	dd41      	ble.n	800d83a <_printf_float+0x1be>
 800d7b6:	f1ab 0b02 	sub.w	fp, fp, #2
 800d7ba:	fa5f fb8b 	uxtb.w	fp, fp
 800d7be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d7c2:	d820      	bhi.n	800d806 <_printf_float+0x18a>
 800d7c4:	3901      	subs	r1, #1
 800d7c6:	465a      	mov	r2, fp
 800d7c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d7cc:	9109      	str	r1, [sp, #36]	; 0x24
 800d7ce:	f7ff ff17 	bl	800d600 <__exponent>
 800d7d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7d4:	1813      	adds	r3, r2, r0
 800d7d6:	2a01      	cmp	r2, #1
 800d7d8:	4681      	mov	r9, r0
 800d7da:	6123      	str	r3, [r4, #16]
 800d7dc:	dc02      	bgt.n	800d7e4 <_printf_float+0x168>
 800d7de:	6822      	ldr	r2, [r4, #0]
 800d7e0:	07d2      	lsls	r2, r2, #31
 800d7e2:	d501      	bpl.n	800d7e8 <_printf_float+0x16c>
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	6123      	str	r3, [r4, #16]
 800d7e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d09c      	beq.n	800d72a <_printf_float+0xae>
 800d7f0:	232d      	movs	r3, #45	; 0x2d
 800d7f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7f6:	e798      	b.n	800d72a <_printf_float+0xae>
 800d7f8:	9a06      	ldr	r2, [sp, #24]
 800d7fa:	2a47      	cmp	r2, #71	; 0x47
 800d7fc:	d1be      	bne.n	800d77c <_printf_float+0x100>
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1bc      	bne.n	800d77c <_printf_float+0x100>
 800d802:	2301      	movs	r3, #1
 800d804:	e7b9      	b.n	800d77a <_printf_float+0xfe>
 800d806:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d80a:	d118      	bne.n	800d83e <_printf_float+0x1c2>
 800d80c:	2900      	cmp	r1, #0
 800d80e:	6863      	ldr	r3, [r4, #4]
 800d810:	dd0b      	ble.n	800d82a <_printf_float+0x1ae>
 800d812:	6121      	str	r1, [r4, #16]
 800d814:	b913      	cbnz	r3, 800d81c <_printf_float+0x1a0>
 800d816:	6822      	ldr	r2, [r4, #0]
 800d818:	07d0      	lsls	r0, r2, #31
 800d81a:	d502      	bpl.n	800d822 <_printf_float+0x1a6>
 800d81c:	3301      	adds	r3, #1
 800d81e:	440b      	add	r3, r1
 800d820:	6123      	str	r3, [r4, #16]
 800d822:	65a1      	str	r1, [r4, #88]	; 0x58
 800d824:	f04f 0900 	mov.w	r9, #0
 800d828:	e7de      	b.n	800d7e8 <_printf_float+0x16c>
 800d82a:	b913      	cbnz	r3, 800d832 <_printf_float+0x1b6>
 800d82c:	6822      	ldr	r2, [r4, #0]
 800d82e:	07d2      	lsls	r2, r2, #31
 800d830:	d501      	bpl.n	800d836 <_printf_float+0x1ba>
 800d832:	3302      	adds	r3, #2
 800d834:	e7f4      	b.n	800d820 <_printf_float+0x1a4>
 800d836:	2301      	movs	r3, #1
 800d838:	e7f2      	b.n	800d820 <_printf_float+0x1a4>
 800d83a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d840:	4299      	cmp	r1, r3
 800d842:	db05      	blt.n	800d850 <_printf_float+0x1d4>
 800d844:	6823      	ldr	r3, [r4, #0]
 800d846:	6121      	str	r1, [r4, #16]
 800d848:	07d8      	lsls	r0, r3, #31
 800d84a:	d5ea      	bpl.n	800d822 <_printf_float+0x1a6>
 800d84c:	1c4b      	adds	r3, r1, #1
 800d84e:	e7e7      	b.n	800d820 <_printf_float+0x1a4>
 800d850:	2900      	cmp	r1, #0
 800d852:	bfd4      	ite	le
 800d854:	f1c1 0202 	rsble	r2, r1, #2
 800d858:	2201      	movgt	r2, #1
 800d85a:	4413      	add	r3, r2
 800d85c:	e7e0      	b.n	800d820 <_printf_float+0x1a4>
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	055a      	lsls	r2, r3, #21
 800d862:	d407      	bmi.n	800d874 <_printf_float+0x1f8>
 800d864:	6923      	ldr	r3, [r4, #16]
 800d866:	4642      	mov	r2, r8
 800d868:	4631      	mov	r1, r6
 800d86a:	4628      	mov	r0, r5
 800d86c:	47b8      	blx	r7
 800d86e:	3001      	adds	r0, #1
 800d870:	d12c      	bne.n	800d8cc <_printf_float+0x250>
 800d872:	e764      	b.n	800d73e <_printf_float+0xc2>
 800d874:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d878:	f240 80e0 	bls.w	800da3c <_printf_float+0x3c0>
 800d87c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d880:	2200      	movs	r2, #0
 800d882:	2300      	movs	r3, #0
 800d884:	f7f3 f958 	bl	8000b38 <__aeabi_dcmpeq>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d034      	beq.n	800d8f6 <_printf_float+0x27a>
 800d88c:	4a37      	ldr	r2, [pc, #220]	; (800d96c <_printf_float+0x2f0>)
 800d88e:	2301      	movs	r3, #1
 800d890:	4631      	mov	r1, r6
 800d892:	4628      	mov	r0, r5
 800d894:	47b8      	blx	r7
 800d896:	3001      	adds	r0, #1
 800d898:	f43f af51 	beq.w	800d73e <_printf_float+0xc2>
 800d89c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	db02      	blt.n	800d8aa <_printf_float+0x22e>
 800d8a4:	6823      	ldr	r3, [r4, #0]
 800d8a6:	07d8      	lsls	r0, r3, #31
 800d8a8:	d510      	bpl.n	800d8cc <_printf_float+0x250>
 800d8aa:	ee18 3a10 	vmov	r3, s16
 800d8ae:	4652      	mov	r2, sl
 800d8b0:	4631      	mov	r1, r6
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	47b8      	blx	r7
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	f43f af41 	beq.w	800d73e <_printf_float+0xc2>
 800d8bc:	f04f 0800 	mov.w	r8, #0
 800d8c0:	f104 091a 	add.w	r9, r4, #26
 800d8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	4543      	cmp	r3, r8
 800d8ca:	dc09      	bgt.n	800d8e0 <_printf_float+0x264>
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	079b      	lsls	r3, r3, #30
 800d8d0:	f100 8105 	bmi.w	800dade <_printf_float+0x462>
 800d8d4:	68e0      	ldr	r0, [r4, #12]
 800d8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8d8:	4298      	cmp	r0, r3
 800d8da:	bfb8      	it	lt
 800d8dc:	4618      	movlt	r0, r3
 800d8de:	e730      	b.n	800d742 <_printf_float+0xc6>
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	464a      	mov	r2, r9
 800d8e4:	4631      	mov	r1, r6
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	47b8      	blx	r7
 800d8ea:	3001      	adds	r0, #1
 800d8ec:	f43f af27 	beq.w	800d73e <_printf_float+0xc2>
 800d8f0:	f108 0801 	add.w	r8, r8, #1
 800d8f4:	e7e6      	b.n	800d8c4 <_printf_float+0x248>
 800d8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	dc39      	bgt.n	800d970 <_printf_float+0x2f4>
 800d8fc:	4a1b      	ldr	r2, [pc, #108]	; (800d96c <_printf_float+0x2f0>)
 800d8fe:	2301      	movs	r3, #1
 800d900:	4631      	mov	r1, r6
 800d902:	4628      	mov	r0, r5
 800d904:	47b8      	blx	r7
 800d906:	3001      	adds	r0, #1
 800d908:	f43f af19 	beq.w	800d73e <_printf_float+0xc2>
 800d90c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d910:	4313      	orrs	r3, r2
 800d912:	d102      	bne.n	800d91a <_printf_float+0x29e>
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	07d9      	lsls	r1, r3, #31
 800d918:	d5d8      	bpl.n	800d8cc <_printf_float+0x250>
 800d91a:	ee18 3a10 	vmov	r3, s16
 800d91e:	4652      	mov	r2, sl
 800d920:	4631      	mov	r1, r6
 800d922:	4628      	mov	r0, r5
 800d924:	47b8      	blx	r7
 800d926:	3001      	adds	r0, #1
 800d928:	f43f af09 	beq.w	800d73e <_printf_float+0xc2>
 800d92c:	f04f 0900 	mov.w	r9, #0
 800d930:	f104 0a1a 	add.w	sl, r4, #26
 800d934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d936:	425b      	negs	r3, r3
 800d938:	454b      	cmp	r3, r9
 800d93a:	dc01      	bgt.n	800d940 <_printf_float+0x2c4>
 800d93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d93e:	e792      	b.n	800d866 <_printf_float+0x1ea>
 800d940:	2301      	movs	r3, #1
 800d942:	4652      	mov	r2, sl
 800d944:	4631      	mov	r1, r6
 800d946:	4628      	mov	r0, r5
 800d948:	47b8      	blx	r7
 800d94a:	3001      	adds	r0, #1
 800d94c:	f43f aef7 	beq.w	800d73e <_printf_float+0xc2>
 800d950:	f109 0901 	add.w	r9, r9, #1
 800d954:	e7ee      	b.n	800d934 <_printf_float+0x2b8>
 800d956:	bf00      	nop
 800d958:	7fefffff 	.word	0x7fefffff
 800d95c:	08012138 	.word	0x08012138
 800d960:	0801213c 	.word	0x0801213c
 800d964:	08012144 	.word	0x08012144
 800d968:	08012140 	.word	0x08012140
 800d96c:	08012148 	.word	0x08012148
 800d970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d972:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d974:	429a      	cmp	r2, r3
 800d976:	bfa8      	it	ge
 800d978:	461a      	movge	r2, r3
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	4691      	mov	r9, r2
 800d97e:	dc37      	bgt.n	800d9f0 <_printf_float+0x374>
 800d980:	f04f 0b00 	mov.w	fp, #0
 800d984:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d988:	f104 021a 	add.w	r2, r4, #26
 800d98c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d98e:	9305      	str	r3, [sp, #20]
 800d990:	eba3 0309 	sub.w	r3, r3, r9
 800d994:	455b      	cmp	r3, fp
 800d996:	dc33      	bgt.n	800da00 <_printf_float+0x384>
 800d998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d99c:	429a      	cmp	r2, r3
 800d99e:	db3b      	blt.n	800da18 <_printf_float+0x39c>
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	07da      	lsls	r2, r3, #31
 800d9a4:	d438      	bmi.n	800da18 <_printf_float+0x39c>
 800d9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9a8:	9a05      	ldr	r2, [sp, #20]
 800d9aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9ac:	1a9a      	subs	r2, r3, r2
 800d9ae:	eba3 0901 	sub.w	r9, r3, r1
 800d9b2:	4591      	cmp	r9, r2
 800d9b4:	bfa8      	it	ge
 800d9b6:	4691      	movge	r9, r2
 800d9b8:	f1b9 0f00 	cmp.w	r9, #0
 800d9bc:	dc35      	bgt.n	800da2a <_printf_float+0x3ae>
 800d9be:	f04f 0800 	mov.w	r8, #0
 800d9c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9c6:	f104 0a1a 	add.w	sl, r4, #26
 800d9ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9ce:	1a9b      	subs	r3, r3, r2
 800d9d0:	eba3 0309 	sub.w	r3, r3, r9
 800d9d4:	4543      	cmp	r3, r8
 800d9d6:	f77f af79 	ble.w	800d8cc <_printf_float+0x250>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	4652      	mov	r2, sl
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	47b8      	blx	r7
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	f43f aeaa 	beq.w	800d73e <_printf_float+0xc2>
 800d9ea:	f108 0801 	add.w	r8, r8, #1
 800d9ee:	e7ec      	b.n	800d9ca <_printf_float+0x34e>
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4642      	mov	r2, r8
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	47b8      	blx	r7
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	d1c0      	bne.n	800d980 <_printf_float+0x304>
 800d9fe:	e69e      	b.n	800d73e <_printf_float+0xc2>
 800da00:	2301      	movs	r3, #1
 800da02:	4631      	mov	r1, r6
 800da04:	4628      	mov	r0, r5
 800da06:	9205      	str	r2, [sp, #20]
 800da08:	47b8      	blx	r7
 800da0a:	3001      	adds	r0, #1
 800da0c:	f43f ae97 	beq.w	800d73e <_printf_float+0xc2>
 800da10:	9a05      	ldr	r2, [sp, #20]
 800da12:	f10b 0b01 	add.w	fp, fp, #1
 800da16:	e7b9      	b.n	800d98c <_printf_float+0x310>
 800da18:	ee18 3a10 	vmov	r3, s16
 800da1c:	4652      	mov	r2, sl
 800da1e:	4631      	mov	r1, r6
 800da20:	4628      	mov	r0, r5
 800da22:	47b8      	blx	r7
 800da24:	3001      	adds	r0, #1
 800da26:	d1be      	bne.n	800d9a6 <_printf_float+0x32a>
 800da28:	e689      	b.n	800d73e <_printf_float+0xc2>
 800da2a:	9a05      	ldr	r2, [sp, #20]
 800da2c:	464b      	mov	r3, r9
 800da2e:	4442      	add	r2, r8
 800da30:	4631      	mov	r1, r6
 800da32:	4628      	mov	r0, r5
 800da34:	47b8      	blx	r7
 800da36:	3001      	adds	r0, #1
 800da38:	d1c1      	bne.n	800d9be <_printf_float+0x342>
 800da3a:	e680      	b.n	800d73e <_printf_float+0xc2>
 800da3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da3e:	2a01      	cmp	r2, #1
 800da40:	dc01      	bgt.n	800da46 <_printf_float+0x3ca>
 800da42:	07db      	lsls	r3, r3, #31
 800da44:	d538      	bpl.n	800dab8 <_printf_float+0x43c>
 800da46:	2301      	movs	r3, #1
 800da48:	4642      	mov	r2, r8
 800da4a:	4631      	mov	r1, r6
 800da4c:	4628      	mov	r0, r5
 800da4e:	47b8      	blx	r7
 800da50:	3001      	adds	r0, #1
 800da52:	f43f ae74 	beq.w	800d73e <_printf_float+0xc2>
 800da56:	ee18 3a10 	vmov	r3, s16
 800da5a:	4652      	mov	r2, sl
 800da5c:	4631      	mov	r1, r6
 800da5e:	4628      	mov	r0, r5
 800da60:	47b8      	blx	r7
 800da62:	3001      	adds	r0, #1
 800da64:	f43f ae6b 	beq.w	800d73e <_printf_float+0xc2>
 800da68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da6c:	2200      	movs	r2, #0
 800da6e:	2300      	movs	r3, #0
 800da70:	f7f3 f862 	bl	8000b38 <__aeabi_dcmpeq>
 800da74:	b9d8      	cbnz	r0, 800daae <_printf_float+0x432>
 800da76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da78:	f108 0201 	add.w	r2, r8, #1
 800da7c:	3b01      	subs	r3, #1
 800da7e:	4631      	mov	r1, r6
 800da80:	4628      	mov	r0, r5
 800da82:	47b8      	blx	r7
 800da84:	3001      	adds	r0, #1
 800da86:	d10e      	bne.n	800daa6 <_printf_float+0x42a>
 800da88:	e659      	b.n	800d73e <_printf_float+0xc2>
 800da8a:	2301      	movs	r3, #1
 800da8c:	4652      	mov	r2, sl
 800da8e:	4631      	mov	r1, r6
 800da90:	4628      	mov	r0, r5
 800da92:	47b8      	blx	r7
 800da94:	3001      	adds	r0, #1
 800da96:	f43f ae52 	beq.w	800d73e <_printf_float+0xc2>
 800da9a:	f108 0801 	add.w	r8, r8, #1
 800da9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daa0:	3b01      	subs	r3, #1
 800daa2:	4543      	cmp	r3, r8
 800daa4:	dcf1      	bgt.n	800da8a <_printf_float+0x40e>
 800daa6:	464b      	mov	r3, r9
 800daa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800daac:	e6dc      	b.n	800d868 <_printf_float+0x1ec>
 800daae:	f04f 0800 	mov.w	r8, #0
 800dab2:	f104 0a1a 	add.w	sl, r4, #26
 800dab6:	e7f2      	b.n	800da9e <_printf_float+0x422>
 800dab8:	2301      	movs	r3, #1
 800daba:	4642      	mov	r2, r8
 800dabc:	e7df      	b.n	800da7e <_printf_float+0x402>
 800dabe:	2301      	movs	r3, #1
 800dac0:	464a      	mov	r2, r9
 800dac2:	4631      	mov	r1, r6
 800dac4:	4628      	mov	r0, r5
 800dac6:	47b8      	blx	r7
 800dac8:	3001      	adds	r0, #1
 800daca:	f43f ae38 	beq.w	800d73e <_printf_float+0xc2>
 800dace:	f108 0801 	add.w	r8, r8, #1
 800dad2:	68e3      	ldr	r3, [r4, #12]
 800dad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dad6:	1a5b      	subs	r3, r3, r1
 800dad8:	4543      	cmp	r3, r8
 800dada:	dcf0      	bgt.n	800dabe <_printf_float+0x442>
 800dadc:	e6fa      	b.n	800d8d4 <_printf_float+0x258>
 800dade:	f04f 0800 	mov.w	r8, #0
 800dae2:	f104 0919 	add.w	r9, r4, #25
 800dae6:	e7f4      	b.n	800dad2 <_printf_float+0x456>

0800dae8 <_printf_common>:
 800dae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daec:	4616      	mov	r6, r2
 800daee:	4699      	mov	r9, r3
 800daf0:	688a      	ldr	r2, [r1, #8]
 800daf2:	690b      	ldr	r3, [r1, #16]
 800daf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800daf8:	4293      	cmp	r3, r2
 800dafa:	bfb8      	it	lt
 800dafc:	4613      	movlt	r3, r2
 800dafe:	6033      	str	r3, [r6, #0]
 800db00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db04:	4607      	mov	r7, r0
 800db06:	460c      	mov	r4, r1
 800db08:	b10a      	cbz	r2, 800db0e <_printf_common+0x26>
 800db0a:	3301      	adds	r3, #1
 800db0c:	6033      	str	r3, [r6, #0]
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	0699      	lsls	r1, r3, #26
 800db12:	bf42      	ittt	mi
 800db14:	6833      	ldrmi	r3, [r6, #0]
 800db16:	3302      	addmi	r3, #2
 800db18:	6033      	strmi	r3, [r6, #0]
 800db1a:	6825      	ldr	r5, [r4, #0]
 800db1c:	f015 0506 	ands.w	r5, r5, #6
 800db20:	d106      	bne.n	800db30 <_printf_common+0x48>
 800db22:	f104 0a19 	add.w	sl, r4, #25
 800db26:	68e3      	ldr	r3, [r4, #12]
 800db28:	6832      	ldr	r2, [r6, #0]
 800db2a:	1a9b      	subs	r3, r3, r2
 800db2c:	42ab      	cmp	r3, r5
 800db2e:	dc26      	bgt.n	800db7e <_printf_common+0x96>
 800db30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db34:	1e13      	subs	r3, r2, #0
 800db36:	6822      	ldr	r2, [r4, #0]
 800db38:	bf18      	it	ne
 800db3a:	2301      	movne	r3, #1
 800db3c:	0692      	lsls	r2, r2, #26
 800db3e:	d42b      	bmi.n	800db98 <_printf_common+0xb0>
 800db40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db44:	4649      	mov	r1, r9
 800db46:	4638      	mov	r0, r7
 800db48:	47c0      	blx	r8
 800db4a:	3001      	adds	r0, #1
 800db4c:	d01e      	beq.n	800db8c <_printf_common+0xa4>
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	68e5      	ldr	r5, [r4, #12]
 800db52:	6832      	ldr	r2, [r6, #0]
 800db54:	f003 0306 	and.w	r3, r3, #6
 800db58:	2b04      	cmp	r3, #4
 800db5a:	bf08      	it	eq
 800db5c:	1aad      	subeq	r5, r5, r2
 800db5e:	68a3      	ldr	r3, [r4, #8]
 800db60:	6922      	ldr	r2, [r4, #16]
 800db62:	bf0c      	ite	eq
 800db64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db68:	2500      	movne	r5, #0
 800db6a:	4293      	cmp	r3, r2
 800db6c:	bfc4      	itt	gt
 800db6e:	1a9b      	subgt	r3, r3, r2
 800db70:	18ed      	addgt	r5, r5, r3
 800db72:	2600      	movs	r6, #0
 800db74:	341a      	adds	r4, #26
 800db76:	42b5      	cmp	r5, r6
 800db78:	d11a      	bne.n	800dbb0 <_printf_common+0xc8>
 800db7a:	2000      	movs	r0, #0
 800db7c:	e008      	b.n	800db90 <_printf_common+0xa8>
 800db7e:	2301      	movs	r3, #1
 800db80:	4652      	mov	r2, sl
 800db82:	4649      	mov	r1, r9
 800db84:	4638      	mov	r0, r7
 800db86:	47c0      	blx	r8
 800db88:	3001      	adds	r0, #1
 800db8a:	d103      	bne.n	800db94 <_printf_common+0xac>
 800db8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db94:	3501      	adds	r5, #1
 800db96:	e7c6      	b.n	800db26 <_printf_common+0x3e>
 800db98:	18e1      	adds	r1, r4, r3
 800db9a:	1c5a      	adds	r2, r3, #1
 800db9c:	2030      	movs	r0, #48	; 0x30
 800db9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dba2:	4422      	add	r2, r4
 800dba4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dbac:	3302      	adds	r3, #2
 800dbae:	e7c7      	b.n	800db40 <_printf_common+0x58>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	4622      	mov	r2, r4
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	47c0      	blx	r8
 800dbba:	3001      	adds	r0, #1
 800dbbc:	d0e6      	beq.n	800db8c <_printf_common+0xa4>
 800dbbe:	3601      	adds	r6, #1
 800dbc0:	e7d9      	b.n	800db76 <_printf_common+0x8e>
	...

0800dbc4 <_printf_i>:
 800dbc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc8:	7e0f      	ldrb	r7, [r1, #24]
 800dbca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dbcc:	2f78      	cmp	r7, #120	; 0x78
 800dbce:	4691      	mov	r9, r2
 800dbd0:	4680      	mov	r8, r0
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	469a      	mov	sl, r3
 800dbd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dbda:	d807      	bhi.n	800dbec <_printf_i+0x28>
 800dbdc:	2f62      	cmp	r7, #98	; 0x62
 800dbde:	d80a      	bhi.n	800dbf6 <_printf_i+0x32>
 800dbe0:	2f00      	cmp	r7, #0
 800dbe2:	f000 80d8 	beq.w	800dd96 <_printf_i+0x1d2>
 800dbe6:	2f58      	cmp	r7, #88	; 0x58
 800dbe8:	f000 80a3 	beq.w	800dd32 <_printf_i+0x16e>
 800dbec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dbf4:	e03a      	b.n	800dc6c <_printf_i+0xa8>
 800dbf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dbfa:	2b15      	cmp	r3, #21
 800dbfc:	d8f6      	bhi.n	800dbec <_printf_i+0x28>
 800dbfe:	a101      	add	r1, pc, #4	; (adr r1, 800dc04 <_printf_i+0x40>)
 800dc00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc04:	0800dc5d 	.word	0x0800dc5d
 800dc08:	0800dc71 	.word	0x0800dc71
 800dc0c:	0800dbed 	.word	0x0800dbed
 800dc10:	0800dbed 	.word	0x0800dbed
 800dc14:	0800dbed 	.word	0x0800dbed
 800dc18:	0800dbed 	.word	0x0800dbed
 800dc1c:	0800dc71 	.word	0x0800dc71
 800dc20:	0800dbed 	.word	0x0800dbed
 800dc24:	0800dbed 	.word	0x0800dbed
 800dc28:	0800dbed 	.word	0x0800dbed
 800dc2c:	0800dbed 	.word	0x0800dbed
 800dc30:	0800dd7d 	.word	0x0800dd7d
 800dc34:	0800dca1 	.word	0x0800dca1
 800dc38:	0800dd5f 	.word	0x0800dd5f
 800dc3c:	0800dbed 	.word	0x0800dbed
 800dc40:	0800dbed 	.word	0x0800dbed
 800dc44:	0800dd9f 	.word	0x0800dd9f
 800dc48:	0800dbed 	.word	0x0800dbed
 800dc4c:	0800dca1 	.word	0x0800dca1
 800dc50:	0800dbed 	.word	0x0800dbed
 800dc54:	0800dbed 	.word	0x0800dbed
 800dc58:	0800dd67 	.word	0x0800dd67
 800dc5c:	682b      	ldr	r3, [r5, #0]
 800dc5e:	1d1a      	adds	r2, r3, #4
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	602a      	str	r2, [r5, #0]
 800dc64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e0a3      	b.n	800ddb8 <_printf_i+0x1f4>
 800dc70:	6820      	ldr	r0, [r4, #0]
 800dc72:	6829      	ldr	r1, [r5, #0]
 800dc74:	0606      	lsls	r6, r0, #24
 800dc76:	f101 0304 	add.w	r3, r1, #4
 800dc7a:	d50a      	bpl.n	800dc92 <_printf_i+0xce>
 800dc7c:	680e      	ldr	r6, [r1, #0]
 800dc7e:	602b      	str	r3, [r5, #0]
 800dc80:	2e00      	cmp	r6, #0
 800dc82:	da03      	bge.n	800dc8c <_printf_i+0xc8>
 800dc84:	232d      	movs	r3, #45	; 0x2d
 800dc86:	4276      	negs	r6, r6
 800dc88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc8c:	485e      	ldr	r0, [pc, #376]	; (800de08 <_printf_i+0x244>)
 800dc8e:	230a      	movs	r3, #10
 800dc90:	e019      	b.n	800dcc6 <_printf_i+0x102>
 800dc92:	680e      	ldr	r6, [r1, #0]
 800dc94:	602b      	str	r3, [r5, #0]
 800dc96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc9a:	bf18      	it	ne
 800dc9c:	b236      	sxthne	r6, r6
 800dc9e:	e7ef      	b.n	800dc80 <_printf_i+0xbc>
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	6820      	ldr	r0, [r4, #0]
 800dca4:	1d19      	adds	r1, r3, #4
 800dca6:	6029      	str	r1, [r5, #0]
 800dca8:	0601      	lsls	r1, r0, #24
 800dcaa:	d501      	bpl.n	800dcb0 <_printf_i+0xec>
 800dcac:	681e      	ldr	r6, [r3, #0]
 800dcae:	e002      	b.n	800dcb6 <_printf_i+0xf2>
 800dcb0:	0646      	lsls	r6, r0, #25
 800dcb2:	d5fb      	bpl.n	800dcac <_printf_i+0xe8>
 800dcb4:	881e      	ldrh	r6, [r3, #0]
 800dcb6:	4854      	ldr	r0, [pc, #336]	; (800de08 <_printf_i+0x244>)
 800dcb8:	2f6f      	cmp	r7, #111	; 0x6f
 800dcba:	bf0c      	ite	eq
 800dcbc:	2308      	moveq	r3, #8
 800dcbe:	230a      	movne	r3, #10
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dcc6:	6865      	ldr	r5, [r4, #4]
 800dcc8:	60a5      	str	r5, [r4, #8]
 800dcca:	2d00      	cmp	r5, #0
 800dccc:	bfa2      	ittt	ge
 800dcce:	6821      	ldrge	r1, [r4, #0]
 800dcd0:	f021 0104 	bicge.w	r1, r1, #4
 800dcd4:	6021      	strge	r1, [r4, #0]
 800dcd6:	b90e      	cbnz	r6, 800dcdc <_printf_i+0x118>
 800dcd8:	2d00      	cmp	r5, #0
 800dcda:	d04d      	beq.n	800dd78 <_printf_i+0x1b4>
 800dcdc:	4615      	mov	r5, r2
 800dcde:	fbb6 f1f3 	udiv	r1, r6, r3
 800dce2:	fb03 6711 	mls	r7, r3, r1, r6
 800dce6:	5dc7      	ldrb	r7, [r0, r7]
 800dce8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dcec:	4637      	mov	r7, r6
 800dcee:	42bb      	cmp	r3, r7
 800dcf0:	460e      	mov	r6, r1
 800dcf2:	d9f4      	bls.n	800dcde <_printf_i+0x11a>
 800dcf4:	2b08      	cmp	r3, #8
 800dcf6:	d10b      	bne.n	800dd10 <_printf_i+0x14c>
 800dcf8:	6823      	ldr	r3, [r4, #0]
 800dcfa:	07de      	lsls	r6, r3, #31
 800dcfc:	d508      	bpl.n	800dd10 <_printf_i+0x14c>
 800dcfe:	6923      	ldr	r3, [r4, #16]
 800dd00:	6861      	ldr	r1, [r4, #4]
 800dd02:	4299      	cmp	r1, r3
 800dd04:	bfde      	ittt	le
 800dd06:	2330      	movle	r3, #48	; 0x30
 800dd08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dd10:	1b52      	subs	r2, r2, r5
 800dd12:	6122      	str	r2, [r4, #16]
 800dd14:	f8cd a000 	str.w	sl, [sp]
 800dd18:	464b      	mov	r3, r9
 800dd1a:	aa03      	add	r2, sp, #12
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	4640      	mov	r0, r8
 800dd20:	f7ff fee2 	bl	800dae8 <_printf_common>
 800dd24:	3001      	adds	r0, #1
 800dd26:	d14c      	bne.n	800ddc2 <_printf_i+0x1fe>
 800dd28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd2c:	b004      	add	sp, #16
 800dd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd32:	4835      	ldr	r0, [pc, #212]	; (800de08 <_printf_i+0x244>)
 800dd34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dd38:	6829      	ldr	r1, [r5, #0]
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd40:	6029      	str	r1, [r5, #0]
 800dd42:	061d      	lsls	r5, r3, #24
 800dd44:	d514      	bpl.n	800dd70 <_printf_i+0x1ac>
 800dd46:	07df      	lsls	r7, r3, #31
 800dd48:	bf44      	itt	mi
 800dd4a:	f043 0320 	orrmi.w	r3, r3, #32
 800dd4e:	6023      	strmi	r3, [r4, #0]
 800dd50:	b91e      	cbnz	r6, 800dd5a <_printf_i+0x196>
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	f023 0320 	bic.w	r3, r3, #32
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	2310      	movs	r3, #16
 800dd5c:	e7b0      	b.n	800dcc0 <_printf_i+0xfc>
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	f043 0320 	orr.w	r3, r3, #32
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	2378      	movs	r3, #120	; 0x78
 800dd68:	4828      	ldr	r0, [pc, #160]	; (800de0c <_printf_i+0x248>)
 800dd6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd6e:	e7e3      	b.n	800dd38 <_printf_i+0x174>
 800dd70:	0659      	lsls	r1, r3, #25
 800dd72:	bf48      	it	mi
 800dd74:	b2b6      	uxthmi	r6, r6
 800dd76:	e7e6      	b.n	800dd46 <_printf_i+0x182>
 800dd78:	4615      	mov	r5, r2
 800dd7a:	e7bb      	b.n	800dcf4 <_printf_i+0x130>
 800dd7c:	682b      	ldr	r3, [r5, #0]
 800dd7e:	6826      	ldr	r6, [r4, #0]
 800dd80:	6961      	ldr	r1, [r4, #20]
 800dd82:	1d18      	adds	r0, r3, #4
 800dd84:	6028      	str	r0, [r5, #0]
 800dd86:	0635      	lsls	r5, r6, #24
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	d501      	bpl.n	800dd90 <_printf_i+0x1cc>
 800dd8c:	6019      	str	r1, [r3, #0]
 800dd8e:	e002      	b.n	800dd96 <_printf_i+0x1d2>
 800dd90:	0670      	lsls	r0, r6, #25
 800dd92:	d5fb      	bpl.n	800dd8c <_printf_i+0x1c8>
 800dd94:	8019      	strh	r1, [r3, #0]
 800dd96:	2300      	movs	r3, #0
 800dd98:	6123      	str	r3, [r4, #16]
 800dd9a:	4615      	mov	r5, r2
 800dd9c:	e7ba      	b.n	800dd14 <_printf_i+0x150>
 800dd9e:	682b      	ldr	r3, [r5, #0]
 800dda0:	1d1a      	adds	r2, r3, #4
 800dda2:	602a      	str	r2, [r5, #0]
 800dda4:	681d      	ldr	r5, [r3, #0]
 800dda6:	6862      	ldr	r2, [r4, #4]
 800dda8:	2100      	movs	r1, #0
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f7f2 fa50 	bl	8000250 <memchr>
 800ddb0:	b108      	cbz	r0, 800ddb6 <_printf_i+0x1f2>
 800ddb2:	1b40      	subs	r0, r0, r5
 800ddb4:	6060      	str	r0, [r4, #4]
 800ddb6:	6863      	ldr	r3, [r4, #4]
 800ddb8:	6123      	str	r3, [r4, #16]
 800ddba:	2300      	movs	r3, #0
 800ddbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddc0:	e7a8      	b.n	800dd14 <_printf_i+0x150>
 800ddc2:	6923      	ldr	r3, [r4, #16]
 800ddc4:	462a      	mov	r2, r5
 800ddc6:	4649      	mov	r1, r9
 800ddc8:	4640      	mov	r0, r8
 800ddca:	47d0      	blx	sl
 800ddcc:	3001      	adds	r0, #1
 800ddce:	d0ab      	beq.n	800dd28 <_printf_i+0x164>
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	079b      	lsls	r3, r3, #30
 800ddd4:	d413      	bmi.n	800ddfe <_printf_i+0x23a>
 800ddd6:	68e0      	ldr	r0, [r4, #12]
 800ddd8:	9b03      	ldr	r3, [sp, #12]
 800ddda:	4298      	cmp	r0, r3
 800dddc:	bfb8      	it	lt
 800ddde:	4618      	movlt	r0, r3
 800dde0:	e7a4      	b.n	800dd2c <_printf_i+0x168>
 800dde2:	2301      	movs	r3, #1
 800dde4:	4632      	mov	r2, r6
 800dde6:	4649      	mov	r1, r9
 800dde8:	4640      	mov	r0, r8
 800ddea:	47d0      	blx	sl
 800ddec:	3001      	adds	r0, #1
 800ddee:	d09b      	beq.n	800dd28 <_printf_i+0x164>
 800ddf0:	3501      	adds	r5, #1
 800ddf2:	68e3      	ldr	r3, [r4, #12]
 800ddf4:	9903      	ldr	r1, [sp, #12]
 800ddf6:	1a5b      	subs	r3, r3, r1
 800ddf8:	42ab      	cmp	r3, r5
 800ddfa:	dcf2      	bgt.n	800dde2 <_printf_i+0x21e>
 800ddfc:	e7eb      	b.n	800ddd6 <_printf_i+0x212>
 800ddfe:	2500      	movs	r5, #0
 800de00:	f104 0619 	add.w	r6, r4, #25
 800de04:	e7f5      	b.n	800ddf2 <_printf_i+0x22e>
 800de06:	bf00      	nop
 800de08:	0801214a 	.word	0x0801214a
 800de0c:	0801215b 	.word	0x0801215b

0800de10 <_scanf_float>:
 800de10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de14:	b087      	sub	sp, #28
 800de16:	4617      	mov	r7, r2
 800de18:	9303      	str	r3, [sp, #12]
 800de1a:	688b      	ldr	r3, [r1, #8]
 800de1c:	1e5a      	subs	r2, r3, #1
 800de1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800de22:	bf83      	ittte	hi
 800de24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800de28:	195b      	addhi	r3, r3, r5
 800de2a:	9302      	strhi	r3, [sp, #8]
 800de2c:	2300      	movls	r3, #0
 800de2e:	bf86      	itte	hi
 800de30:	f240 135d 	movwhi	r3, #349	; 0x15d
 800de34:	608b      	strhi	r3, [r1, #8]
 800de36:	9302      	strls	r3, [sp, #8]
 800de38:	680b      	ldr	r3, [r1, #0]
 800de3a:	468b      	mov	fp, r1
 800de3c:	2500      	movs	r5, #0
 800de3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800de42:	f84b 3b1c 	str.w	r3, [fp], #28
 800de46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800de4a:	4680      	mov	r8, r0
 800de4c:	460c      	mov	r4, r1
 800de4e:	465e      	mov	r6, fp
 800de50:	46aa      	mov	sl, r5
 800de52:	46a9      	mov	r9, r5
 800de54:	9501      	str	r5, [sp, #4]
 800de56:	68a2      	ldr	r2, [r4, #8]
 800de58:	b152      	cbz	r2, 800de70 <_scanf_float+0x60>
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b4e      	cmp	r3, #78	; 0x4e
 800de60:	d864      	bhi.n	800df2c <_scanf_float+0x11c>
 800de62:	2b40      	cmp	r3, #64	; 0x40
 800de64:	d83c      	bhi.n	800dee0 <_scanf_float+0xd0>
 800de66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800de6a:	b2c8      	uxtb	r0, r1
 800de6c:	280e      	cmp	r0, #14
 800de6e:	d93a      	bls.n	800dee6 <_scanf_float+0xd6>
 800de70:	f1b9 0f00 	cmp.w	r9, #0
 800de74:	d003      	beq.n	800de7e <_scanf_float+0x6e>
 800de76:	6823      	ldr	r3, [r4, #0]
 800de78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de7c:	6023      	str	r3, [r4, #0]
 800de7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800de82:	f1ba 0f01 	cmp.w	sl, #1
 800de86:	f200 8113 	bhi.w	800e0b0 <_scanf_float+0x2a0>
 800de8a:	455e      	cmp	r6, fp
 800de8c:	f200 8105 	bhi.w	800e09a <_scanf_float+0x28a>
 800de90:	2501      	movs	r5, #1
 800de92:	4628      	mov	r0, r5
 800de94:	b007      	add	sp, #28
 800de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800de9e:	2a0d      	cmp	r2, #13
 800dea0:	d8e6      	bhi.n	800de70 <_scanf_float+0x60>
 800dea2:	a101      	add	r1, pc, #4	; (adr r1, 800dea8 <_scanf_float+0x98>)
 800dea4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dea8:	0800dfe7 	.word	0x0800dfe7
 800deac:	0800de71 	.word	0x0800de71
 800deb0:	0800de71 	.word	0x0800de71
 800deb4:	0800de71 	.word	0x0800de71
 800deb8:	0800e047 	.word	0x0800e047
 800debc:	0800e01f 	.word	0x0800e01f
 800dec0:	0800de71 	.word	0x0800de71
 800dec4:	0800de71 	.word	0x0800de71
 800dec8:	0800dff5 	.word	0x0800dff5
 800decc:	0800de71 	.word	0x0800de71
 800ded0:	0800de71 	.word	0x0800de71
 800ded4:	0800de71 	.word	0x0800de71
 800ded8:	0800de71 	.word	0x0800de71
 800dedc:	0800dfad 	.word	0x0800dfad
 800dee0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dee4:	e7db      	b.n	800de9e <_scanf_float+0x8e>
 800dee6:	290e      	cmp	r1, #14
 800dee8:	d8c2      	bhi.n	800de70 <_scanf_float+0x60>
 800deea:	a001      	add	r0, pc, #4	; (adr r0, 800def0 <_scanf_float+0xe0>)
 800deec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800def0:	0800df9f 	.word	0x0800df9f
 800def4:	0800de71 	.word	0x0800de71
 800def8:	0800df9f 	.word	0x0800df9f
 800defc:	0800e033 	.word	0x0800e033
 800df00:	0800de71 	.word	0x0800de71
 800df04:	0800df4d 	.word	0x0800df4d
 800df08:	0800df89 	.word	0x0800df89
 800df0c:	0800df89 	.word	0x0800df89
 800df10:	0800df89 	.word	0x0800df89
 800df14:	0800df89 	.word	0x0800df89
 800df18:	0800df89 	.word	0x0800df89
 800df1c:	0800df89 	.word	0x0800df89
 800df20:	0800df89 	.word	0x0800df89
 800df24:	0800df89 	.word	0x0800df89
 800df28:	0800df89 	.word	0x0800df89
 800df2c:	2b6e      	cmp	r3, #110	; 0x6e
 800df2e:	d809      	bhi.n	800df44 <_scanf_float+0x134>
 800df30:	2b60      	cmp	r3, #96	; 0x60
 800df32:	d8b2      	bhi.n	800de9a <_scanf_float+0x8a>
 800df34:	2b54      	cmp	r3, #84	; 0x54
 800df36:	d077      	beq.n	800e028 <_scanf_float+0x218>
 800df38:	2b59      	cmp	r3, #89	; 0x59
 800df3a:	d199      	bne.n	800de70 <_scanf_float+0x60>
 800df3c:	2d07      	cmp	r5, #7
 800df3e:	d197      	bne.n	800de70 <_scanf_float+0x60>
 800df40:	2508      	movs	r5, #8
 800df42:	e029      	b.n	800df98 <_scanf_float+0x188>
 800df44:	2b74      	cmp	r3, #116	; 0x74
 800df46:	d06f      	beq.n	800e028 <_scanf_float+0x218>
 800df48:	2b79      	cmp	r3, #121	; 0x79
 800df4a:	e7f6      	b.n	800df3a <_scanf_float+0x12a>
 800df4c:	6821      	ldr	r1, [r4, #0]
 800df4e:	05c8      	lsls	r0, r1, #23
 800df50:	d51a      	bpl.n	800df88 <_scanf_float+0x178>
 800df52:	9b02      	ldr	r3, [sp, #8]
 800df54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800df58:	6021      	str	r1, [r4, #0]
 800df5a:	f109 0901 	add.w	r9, r9, #1
 800df5e:	b11b      	cbz	r3, 800df68 <_scanf_float+0x158>
 800df60:	3b01      	subs	r3, #1
 800df62:	3201      	adds	r2, #1
 800df64:	9302      	str	r3, [sp, #8]
 800df66:	60a2      	str	r2, [r4, #8]
 800df68:	68a3      	ldr	r3, [r4, #8]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	60a3      	str	r3, [r4, #8]
 800df6e:	6923      	ldr	r3, [r4, #16]
 800df70:	3301      	adds	r3, #1
 800df72:	6123      	str	r3, [r4, #16]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	3b01      	subs	r3, #1
 800df78:	2b00      	cmp	r3, #0
 800df7a:	607b      	str	r3, [r7, #4]
 800df7c:	f340 8084 	ble.w	800e088 <_scanf_float+0x278>
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	3301      	adds	r3, #1
 800df84:	603b      	str	r3, [r7, #0]
 800df86:	e766      	b.n	800de56 <_scanf_float+0x46>
 800df88:	eb1a 0f05 	cmn.w	sl, r5
 800df8c:	f47f af70 	bne.w	800de70 <_scanf_float+0x60>
 800df90:	6822      	ldr	r2, [r4, #0]
 800df92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800df96:	6022      	str	r2, [r4, #0]
 800df98:	f806 3b01 	strb.w	r3, [r6], #1
 800df9c:	e7e4      	b.n	800df68 <_scanf_float+0x158>
 800df9e:	6822      	ldr	r2, [r4, #0]
 800dfa0:	0610      	lsls	r0, r2, #24
 800dfa2:	f57f af65 	bpl.w	800de70 <_scanf_float+0x60>
 800dfa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dfaa:	e7f4      	b.n	800df96 <_scanf_float+0x186>
 800dfac:	f1ba 0f00 	cmp.w	sl, #0
 800dfb0:	d10e      	bne.n	800dfd0 <_scanf_float+0x1c0>
 800dfb2:	f1b9 0f00 	cmp.w	r9, #0
 800dfb6:	d10e      	bne.n	800dfd6 <_scanf_float+0x1c6>
 800dfb8:	6822      	ldr	r2, [r4, #0]
 800dfba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dfbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dfc2:	d108      	bne.n	800dfd6 <_scanf_float+0x1c6>
 800dfc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dfc8:	6022      	str	r2, [r4, #0]
 800dfca:	f04f 0a01 	mov.w	sl, #1
 800dfce:	e7e3      	b.n	800df98 <_scanf_float+0x188>
 800dfd0:	f1ba 0f02 	cmp.w	sl, #2
 800dfd4:	d055      	beq.n	800e082 <_scanf_float+0x272>
 800dfd6:	2d01      	cmp	r5, #1
 800dfd8:	d002      	beq.n	800dfe0 <_scanf_float+0x1d0>
 800dfda:	2d04      	cmp	r5, #4
 800dfdc:	f47f af48 	bne.w	800de70 <_scanf_float+0x60>
 800dfe0:	3501      	adds	r5, #1
 800dfe2:	b2ed      	uxtb	r5, r5
 800dfe4:	e7d8      	b.n	800df98 <_scanf_float+0x188>
 800dfe6:	f1ba 0f01 	cmp.w	sl, #1
 800dfea:	f47f af41 	bne.w	800de70 <_scanf_float+0x60>
 800dfee:	f04f 0a02 	mov.w	sl, #2
 800dff2:	e7d1      	b.n	800df98 <_scanf_float+0x188>
 800dff4:	b97d      	cbnz	r5, 800e016 <_scanf_float+0x206>
 800dff6:	f1b9 0f00 	cmp.w	r9, #0
 800dffa:	f47f af3c 	bne.w	800de76 <_scanf_float+0x66>
 800dffe:	6822      	ldr	r2, [r4, #0]
 800e000:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e004:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e008:	f47f af39 	bne.w	800de7e <_scanf_float+0x6e>
 800e00c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e010:	6022      	str	r2, [r4, #0]
 800e012:	2501      	movs	r5, #1
 800e014:	e7c0      	b.n	800df98 <_scanf_float+0x188>
 800e016:	2d03      	cmp	r5, #3
 800e018:	d0e2      	beq.n	800dfe0 <_scanf_float+0x1d0>
 800e01a:	2d05      	cmp	r5, #5
 800e01c:	e7de      	b.n	800dfdc <_scanf_float+0x1cc>
 800e01e:	2d02      	cmp	r5, #2
 800e020:	f47f af26 	bne.w	800de70 <_scanf_float+0x60>
 800e024:	2503      	movs	r5, #3
 800e026:	e7b7      	b.n	800df98 <_scanf_float+0x188>
 800e028:	2d06      	cmp	r5, #6
 800e02a:	f47f af21 	bne.w	800de70 <_scanf_float+0x60>
 800e02e:	2507      	movs	r5, #7
 800e030:	e7b2      	b.n	800df98 <_scanf_float+0x188>
 800e032:	6822      	ldr	r2, [r4, #0]
 800e034:	0591      	lsls	r1, r2, #22
 800e036:	f57f af1b 	bpl.w	800de70 <_scanf_float+0x60>
 800e03a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e03e:	6022      	str	r2, [r4, #0]
 800e040:	f8cd 9004 	str.w	r9, [sp, #4]
 800e044:	e7a8      	b.n	800df98 <_scanf_float+0x188>
 800e046:	6822      	ldr	r2, [r4, #0]
 800e048:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e04c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e050:	d006      	beq.n	800e060 <_scanf_float+0x250>
 800e052:	0550      	lsls	r0, r2, #21
 800e054:	f57f af0c 	bpl.w	800de70 <_scanf_float+0x60>
 800e058:	f1b9 0f00 	cmp.w	r9, #0
 800e05c:	f43f af0f 	beq.w	800de7e <_scanf_float+0x6e>
 800e060:	0591      	lsls	r1, r2, #22
 800e062:	bf58      	it	pl
 800e064:	9901      	ldrpl	r1, [sp, #4]
 800e066:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e06a:	bf58      	it	pl
 800e06c:	eba9 0101 	subpl.w	r1, r9, r1
 800e070:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e074:	bf58      	it	pl
 800e076:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e07a:	6022      	str	r2, [r4, #0]
 800e07c:	f04f 0900 	mov.w	r9, #0
 800e080:	e78a      	b.n	800df98 <_scanf_float+0x188>
 800e082:	f04f 0a03 	mov.w	sl, #3
 800e086:	e787      	b.n	800df98 <_scanf_float+0x188>
 800e088:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e08c:	4639      	mov	r1, r7
 800e08e:	4640      	mov	r0, r8
 800e090:	4798      	blx	r3
 800e092:	2800      	cmp	r0, #0
 800e094:	f43f aedf 	beq.w	800de56 <_scanf_float+0x46>
 800e098:	e6ea      	b.n	800de70 <_scanf_float+0x60>
 800e09a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e09e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0a2:	463a      	mov	r2, r7
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	4798      	blx	r3
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	6123      	str	r3, [r4, #16]
 800e0ae:	e6ec      	b.n	800de8a <_scanf_float+0x7a>
 800e0b0:	1e6b      	subs	r3, r5, #1
 800e0b2:	2b06      	cmp	r3, #6
 800e0b4:	d825      	bhi.n	800e102 <_scanf_float+0x2f2>
 800e0b6:	2d02      	cmp	r5, #2
 800e0b8:	d836      	bhi.n	800e128 <_scanf_float+0x318>
 800e0ba:	455e      	cmp	r6, fp
 800e0bc:	f67f aee8 	bls.w	800de90 <_scanf_float+0x80>
 800e0c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0c8:	463a      	mov	r2, r7
 800e0ca:	4640      	mov	r0, r8
 800e0cc:	4798      	blx	r3
 800e0ce:	6923      	ldr	r3, [r4, #16]
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	6123      	str	r3, [r4, #16]
 800e0d4:	e7f1      	b.n	800e0ba <_scanf_float+0x2aa>
 800e0d6:	9802      	ldr	r0, [sp, #8]
 800e0d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e0e0:	9002      	str	r0, [sp, #8]
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	4798      	blx	r3
 800e0e8:	6923      	ldr	r3, [r4, #16]
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	6123      	str	r3, [r4, #16]
 800e0ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e0f2:	fa5f fa8a 	uxtb.w	sl, sl
 800e0f6:	f1ba 0f02 	cmp.w	sl, #2
 800e0fa:	d1ec      	bne.n	800e0d6 <_scanf_float+0x2c6>
 800e0fc:	3d03      	subs	r5, #3
 800e0fe:	b2ed      	uxtb	r5, r5
 800e100:	1b76      	subs	r6, r6, r5
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	05da      	lsls	r2, r3, #23
 800e106:	d52f      	bpl.n	800e168 <_scanf_float+0x358>
 800e108:	055b      	lsls	r3, r3, #21
 800e10a:	d510      	bpl.n	800e12e <_scanf_float+0x31e>
 800e10c:	455e      	cmp	r6, fp
 800e10e:	f67f aebf 	bls.w	800de90 <_scanf_float+0x80>
 800e112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e116:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e11a:	463a      	mov	r2, r7
 800e11c:	4640      	mov	r0, r8
 800e11e:	4798      	blx	r3
 800e120:	6923      	ldr	r3, [r4, #16]
 800e122:	3b01      	subs	r3, #1
 800e124:	6123      	str	r3, [r4, #16]
 800e126:	e7f1      	b.n	800e10c <_scanf_float+0x2fc>
 800e128:	46aa      	mov	sl, r5
 800e12a:	9602      	str	r6, [sp, #8]
 800e12c:	e7df      	b.n	800e0ee <_scanf_float+0x2de>
 800e12e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e132:	6923      	ldr	r3, [r4, #16]
 800e134:	2965      	cmp	r1, #101	; 0x65
 800e136:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e13a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800e13e:	6123      	str	r3, [r4, #16]
 800e140:	d00c      	beq.n	800e15c <_scanf_float+0x34c>
 800e142:	2945      	cmp	r1, #69	; 0x45
 800e144:	d00a      	beq.n	800e15c <_scanf_float+0x34c>
 800e146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e14a:	463a      	mov	r2, r7
 800e14c:	4640      	mov	r0, r8
 800e14e:	4798      	blx	r3
 800e150:	6923      	ldr	r3, [r4, #16]
 800e152:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e156:	3b01      	subs	r3, #1
 800e158:	1eb5      	subs	r5, r6, #2
 800e15a:	6123      	str	r3, [r4, #16]
 800e15c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e160:	463a      	mov	r2, r7
 800e162:	4640      	mov	r0, r8
 800e164:	4798      	blx	r3
 800e166:	462e      	mov	r6, r5
 800e168:	6825      	ldr	r5, [r4, #0]
 800e16a:	f015 0510 	ands.w	r5, r5, #16
 800e16e:	d159      	bne.n	800e224 <_scanf_float+0x414>
 800e170:	7035      	strb	r5, [r6, #0]
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e17c:	d11b      	bne.n	800e1b6 <_scanf_float+0x3a6>
 800e17e:	9b01      	ldr	r3, [sp, #4]
 800e180:	454b      	cmp	r3, r9
 800e182:	eba3 0209 	sub.w	r2, r3, r9
 800e186:	d123      	bne.n	800e1d0 <_scanf_float+0x3c0>
 800e188:	2200      	movs	r2, #0
 800e18a:	4659      	mov	r1, fp
 800e18c:	4640      	mov	r0, r8
 800e18e:	f000 fead 	bl	800eeec <_strtod_r>
 800e192:	6822      	ldr	r2, [r4, #0]
 800e194:	9b03      	ldr	r3, [sp, #12]
 800e196:	f012 0f02 	tst.w	r2, #2
 800e19a:	ec57 6b10 	vmov	r6, r7, d0
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	d021      	beq.n	800e1e6 <_scanf_float+0x3d6>
 800e1a2:	9903      	ldr	r1, [sp, #12]
 800e1a4:	1d1a      	adds	r2, r3, #4
 800e1a6:	600a      	str	r2, [r1, #0]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	e9c3 6700 	strd	r6, r7, [r3]
 800e1ae:	68e3      	ldr	r3, [r4, #12]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	60e3      	str	r3, [r4, #12]
 800e1b4:	e66d      	b.n	800de92 <_scanf_float+0x82>
 800e1b6:	9b04      	ldr	r3, [sp, #16]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d0e5      	beq.n	800e188 <_scanf_float+0x378>
 800e1bc:	9905      	ldr	r1, [sp, #20]
 800e1be:	230a      	movs	r3, #10
 800e1c0:	462a      	mov	r2, r5
 800e1c2:	3101      	adds	r1, #1
 800e1c4:	4640      	mov	r0, r8
 800e1c6:	f000 ff19 	bl	800effc <_strtol_r>
 800e1ca:	9b04      	ldr	r3, [sp, #16]
 800e1cc:	9e05      	ldr	r6, [sp, #20]
 800e1ce:	1ac2      	subs	r2, r0, r3
 800e1d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e1d4:	429e      	cmp	r6, r3
 800e1d6:	bf28      	it	cs
 800e1d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e1dc:	4912      	ldr	r1, [pc, #72]	; (800e228 <_scanf_float+0x418>)
 800e1de:	4630      	mov	r0, r6
 800e1e0:	f000 f82c 	bl	800e23c <siprintf>
 800e1e4:	e7d0      	b.n	800e188 <_scanf_float+0x378>
 800e1e6:	9903      	ldr	r1, [sp, #12]
 800e1e8:	f012 0f04 	tst.w	r2, #4
 800e1ec:	f103 0204 	add.w	r2, r3, #4
 800e1f0:	600a      	str	r2, [r1, #0]
 800e1f2:	d1d9      	bne.n	800e1a8 <_scanf_float+0x398>
 800e1f4:	f8d3 8000 	ldr.w	r8, [r3]
 800e1f8:	ee10 2a10 	vmov	r2, s0
 800e1fc:	ee10 0a10 	vmov	r0, s0
 800e200:	463b      	mov	r3, r7
 800e202:	4639      	mov	r1, r7
 800e204:	f7f2 fcca 	bl	8000b9c <__aeabi_dcmpun>
 800e208:	b128      	cbz	r0, 800e216 <_scanf_float+0x406>
 800e20a:	4808      	ldr	r0, [pc, #32]	; (800e22c <_scanf_float+0x41c>)
 800e20c:	f000 f810 	bl	800e230 <nanf>
 800e210:	ed88 0a00 	vstr	s0, [r8]
 800e214:	e7cb      	b.n	800e1ae <_scanf_float+0x39e>
 800e216:	4630      	mov	r0, r6
 800e218:	4639      	mov	r1, r7
 800e21a:	f7f2 fd1d 	bl	8000c58 <__aeabi_d2f>
 800e21e:	f8c8 0000 	str.w	r0, [r8]
 800e222:	e7c4      	b.n	800e1ae <_scanf_float+0x39e>
 800e224:	2500      	movs	r5, #0
 800e226:	e634      	b.n	800de92 <_scanf_float+0x82>
 800e228:	0801216c 	.word	0x0801216c
 800e22c:	08012478 	.word	0x08012478

0800e230 <nanf>:
 800e230:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e238 <nanf+0x8>
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	7fc00000 	.word	0x7fc00000

0800e23c <siprintf>:
 800e23c:	b40e      	push	{r1, r2, r3}
 800e23e:	b500      	push	{lr}
 800e240:	b09c      	sub	sp, #112	; 0x70
 800e242:	ab1d      	add	r3, sp, #116	; 0x74
 800e244:	9002      	str	r0, [sp, #8]
 800e246:	9006      	str	r0, [sp, #24]
 800e248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e24c:	4809      	ldr	r0, [pc, #36]	; (800e274 <siprintf+0x38>)
 800e24e:	9107      	str	r1, [sp, #28]
 800e250:	9104      	str	r1, [sp, #16]
 800e252:	4909      	ldr	r1, [pc, #36]	; (800e278 <siprintf+0x3c>)
 800e254:	f853 2b04 	ldr.w	r2, [r3], #4
 800e258:	9105      	str	r1, [sp, #20]
 800e25a:	6800      	ldr	r0, [r0, #0]
 800e25c:	9301      	str	r3, [sp, #4]
 800e25e:	a902      	add	r1, sp, #8
 800e260:	f002 fef8 	bl	8011054 <_svfiprintf_r>
 800e264:	9b02      	ldr	r3, [sp, #8]
 800e266:	2200      	movs	r2, #0
 800e268:	701a      	strb	r2, [r3, #0]
 800e26a:	b01c      	add	sp, #112	; 0x70
 800e26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e270:	b003      	add	sp, #12
 800e272:	4770      	bx	lr
 800e274:	20000010 	.word	0x20000010
 800e278:	ffff0208 	.word	0xffff0208

0800e27c <strncpy>:
 800e27c:	b510      	push	{r4, lr}
 800e27e:	3901      	subs	r1, #1
 800e280:	4603      	mov	r3, r0
 800e282:	b132      	cbz	r2, 800e292 <strncpy+0x16>
 800e284:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e288:	f803 4b01 	strb.w	r4, [r3], #1
 800e28c:	3a01      	subs	r2, #1
 800e28e:	2c00      	cmp	r4, #0
 800e290:	d1f7      	bne.n	800e282 <strncpy+0x6>
 800e292:	441a      	add	r2, r3
 800e294:	2100      	movs	r1, #0
 800e296:	4293      	cmp	r3, r2
 800e298:	d100      	bne.n	800e29c <strncpy+0x20>
 800e29a:	bd10      	pop	{r4, pc}
 800e29c:	f803 1b01 	strb.w	r1, [r3], #1
 800e2a0:	e7f9      	b.n	800e296 <strncpy+0x1a>

0800e2a2 <sulp>:
 800e2a2:	b570      	push	{r4, r5, r6, lr}
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	460d      	mov	r5, r1
 800e2a8:	ec45 4b10 	vmov	d0, r4, r5
 800e2ac:	4616      	mov	r6, r2
 800e2ae:	f002 fc2f 	bl	8010b10 <__ulp>
 800e2b2:	ec51 0b10 	vmov	r0, r1, d0
 800e2b6:	b17e      	cbz	r6, 800e2d8 <sulp+0x36>
 800e2b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e2bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	dd09      	ble.n	800e2d8 <sulp+0x36>
 800e2c4:	051b      	lsls	r3, r3, #20
 800e2c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e2ca:	2400      	movs	r4, #0
 800e2cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e2d0:	4622      	mov	r2, r4
 800e2d2:	462b      	mov	r3, r5
 800e2d4:	f7f2 f9c8 	bl	8000668 <__aeabi_dmul>
 800e2d8:	bd70      	pop	{r4, r5, r6, pc}
 800e2da:	0000      	movs	r0, r0
 800e2dc:	0000      	movs	r0, r0
	...

0800e2e0 <_strtod_l>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	ed2d 8b02 	vpush	{d8}
 800e2e8:	b09d      	sub	sp, #116	; 0x74
 800e2ea:	461f      	mov	r7, r3
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	9318      	str	r3, [sp, #96]	; 0x60
 800e2f0:	4ba2      	ldr	r3, [pc, #648]	; (800e57c <_strtod_l+0x29c>)
 800e2f2:	9213      	str	r2, [sp, #76]	; 0x4c
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	9305      	str	r3, [sp, #20]
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	4688      	mov	r8, r1
 800e2fe:	f7f1 ff99 	bl	8000234 <strlen>
 800e302:	f04f 0a00 	mov.w	sl, #0
 800e306:	4605      	mov	r5, r0
 800e308:	f04f 0b00 	mov.w	fp, #0
 800e30c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e312:	781a      	ldrb	r2, [r3, #0]
 800e314:	2a2b      	cmp	r2, #43	; 0x2b
 800e316:	d04e      	beq.n	800e3b6 <_strtod_l+0xd6>
 800e318:	d83b      	bhi.n	800e392 <_strtod_l+0xb2>
 800e31a:	2a0d      	cmp	r2, #13
 800e31c:	d834      	bhi.n	800e388 <_strtod_l+0xa8>
 800e31e:	2a08      	cmp	r2, #8
 800e320:	d834      	bhi.n	800e38c <_strtod_l+0xac>
 800e322:	2a00      	cmp	r2, #0
 800e324:	d03e      	beq.n	800e3a4 <_strtod_l+0xc4>
 800e326:	2300      	movs	r3, #0
 800e328:	930a      	str	r3, [sp, #40]	; 0x28
 800e32a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e32c:	7833      	ldrb	r3, [r6, #0]
 800e32e:	2b30      	cmp	r3, #48	; 0x30
 800e330:	f040 80b0 	bne.w	800e494 <_strtod_l+0x1b4>
 800e334:	7873      	ldrb	r3, [r6, #1]
 800e336:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e33a:	2b58      	cmp	r3, #88	; 0x58
 800e33c:	d168      	bne.n	800e410 <_strtod_l+0x130>
 800e33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	ab18      	add	r3, sp, #96	; 0x60
 800e344:	9702      	str	r7, [sp, #8]
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	4a8d      	ldr	r2, [pc, #564]	; (800e580 <_strtod_l+0x2a0>)
 800e34a:	ab19      	add	r3, sp, #100	; 0x64
 800e34c:	a917      	add	r1, sp, #92	; 0x5c
 800e34e:	4620      	mov	r0, r4
 800e350:	f001 fd38 	bl	800fdc4 <__gethex>
 800e354:	f010 0707 	ands.w	r7, r0, #7
 800e358:	4605      	mov	r5, r0
 800e35a:	d005      	beq.n	800e368 <_strtod_l+0x88>
 800e35c:	2f06      	cmp	r7, #6
 800e35e:	d12c      	bne.n	800e3ba <_strtod_l+0xda>
 800e360:	3601      	adds	r6, #1
 800e362:	2300      	movs	r3, #0
 800e364:	9617      	str	r6, [sp, #92]	; 0x5c
 800e366:	930a      	str	r3, [sp, #40]	; 0x28
 800e368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	f040 8590 	bne.w	800ee90 <_strtod_l+0xbb0>
 800e370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e372:	b1eb      	cbz	r3, 800e3b0 <_strtod_l+0xd0>
 800e374:	4652      	mov	r2, sl
 800e376:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e37a:	ec43 2b10 	vmov	d0, r2, r3
 800e37e:	b01d      	add	sp, #116	; 0x74
 800e380:	ecbd 8b02 	vpop	{d8}
 800e384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e388:	2a20      	cmp	r2, #32
 800e38a:	d1cc      	bne.n	800e326 <_strtod_l+0x46>
 800e38c:	3301      	adds	r3, #1
 800e38e:	9317      	str	r3, [sp, #92]	; 0x5c
 800e390:	e7be      	b.n	800e310 <_strtod_l+0x30>
 800e392:	2a2d      	cmp	r2, #45	; 0x2d
 800e394:	d1c7      	bne.n	800e326 <_strtod_l+0x46>
 800e396:	2201      	movs	r2, #1
 800e398:	920a      	str	r2, [sp, #40]	; 0x28
 800e39a:	1c5a      	adds	r2, r3, #1
 800e39c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e39e:	785b      	ldrb	r3, [r3, #1]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d1c2      	bne.n	800e32a <_strtod_l+0x4a>
 800e3a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e3a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f040 856e 	bne.w	800ee8c <_strtod_l+0xbac>
 800e3b0:	4652      	mov	r2, sl
 800e3b2:	465b      	mov	r3, fp
 800e3b4:	e7e1      	b.n	800e37a <_strtod_l+0x9a>
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	e7ee      	b.n	800e398 <_strtod_l+0xb8>
 800e3ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e3bc:	b13a      	cbz	r2, 800e3ce <_strtod_l+0xee>
 800e3be:	2135      	movs	r1, #53	; 0x35
 800e3c0:	a81a      	add	r0, sp, #104	; 0x68
 800e3c2:	f002 fcb0 	bl	8010d26 <__copybits>
 800e3c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f002 f86f 	bl	80104ac <_Bfree>
 800e3ce:	3f01      	subs	r7, #1
 800e3d0:	2f04      	cmp	r7, #4
 800e3d2:	d806      	bhi.n	800e3e2 <_strtod_l+0x102>
 800e3d4:	e8df f007 	tbb	[pc, r7]
 800e3d8:	1714030a 	.word	0x1714030a
 800e3dc:	0a          	.byte	0x0a
 800e3dd:	00          	.byte	0x00
 800e3de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e3e2:	0728      	lsls	r0, r5, #28
 800e3e4:	d5c0      	bpl.n	800e368 <_strtod_l+0x88>
 800e3e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e3ea:	e7bd      	b.n	800e368 <_strtod_l+0x88>
 800e3ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e3f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e3f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e3f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e3fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e3fe:	e7f0      	b.n	800e3e2 <_strtod_l+0x102>
 800e400:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e584 <_strtod_l+0x2a4>
 800e404:	e7ed      	b.n	800e3e2 <_strtod_l+0x102>
 800e406:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e40a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e40e:	e7e8      	b.n	800e3e2 <_strtod_l+0x102>
 800e410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e412:	1c5a      	adds	r2, r3, #1
 800e414:	9217      	str	r2, [sp, #92]	; 0x5c
 800e416:	785b      	ldrb	r3, [r3, #1]
 800e418:	2b30      	cmp	r3, #48	; 0x30
 800e41a:	d0f9      	beq.n	800e410 <_strtod_l+0x130>
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d0a3      	beq.n	800e368 <_strtod_l+0x88>
 800e420:	2301      	movs	r3, #1
 800e422:	f04f 0900 	mov.w	r9, #0
 800e426:	9304      	str	r3, [sp, #16]
 800e428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e42a:	9308      	str	r3, [sp, #32]
 800e42c:	f8cd 901c 	str.w	r9, [sp, #28]
 800e430:	464f      	mov	r7, r9
 800e432:	220a      	movs	r2, #10
 800e434:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e436:	7806      	ldrb	r6, [r0, #0]
 800e438:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e43c:	b2d9      	uxtb	r1, r3
 800e43e:	2909      	cmp	r1, #9
 800e440:	d92a      	bls.n	800e498 <_strtod_l+0x1b8>
 800e442:	9905      	ldr	r1, [sp, #20]
 800e444:	462a      	mov	r2, r5
 800e446:	f002 ff1f 	bl	8011288 <strncmp>
 800e44a:	b398      	cbz	r0, 800e4b4 <_strtod_l+0x1d4>
 800e44c:	2000      	movs	r0, #0
 800e44e:	4632      	mov	r2, r6
 800e450:	463d      	mov	r5, r7
 800e452:	9005      	str	r0, [sp, #20]
 800e454:	4603      	mov	r3, r0
 800e456:	2a65      	cmp	r2, #101	; 0x65
 800e458:	d001      	beq.n	800e45e <_strtod_l+0x17e>
 800e45a:	2a45      	cmp	r2, #69	; 0x45
 800e45c:	d118      	bne.n	800e490 <_strtod_l+0x1b0>
 800e45e:	b91d      	cbnz	r5, 800e468 <_strtod_l+0x188>
 800e460:	9a04      	ldr	r2, [sp, #16]
 800e462:	4302      	orrs	r2, r0
 800e464:	d09e      	beq.n	800e3a4 <_strtod_l+0xc4>
 800e466:	2500      	movs	r5, #0
 800e468:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e46c:	f108 0201 	add.w	r2, r8, #1
 800e470:	9217      	str	r2, [sp, #92]	; 0x5c
 800e472:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e476:	2a2b      	cmp	r2, #43	; 0x2b
 800e478:	d075      	beq.n	800e566 <_strtod_l+0x286>
 800e47a:	2a2d      	cmp	r2, #45	; 0x2d
 800e47c:	d07b      	beq.n	800e576 <_strtod_l+0x296>
 800e47e:	f04f 0c00 	mov.w	ip, #0
 800e482:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e486:	2909      	cmp	r1, #9
 800e488:	f240 8082 	bls.w	800e590 <_strtod_l+0x2b0>
 800e48c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e490:	2600      	movs	r6, #0
 800e492:	e09d      	b.n	800e5d0 <_strtod_l+0x2f0>
 800e494:	2300      	movs	r3, #0
 800e496:	e7c4      	b.n	800e422 <_strtod_l+0x142>
 800e498:	2f08      	cmp	r7, #8
 800e49a:	bfd8      	it	le
 800e49c:	9907      	ldrle	r1, [sp, #28]
 800e49e:	f100 0001 	add.w	r0, r0, #1
 800e4a2:	bfda      	itte	le
 800e4a4:	fb02 3301 	mlale	r3, r2, r1, r3
 800e4a8:	9307      	strle	r3, [sp, #28]
 800e4aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e4ae:	3701      	adds	r7, #1
 800e4b0:	9017      	str	r0, [sp, #92]	; 0x5c
 800e4b2:	e7bf      	b.n	800e434 <_strtod_l+0x154>
 800e4b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e4b6:	195a      	adds	r2, r3, r5
 800e4b8:	9217      	str	r2, [sp, #92]	; 0x5c
 800e4ba:	5d5a      	ldrb	r2, [r3, r5]
 800e4bc:	2f00      	cmp	r7, #0
 800e4be:	d037      	beq.n	800e530 <_strtod_l+0x250>
 800e4c0:	9005      	str	r0, [sp, #20]
 800e4c2:	463d      	mov	r5, r7
 800e4c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e4c8:	2b09      	cmp	r3, #9
 800e4ca:	d912      	bls.n	800e4f2 <_strtod_l+0x212>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e7c2      	b.n	800e456 <_strtod_l+0x176>
 800e4d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e4d2:	1c5a      	adds	r2, r3, #1
 800e4d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800e4d6:	785a      	ldrb	r2, [r3, #1]
 800e4d8:	3001      	adds	r0, #1
 800e4da:	2a30      	cmp	r2, #48	; 0x30
 800e4dc:	d0f8      	beq.n	800e4d0 <_strtod_l+0x1f0>
 800e4de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e4e2:	2b08      	cmp	r3, #8
 800e4e4:	f200 84d9 	bhi.w	800ee9a <_strtod_l+0xbba>
 800e4e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e4ea:	9005      	str	r0, [sp, #20]
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	9308      	str	r3, [sp, #32]
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	3a30      	subs	r2, #48	; 0x30
 800e4f4:	f100 0301 	add.w	r3, r0, #1
 800e4f8:	d014      	beq.n	800e524 <_strtod_l+0x244>
 800e4fa:	9905      	ldr	r1, [sp, #20]
 800e4fc:	4419      	add	r1, r3
 800e4fe:	9105      	str	r1, [sp, #20]
 800e500:	462b      	mov	r3, r5
 800e502:	eb00 0e05 	add.w	lr, r0, r5
 800e506:	210a      	movs	r1, #10
 800e508:	4573      	cmp	r3, lr
 800e50a:	d113      	bne.n	800e534 <_strtod_l+0x254>
 800e50c:	182b      	adds	r3, r5, r0
 800e50e:	2b08      	cmp	r3, #8
 800e510:	f105 0501 	add.w	r5, r5, #1
 800e514:	4405      	add	r5, r0
 800e516:	dc1c      	bgt.n	800e552 <_strtod_l+0x272>
 800e518:	9907      	ldr	r1, [sp, #28]
 800e51a:	230a      	movs	r3, #10
 800e51c:	fb03 2301 	mla	r3, r3, r1, r2
 800e520:	9307      	str	r3, [sp, #28]
 800e522:	2300      	movs	r3, #0
 800e524:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e526:	1c51      	adds	r1, r2, #1
 800e528:	9117      	str	r1, [sp, #92]	; 0x5c
 800e52a:	7852      	ldrb	r2, [r2, #1]
 800e52c:	4618      	mov	r0, r3
 800e52e:	e7c9      	b.n	800e4c4 <_strtod_l+0x1e4>
 800e530:	4638      	mov	r0, r7
 800e532:	e7d2      	b.n	800e4da <_strtod_l+0x1fa>
 800e534:	2b08      	cmp	r3, #8
 800e536:	dc04      	bgt.n	800e542 <_strtod_l+0x262>
 800e538:	9e07      	ldr	r6, [sp, #28]
 800e53a:	434e      	muls	r6, r1
 800e53c:	9607      	str	r6, [sp, #28]
 800e53e:	3301      	adds	r3, #1
 800e540:	e7e2      	b.n	800e508 <_strtod_l+0x228>
 800e542:	f103 0c01 	add.w	ip, r3, #1
 800e546:	f1bc 0f10 	cmp.w	ip, #16
 800e54a:	bfd8      	it	le
 800e54c:	fb01 f909 	mulle.w	r9, r1, r9
 800e550:	e7f5      	b.n	800e53e <_strtod_l+0x25e>
 800e552:	2d10      	cmp	r5, #16
 800e554:	bfdc      	itt	le
 800e556:	230a      	movle	r3, #10
 800e558:	fb03 2909 	mlale	r9, r3, r9, r2
 800e55c:	e7e1      	b.n	800e522 <_strtod_l+0x242>
 800e55e:	2300      	movs	r3, #0
 800e560:	9305      	str	r3, [sp, #20]
 800e562:	2301      	movs	r3, #1
 800e564:	e77c      	b.n	800e460 <_strtod_l+0x180>
 800e566:	f04f 0c00 	mov.w	ip, #0
 800e56a:	f108 0202 	add.w	r2, r8, #2
 800e56e:	9217      	str	r2, [sp, #92]	; 0x5c
 800e570:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e574:	e785      	b.n	800e482 <_strtod_l+0x1a2>
 800e576:	f04f 0c01 	mov.w	ip, #1
 800e57a:	e7f6      	b.n	800e56a <_strtod_l+0x28a>
 800e57c:	080122c0 	.word	0x080122c0
 800e580:	08012174 	.word	0x08012174
 800e584:	7ff00000 	.word	0x7ff00000
 800e588:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e58a:	1c51      	adds	r1, r2, #1
 800e58c:	9117      	str	r1, [sp, #92]	; 0x5c
 800e58e:	7852      	ldrb	r2, [r2, #1]
 800e590:	2a30      	cmp	r2, #48	; 0x30
 800e592:	d0f9      	beq.n	800e588 <_strtod_l+0x2a8>
 800e594:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e598:	2908      	cmp	r1, #8
 800e59a:	f63f af79 	bhi.w	800e490 <_strtod_l+0x1b0>
 800e59e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e5a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e5a4:	9206      	str	r2, [sp, #24]
 800e5a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e5a8:	1c51      	adds	r1, r2, #1
 800e5aa:	9117      	str	r1, [sp, #92]	; 0x5c
 800e5ac:	7852      	ldrb	r2, [r2, #1]
 800e5ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e5b2:	2e09      	cmp	r6, #9
 800e5b4:	d937      	bls.n	800e626 <_strtod_l+0x346>
 800e5b6:	9e06      	ldr	r6, [sp, #24]
 800e5b8:	1b89      	subs	r1, r1, r6
 800e5ba:	2908      	cmp	r1, #8
 800e5bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e5c0:	dc02      	bgt.n	800e5c8 <_strtod_l+0x2e8>
 800e5c2:	4576      	cmp	r6, lr
 800e5c4:	bfa8      	it	ge
 800e5c6:	4676      	movge	r6, lr
 800e5c8:	f1bc 0f00 	cmp.w	ip, #0
 800e5cc:	d000      	beq.n	800e5d0 <_strtod_l+0x2f0>
 800e5ce:	4276      	negs	r6, r6
 800e5d0:	2d00      	cmp	r5, #0
 800e5d2:	d14d      	bne.n	800e670 <_strtod_l+0x390>
 800e5d4:	9904      	ldr	r1, [sp, #16]
 800e5d6:	4301      	orrs	r1, r0
 800e5d8:	f47f aec6 	bne.w	800e368 <_strtod_l+0x88>
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f47f aee1 	bne.w	800e3a4 <_strtod_l+0xc4>
 800e5e2:	2a69      	cmp	r2, #105	; 0x69
 800e5e4:	d027      	beq.n	800e636 <_strtod_l+0x356>
 800e5e6:	dc24      	bgt.n	800e632 <_strtod_l+0x352>
 800e5e8:	2a49      	cmp	r2, #73	; 0x49
 800e5ea:	d024      	beq.n	800e636 <_strtod_l+0x356>
 800e5ec:	2a4e      	cmp	r2, #78	; 0x4e
 800e5ee:	f47f aed9 	bne.w	800e3a4 <_strtod_l+0xc4>
 800e5f2:	499f      	ldr	r1, [pc, #636]	; (800e870 <_strtod_l+0x590>)
 800e5f4:	a817      	add	r0, sp, #92	; 0x5c
 800e5f6:	f001 fe3d 	bl	8010274 <__match>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	f43f aed2 	beq.w	800e3a4 <_strtod_l+0xc4>
 800e600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	2b28      	cmp	r3, #40	; 0x28
 800e606:	d12d      	bne.n	800e664 <_strtod_l+0x384>
 800e608:	499a      	ldr	r1, [pc, #616]	; (800e874 <_strtod_l+0x594>)
 800e60a:	aa1a      	add	r2, sp, #104	; 0x68
 800e60c:	a817      	add	r0, sp, #92	; 0x5c
 800e60e:	f001 fe45 	bl	801029c <__hexnan>
 800e612:	2805      	cmp	r0, #5
 800e614:	d126      	bne.n	800e664 <_strtod_l+0x384>
 800e616:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e618:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e61c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e620:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e624:	e6a0      	b.n	800e368 <_strtod_l+0x88>
 800e626:	210a      	movs	r1, #10
 800e628:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e62c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e630:	e7b9      	b.n	800e5a6 <_strtod_l+0x2c6>
 800e632:	2a6e      	cmp	r2, #110	; 0x6e
 800e634:	e7db      	b.n	800e5ee <_strtod_l+0x30e>
 800e636:	4990      	ldr	r1, [pc, #576]	; (800e878 <_strtod_l+0x598>)
 800e638:	a817      	add	r0, sp, #92	; 0x5c
 800e63a:	f001 fe1b 	bl	8010274 <__match>
 800e63e:	2800      	cmp	r0, #0
 800e640:	f43f aeb0 	beq.w	800e3a4 <_strtod_l+0xc4>
 800e644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e646:	498d      	ldr	r1, [pc, #564]	; (800e87c <_strtod_l+0x59c>)
 800e648:	3b01      	subs	r3, #1
 800e64a:	a817      	add	r0, sp, #92	; 0x5c
 800e64c:	9317      	str	r3, [sp, #92]	; 0x5c
 800e64e:	f001 fe11 	bl	8010274 <__match>
 800e652:	b910      	cbnz	r0, 800e65a <_strtod_l+0x37a>
 800e654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e656:	3301      	adds	r3, #1
 800e658:	9317      	str	r3, [sp, #92]	; 0x5c
 800e65a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e88c <_strtod_l+0x5ac>
 800e65e:	f04f 0a00 	mov.w	sl, #0
 800e662:	e681      	b.n	800e368 <_strtod_l+0x88>
 800e664:	4886      	ldr	r0, [pc, #536]	; (800e880 <_strtod_l+0x5a0>)
 800e666:	f002 fdf7 	bl	8011258 <nan>
 800e66a:	ec5b ab10 	vmov	sl, fp, d0
 800e66e:	e67b      	b.n	800e368 <_strtod_l+0x88>
 800e670:	9b05      	ldr	r3, [sp, #20]
 800e672:	9807      	ldr	r0, [sp, #28]
 800e674:	1af3      	subs	r3, r6, r3
 800e676:	2f00      	cmp	r7, #0
 800e678:	bf08      	it	eq
 800e67a:	462f      	moveq	r7, r5
 800e67c:	2d10      	cmp	r5, #16
 800e67e:	9306      	str	r3, [sp, #24]
 800e680:	46a8      	mov	r8, r5
 800e682:	bfa8      	it	ge
 800e684:	f04f 0810 	movge.w	r8, #16
 800e688:	f7f1 ff74 	bl	8000574 <__aeabi_ui2d>
 800e68c:	2d09      	cmp	r5, #9
 800e68e:	4682      	mov	sl, r0
 800e690:	468b      	mov	fp, r1
 800e692:	dd13      	ble.n	800e6bc <_strtod_l+0x3dc>
 800e694:	4b7b      	ldr	r3, [pc, #492]	; (800e884 <_strtod_l+0x5a4>)
 800e696:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e69a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e69e:	f7f1 ffe3 	bl	8000668 <__aeabi_dmul>
 800e6a2:	4682      	mov	sl, r0
 800e6a4:	4648      	mov	r0, r9
 800e6a6:	468b      	mov	fp, r1
 800e6a8:	f7f1 ff64 	bl	8000574 <__aeabi_ui2d>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	4650      	mov	r0, sl
 800e6b2:	4659      	mov	r1, fp
 800e6b4:	f7f1 fe22 	bl	80002fc <__adddf3>
 800e6b8:	4682      	mov	sl, r0
 800e6ba:	468b      	mov	fp, r1
 800e6bc:	2d0f      	cmp	r5, #15
 800e6be:	dc38      	bgt.n	800e732 <_strtod_l+0x452>
 800e6c0:	9b06      	ldr	r3, [sp, #24]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	f43f ae50 	beq.w	800e368 <_strtod_l+0x88>
 800e6c8:	dd24      	ble.n	800e714 <_strtod_l+0x434>
 800e6ca:	2b16      	cmp	r3, #22
 800e6cc:	dc0b      	bgt.n	800e6e6 <_strtod_l+0x406>
 800e6ce:	496d      	ldr	r1, [pc, #436]	; (800e884 <_strtod_l+0x5a4>)
 800e6d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6d8:	4652      	mov	r2, sl
 800e6da:	465b      	mov	r3, fp
 800e6dc:	f7f1 ffc4 	bl	8000668 <__aeabi_dmul>
 800e6e0:	4682      	mov	sl, r0
 800e6e2:	468b      	mov	fp, r1
 800e6e4:	e640      	b.n	800e368 <_strtod_l+0x88>
 800e6e6:	9a06      	ldr	r2, [sp, #24]
 800e6e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	db20      	blt.n	800e732 <_strtod_l+0x452>
 800e6f0:	4c64      	ldr	r4, [pc, #400]	; (800e884 <_strtod_l+0x5a4>)
 800e6f2:	f1c5 050f 	rsb	r5, r5, #15
 800e6f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e6fa:	4652      	mov	r2, sl
 800e6fc:	465b      	mov	r3, fp
 800e6fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e702:	f7f1 ffb1 	bl	8000668 <__aeabi_dmul>
 800e706:	9b06      	ldr	r3, [sp, #24]
 800e708:	1b5d      	subs	r5, r3, r5
 800e70a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e70e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e712:	e7e3      	b.n	800e6dc <_strtod_l+0x3fc>
 800e714:	9b06      	ldr	r3, [sp, #24]
 800e716:	3316      	adds	r3, #22
 800e718:	db0b      	blt.n	800e732 <_strtod_l+0x452>
 800e71a:	9b05      	ldr	r3, [sp, #20]
 800e71c:	1b9e      	subs	r6, r3, r6
 800e71e:	4b59      	ldr	r3, [pc, #356]	; (800e884 <_strtod_l+0x5a4>)
 800e720:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e724:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e728:	4650      	mov	r0, sl
 800e72a:	4659      	mov	r1, fp
 800e72c:	f7f2 f8c6 	bl	80008bc <__aeabi_ddiv>
 800e730:	e7d6      	b.n	800e6e0 <_strtod_l+0x400>
 800e732:	9b06      	ldr	r3, [sp, #24]
 800e734:	eba5 0808 	sub.w	r8, r5, r8
 800e738:	4498      	add	r8, r3
 800e73a:	f1b8 0f00 	cmp.w	r8, #0
 800e73e:	dd74      	ble.n	800e82a <_strtod_l+0x54a>
 800e740:	f018 030f 	ands.w	r3, r8, #15
 800e744:	d00a      	beq.n	800e75c <_strtod_l+0x47c>
 800e746:	494f      	ldr	r1, [pc, #316]	; (800e884 <_strtod_l+0x5a4>)
 800e748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e74c:	4652      	mov	r2, sl
 800e74e:	465b      	mov	r3, fp
 800e750:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e754:	f7f1 ff88 	bl	8000668 <__aeabi_dmul>
 800e758:	4682      	mov	sl, r0
 800e75a:	468b      	mov	fp, r1
 800e75c:	f038 080f 	bics.w	r8, r8, #15
 800e760:	d04f      	beq.n	800e802 <_strtod_l+0x522>
 800e762:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e766:	dd22      	ble.n	800e7ae <_strtod_l+0x4ce>
 800e768:	2500      	movs	r5, #0
 800e76a:	462e      	mov	r6, r5
 800e76c:	9507      	str	r5, [sp, #28]
 800e76e:	9505      	str	r5, [sp, #20]
 800e770:	2322      	movs	r3, #34	; 0x22
 800e772:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e88c <_strtod_l+0x5ac>
 800e776:	6023      	str	r3, [r4, #0]
 800e778:	f04f 0a00 	mov.w	sl, #0
 800e77c:	9b07      	ldr	r3, [sp, #28]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f43f adf2 	beq.w	800e368 <_strtod_l+0x88>
 800e784:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e786:	4620      	mov	r0, r4
 800e788:	f001 fe90 	bl	80104ac <_Bfree>
 800e78c:	9905      	ldr	r1, [sp, #20]
 800e78e:	4620      	mov	r0, r4
 800e790:	f001 fe8c 	bl	80104ac <_Bfree>
 800e794:	4631      	mov	r1, r6
 800e796:	4620      	mov	r0, r4
 800e798:	f001 fe88 	bl	80104ac <_Bfree>
 800e79c:	9907      	ldr	r1, [sp, #28]
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f001 fe84 	bl	80104ac <_Bfree>
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f001 fe80 	bl	80104ac <_Bfree>
 800e7ac:	e5dc      	b.n	800e368 <_strtod_l+0x88>
 800e7ae:	4b36      	ldr	r3, [pc, #216]	; (800e888 <_strtod_l+0x5a8>)
 800e7b0:	9304      	str	r3, [sp, #16]
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e7b8:	4650      	mov	r0, sl
 800e7ba:	4659      	mov	r1, fp
 800e7bc:	4699      	mov	r9, r3
 800e7be:	f1b8 0f01 	cmp.w	r8, #1
 800e7c2:	dc21      	bgt.n	800e808 <_strtod_l+0x528>
 800e7c4:	b10b      	cbz	r3, 800e7ca <_strtod_l+0x4ea>
 800e7c6:	4682      	mov	sl, r0
 800e7c8:	468b      	mov	fp, r1
 800e7ca:	4b2f      	ldr	r3, [pc, #188]	; (800e888 <_strtod_l+0x5a8>)
 800e7cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e7d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e7d4:	4652      	mov	r2, sl
 800e7d6:	465b      	mov	r3, fp
 800e7d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e7dc:	f7f1 ff44 	bl	8000668 <__aeabi_dmul>
 800e7e0:	4b2a      	ldr	r3, [pc, #168]	; (800e88c <_strtod_l+0x5ac>)
 800e7e2:	460a      	mov	r2, r1
 800e7e4:	400b      	ands	r3, r1
 800e7e6:	492a      	ldr	r1, [pc, #168]	; (800e890 <_strtod_l+0x5b0>)
 800e7e8:	428b      	cmp	r3, r1
 800e7ea:	4682      	mov	sl, r0
 800e7ec:	d8bc      	bhi.n	800e768 <_strtod_l+0x488>
 800e7ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e7f2:	428b      	cmp	r3, r1
 800e7f4:	bf86      	itte	hi
 800e7f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e894 <_strtod_l+0x5b4>
 800e7fa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e7fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e802:	2300      	movs	r3, #0
 800e804:	9304      	str	r3, [sp, #16]
 800e806:	e084      	b.n	800e912 <_strtod_l+0x632>
 800e808:	f018 0f01 	tst.w	r8, #1
 800e80c:	d005      	beq.n	800e81a <_strtod_l+0x53a>
 800e80e:	9b04      	ldr	r3, [sp, #16]
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f7f1 ff28 	bl	8000668 <__aeabi_dmul>
 800e818:	2301      	movs	r3, #1
 800e81a:	9a04      	ldr	r2, [sp, #16]
 800e81c:	3208      	adds	r2, #8
 800e81e:	f109 0901 	add.w	r9, r9, #1
 800e822:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e826:	9204      	str	r2, [sp, #16]
 800e828:	e7c9      	b.n	800e7be <_strtod_l+0x4de>
 800e82a:	d0ea      	beq.n	800e802 <_strtod_l+0x522>
 800e82c:	f1c8 0800 	rsb	r8, r8, #0
 800e830:	f018 020f 	ands.w	r2, r8, #15
 800e834:	d00a      	beq.n	800e84c <_strtod_l+0x56c>
 800e836:	4b13      	ldr	r3, [pc, #76]	; (800e884 <_strtod_l+0x5a4>)
 800e838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e83c:	4650      	mov	r0, sl
 800e83e:	4659      	mov	r1, fp
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f7f2 f83a 	bl	80008bc <__aeabi_ddiv>
 800e848:	4682      	mov	sl, r0
 800e84a:	468b      	mov	fp, r1
 800e84c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e850:	d0d7      	beq.n	800e802 <_strtod_l+0x522>
 800e852:	f1b8 0f1f 	cmp.w	r8, #31
 800e856:	dd1f      	ble.n	800e898 <_strtod_l+0x5b8>
 800e858:	2500      	movs	r5, #0
 800e85a:	462e      	mov	r6, r5
 800e85c:	9507      	str	r5, [sp, #28]
 800e85e:	9505      	str	r5, [sp, #20]
 800e860:	2322      	movs	r3, #34	; 0x22
 800e862:	f04f 0a00 	mov.w	sl, #0
 800e866:	f04f 0b00 	mov.w	fp, #0
 800e86a:	6023      	str	r3, [r4, #0]
 800e86c:	e786      	b.n	800e77c <_strtod_l+0x49c>
 800e86e:	bf00      	nop
 800e870:	08012145 	.word	0x08012145
 800e874:	08012188 	.word	0x08012188
 800e878:	0801213d 	.word	0x0801213d
 800e87c:	080121cb 	.word	0x080121cb
 800e880:	08012478 	.word	0x08012478
 800e884:	08012358 	.word	0x08012358
 800e888:	08012330 	.word	0x08012330
 800e88c:	7ff00000 	.word	0x7ff00000
 800e890:	7ca00000 	.word	0x7ca00000
 800e894:	7fefffff 	.word	0x7fefffff
 800e898:	f018 0310 	ands.w	r3, r8, #16
 800e89c:	bf18      	it	ne
 800e89e:	236a      	movne	r3, #106	; 0x6a
 800e8a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ec50 <_strtod_l+0x970>
 800e8a4:	9304      	str	r3, [sp, #16]
 800e8a6:	4650      	mov	r0, sl
 800e8a8:	4659      	mov	r1, fp
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	f018 0f01 	tst.w	r8, #1
 800e8b0:	d004      	beq.n	800e8bc <_strtod_l+0x5dc>
 800e8b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e8b6:	f7f1 fed7 	bl	8000668 <__aeabi_dmul>
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e8c0:	f109 0908 	add.w	r9, r9, #8
 800e8c4:	d1f2      	bne.n	800e8ac <_strtod_l+0x5cc>
 800e8c6:	b10b      	cbz	r3, 800e8cc <_strtod_l+0x5ec>
 800e8c8:	4682      	mov	sl, r0
 800e8ca:	468b      	mov	fp, r1
 800e8cc:	9b04      	ldr	r3, [sp, #16]
 800e8ce:	b1c3      	cbz	r3, 800e902 <_strtod_l+0x622>
 800e8d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e8d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	4659      	mov	r1, fp
 800e8dc:	dd11      	ble.n	800e902 <_strtod_l+0x622>
 800e8de:	2b1f      	cmp	r3, #31
 800e8e0:	f340 8124 	ble.w	800eb2c <_strtod_l+0x84c>
 800e8e4:	2b34      	cmp	r3, #52	; 0x34
 800e8e6:	bfde      	ittt	le
 800e8e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e8ec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800e8f0:	fa03 f202 	lslle.w	r2, r3, r2
 800e8f4:	f04f 0a00 	mov.w	sl, #0
 800e8f8:	bfcc      	ite	gt
 800e8fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e8fe:	ea02 0b01 	andle.w	fp, r2, r1
 800e902:	2200      	movs	r2, #0
 800e904:	2300      	movs	r3, #0
 800e906:	4650      	mov	r0, sl
 800e908:	4659      	mov	r1, fp
 800e90a:	f7f2 f915 	bl	8000b38 <__aeabi_dcmpeq>
 800e90e:	2800      	cmp	r0, #0
 800e910:	d1a2      	bne.n	800e858 <_strtod_l+0x578>
 800e912:	9b07      	ldr	r3, [sp, #28]
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	9908      	ldr	r1, [sp, #32]
 800e918:	462b      	mov	r3, r5
 800e91a:	463a      	mov	r2, r7
 800e91c:	4620      	mov	r0, r4
 800e91e:	f001 fe2d 	bl	801057c <__s2b>
 800e922:	9007      	str	r0, [sp, #28]
 800e924:	2800      	cmp	r0, #0
 800e926:	f43f af1f 	beq.w	800e768 <_strtod_l+0x488>
 800e92a:	9b05      	ldr	r3, [sp, #20]
 800e92c:	1b9e      	subs	r6, r3, r6
 800e92e:	9b06      	ldr	r3, [sp, #24]
 800e930:	2b00      	cmp	r3, #0
 800e932:	bfb4      	ite	lt
 800e934:	4633      	movlt	r3, r6
 800e936:	2300      	movge	r3, #0
 800e938:	930c      	str	r3, [sp, #48]	; 0x30
 800e93a:	9b06      	ldr	r3, [sp, #24]
 800e93c:	2500      	movs	r5, #0
 800e93e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e942:	9312      	str	r3, [sp, #72]	; 0x48
 800e944:	462e      	mov	r6, r5
 800e946:	9b07      	ldr	r3, [sp, #28]
 800e948:	4620      	mov	r0, r4
 800e94a:	6859      	ldr	r1, [r3, #4]
 800e94c:	f001 fd6e 	bl	801042c <_Balloc>
 800e950:	9005      	str	r0, [sp, #20]
 800e952:	2800      	cmp	r0, #0
 800e954:	f43f af0c 	beq.w	800e770 <_strtod_l+0x490>
 800e958:	9b07      	ldr	r3, [sp, #28]
 800e95a:	691a      	ldr	r2, [r3, #16]
 800e95c:	3202      	adds	r2, #2
 800e95e:	f103 010c 	add.w	r1, r3, #12
 800e962:	0092      	lsls	r2, r2, #2
 800e964:	300c      	adds	r0, #12
 800e966:	f001 fd53 	bl	8010410 <memcpy>
 800e96a:	ec4b ab10 	vmov	d0, sl, fp
 800e96e:	aa1a      	add	r2, sp, #104	; 0x68
 800e970:	a919      	add	r1, sp, #100	; 0x64
 800e972:	4620      	mov	r0, r4
 800e974:	f002 f948 	bl	8010c08 <__d2b>
 800e978:	ec4b ab18 	vmov	d8, sl, fp
 800e97c:	9018      	str	r0, [sp, #96]	; 0x60
 800e97e:	2800      	cmp	r0, #0
 800e980:	f43f aef6 	beq.w	800e770 <_strtod_l+0x490>
 800e984:	2101      	movs	r1, #1
 800e986:	4620      	mov	r0, r4
 800e988:	f001 fe92 	bl	80106b0 <__i2b>
 800e98c:	4606      	mov	r6, r0
 800e98e:	2800      	cmp	r0, #0
 800e990:	f43f aeee 	beq.w	800e770 <_strtod_l+0x490>
 800e994:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e996:	9904      	ldr	r1, [sp, #16]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	bfab      	itete	ge
 800e99c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e99e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e9a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e9a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e9a6:	bfac      	ite	ge
 800e9a8:	eb03 0902 	addge.w	r9, r3, r2
 800e9ac:	1ad7      	sublt	r7, r2, r3
 800e9ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e9b0:	eba3 0801 	sub.w	r8, r3, r1
 800e9b4:	4490      	add	r8, r2
 800e9b6:	4ba1      	ldr	r3, [pc, #644]	; (800ec3c <_strtod_l+0x95c>)
 800e9b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e9bc:	4598      	cmp	r8, r3
 800e9be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e9c2:	f280 80c7 	bge.w	800eb54 <_strtod_l+0x874>
 800e9c6:	eba3 0308 	sub.w	r3, r3, r8
 800e9ca:	2b1f      	cmp	r3, #31
 800e9cc:	eba2 0203 	sub.w	r2, r2, r3
 800e9d0:	f04f 0101 	mov.w	r1, #1
 800e9d4:	f300 80b1 	bgt.w	800eb3a <_strtod_l+0x85a>
 800e9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800e9dc:	930d      	str	r3, [sp, #52]	; 0x34
 800e9de:	2300      	movs	r3, #0
 800e9e0:	9308      	str	r3, [sp, #32]
 800e9e2:	eb09 0802 	add.w	r8, r9, r2
 800e9e6:	9b04      	ldr	r3, [sp, #16]
 800e9e8:	45c1      	cmp	r9, r8
 800e9ea:	4417      	add	r7, r2
 800e9ec:	441f      	add	r7, r3
 800e9ee:	464b      	mov	r3, r9
 800e9f0:	bfa8      	it	ge
 800e9f2:	4643      	movge	r3, r8
 800e9f4:	42bb      	cmp	r3, r7
 800e9f6:	bfa8      	it	ge
 800e9f8:	463b      	movge	r3, r7
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	bfc2      	ittt	gt
 800e9fe:	eba8 0803 	subgt.w	r8, r8, r3
 800ea02:	1aff      	subgt	r7, r7, r3
 800ea04:	eba9 0903 	subgt.w	r9, r9, r3
 800ea08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	dd17      	ble.n	800ea3e <_strtod_l+0x75e>
 800ea0e:	4631      	mov	r1, r6
 800ea10:	461a      	mov	r2, r3
 800ea12:	4620      	mov	r0, r4
 800ea14:	f001 ff0c 	bl	8010830 <__pow5mult>
 800ea18:	4606      	mov	r6, r0
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	f43f aea8 	beq.w	800e770 <_strtod_l+0x490>
 800ea20:	4601      	mov	r1, r0
 800ea22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ea24:	4620      	mov	r0, r4
 800ea26:	f001 fe59 	bl	80106dc <__multiply>
 800ea2a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	f43f ae9f 	beq.w	800e770 <_strtod_l+0x490>
 800ea32:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ea34:	4620      	mov	r0, r4
 800ea36:	f001 fd39 	bl	80104ac <_Bfree>
 800ea3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea3c:	9318      	str	r3, [sp, #96]	; 0x60
 800ea3e:	f1b8 0f00 	cmp.w	r8, #0
 800ea42:	f300 808c 	bgt.w	800eb5e <_strtod_l+0x87e>
 800ea46:	9b06      	ldr	r3, [sp, #24]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	dd08      	ble.n	800ea5e <_strtod_l+0x77e>
 800ea4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea4e:	9905      	ldr	r1, [sp, #20]
 800ea50:	4620      	mov	r0, r4
 800ea52:	f001 feed 	bl	8010830 <__pow5mult>
 800ea56:	9005      	str	r0, [sp, #20]
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	f43f ae89 	beq.w	800e770 <_strtod_l+0x490>
 800ea5e:	2f00      	cmp	r7, #0
 800ea60:	dd08      	ble.n	800ea74 <_strtod_l+0x794>
 800ea62:	9905      	ldr	r1, [sp, #20]
 800ea64:	463a      	mov	r2, r7
 800ea66:	4620      	mov	r0, r4
 800ea68:	f001 ff3c 	bl	80108e4 <__lshift>
 800ea6c:	9005      	str	r0, [sp, #20]
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	f43f ae7e 	beq.w	800e770 <_strtod_l+0x490>
 800ea74:	f1b9 0f00 	cmp.w	r9, #0
 800ea78:	dd08      	ble.n	800ea8c <_strtod_l+0x7ac>
 800ea7a:	4631      	mov	r1, r6
 800ea7c:	464a      	mov	r2, r9
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f001 ff30 	bl	80108e4 <__lshift>
 800ea84:	4606      	mov	r6, r0
 800ea86:	2800      	cmp	r0, #0
 800ea88:	f43f ae72 	beq.w	800e770 <_strtod_l+0x490>
 800ea8c:	9a05      	ldr	r2, [sp, #20]
 800ea8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ea90:	4620      	mov	r0, r4
 800ea92:	f001 ffb3 	bl	80109fc <__mdiff>
 800ea96:	4605      	mov	r5, r0
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	f43f ae69 	beq.w	800e770 <_strtod_l+0x490>
 800ea9e:	68c3      	ldr	r3, [r0, #12]
 800eaa0:	930b      	str	r3, [sp, #44]	; 0x2c
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	60c3      	str	r3, [r0, #12]
 800eaa6:	4631      	mov	r1, r6
 800eaa8:	f001 ff8c 	bl	80109c4 <__mcmp>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	da60      	bge.n	800eb72 <_strtod_l+0x892>
 800eab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eab2:	ea53 030a 	orrs.w	r3, r3, sl
 800eab6:	f040 8082 	bne.w	800ebbe <_strtod_l+0x8de>
 800eaba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d17d      	bne.n	800ebbe <_strtod_l+0x8de>
 800eac2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eac6:	0d1b      	lsrs	r3, r3, #20
 800eac8:	051b      	lsls	r3, r3, #20
 800eaca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eace:	d976      	bls.n	800ebbe <_strtod_l+0x8de>
 800ead0:	696b      	ldr	r3, [r5, #20]
 800ead2:	b913      	cbnz	r3, 800eada <_strtod_l+0x7fa>
 800ead4:	692b      	ldr	r3, [r5, #16]
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	dd71      	ble.n	800ebbe <_strtod_l+0x8de>
 800eada:	4629      	mov	r1, r5
 800eadc:	2201      	movs	r2, #1
 800eade:	4620      	mov	r0, r4
 800eae0:	f001 ff00 	bl	80108e4 <__lshift>
 800eae4:	4631      	mov	r1, r6
 800eae6:	4605      	mov	r5, r0
 800eae8:	f001 ff6c 	bl	80109c4 <__mcmp>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	dd66      	ble.n	800ebbe <_strtod_l+0x8de>
 800eaf0:	9904      	ldr	r1, [sp, #16]
 800eaf2:	4a53      	ldr	r2, [pc, #332]	; (800ec40 <_strtod_l+0x960>)
 800eaf4:	465b      	mov	r3, fp
 800eaf6:	2900      	cmp	r1, #0
 800eaf8:	f000 8081 	beq.w	800ebfe <_strtod_l+0x91e>
 800eafc:	ea02 010b 	and.w	r1, r2, fp
 800eb00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eb04:	dc7b      	bgt.n	800ebfe <_strtod_l+0x91e>
 800eb06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eb0a:	f77f aea9 	ble.w	800e860 <_strtod_l+0x580>
 800eb0e:	4b4d      	ldr	r3, [pc, #308]	; (800ec44 <_strtod_l+0x964>)
 800eb10:	4650      	mov	r0, sl
 800eb12:	4659      	mov	r1, fp
 800eb14:	2200      	movs	r2, #0
 800eb16:	f7f1 fda7 	bl	8000668 <__aeabi_dmul>
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	4303      	orrs	r3, r0
 800eb1e:	bf08      	it	eq
 800eb20:	2322      	moveq	r3, #34	; 0x22
 800eb22:	4682      	mov	sl, r0
 800eb24:	468b      	mov	fp, r1
 800eb26:	bf08      	it	eq
 800eb28:	6023      	streq	r3, [r4, #0]
 800eb2a:	e62b      	b.n	800e784 <_strtod_l+0x4a4>
 800eb2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb30:	fa02 f303 	lsl.w	r3, r2, r3
 800eb34:	ea03 0a0a 	and.w	sl, r3, sl
 800eb38:	e6e3      	b.n	800e902 <_strtod_l+0x622>
 800eb3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800eb3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800eb42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800eb46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800eb4a:	fa01 f308 	lsl.w	r3, r1, r8
 800eb4e:	9308      	str	r3, [sp, #32]
 800eb50:	910d      	str	r1, [sp, #52]	; 0x34
 800eb52:	e746      	b.n	800e9e2 <_strtod_l+0x702>
 800eb54:	2300      	movs	r3, #0
 800eb56:	9308      	str	r3, [sp, #32]
 800eb58:	2301      	movs	r3, #1
 800eb5a:	930d      	str	r3, [sp, #52]	; 0x34
 800eb5c:	e741      	b.n	800e9e2 <_strtod_l+0x702>
 800eb5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eb60:	4642      	mov	r2, r8
 800eb62:	4620      	mov	r0, r4
 800eb64:	f001 febe 	bl	80108e4 <__lshift>
 800eb68:	9018      	str	r0, [sp, #96]	; 0x60
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	f47f af6b 	bne.w	800ea46 <_strtod_l+0x766>
 800eb70:	e5fe      	b.n	800e770 <_strtod_l+0x490>
 800eb72:	465f      	mov	r7, fp
 800eb74:	d16e      	bne.n	800ec54 <_strtod_l+0x974>
 800eb76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb7c:	b342      	cbz	r2, 800ebd0 <_strtod_l+0x8f0>
 800eb7e:	4a32      	ldr	r2, [pc, #200]	; (800ec48 <_strtod_l+0x968>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d128      	bne.n	800ebd6 <_strtod_l+0x8f6>
 800eb84:	9b04      	ldr	r3, [sp, #16]
 800eb86:	4651      	mov	r1, sl
 800eb88:	b1eb      	cbz	r3, 800ebc6 <_strtod_l+0x8e6>
 800eb8a:	4b2d      	ldr	r3, [pc, #180]	; (800ec40 <_strtod_l+0x960>)
 800eb8c:	403b      	ands	r3, r7
 800eb8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb96:	d819      	bhi.n	800ebcc <_strtod_l+0x8ec>
 800eb98:	0d1b      	lsrs	r3, r3, #20
 800eb9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb9e:	fa02 f303 	lsl.w	r3, r2, r3
 800eba2:	4299      	cmp	r1, r3
 800eba4:	d117      	bne.n	800ebd6 <_strtod_l+0x8f6>
 800eba6:	4b29      	ldr	r3, [pc, #164]	; (800ec4c <_strtod_l+0x96c>)
 800eba8:	429f      	cmp	r7, r3
 800ebaa:	d102      	bne.n	800ebb2 <_strtod_l+0x8d2>
 800ebac:	3101      	adds	r1, #1
 800ebae:	f43f addf 	beq.w	800e770 <_strtod_l+0x490>
 800ebb2:	4b23      	ldr	r3, [pc, #140]	; (800ec40 <_strtod_l+0x960>)
 800ebb4:	403b      	ands	r3, r7
 800ebb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ebba:	f04f 0a00 	mov.w	sl, #0
 800ebbe:	9b04      	ldr	r3, [sp, #16]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d1a4      	bne.n	800eb0e <_strtod_l+0x82e>
 800ebc4:	e5de      	b.n	800e784 <_strtod_l+0x4a4>
 800ebc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebca:	e7ea      	b.n	800eba2 <_strtod_l+0x8c2>
 800ebcc:	4613      	mov	r3, r2
 800ebce:	e7e8      	b.n	800eba2 <_strtod_l+0x8c2>
 800ebd0:	ea53 030a 	orrs.w	r3, r3, sl
 800ebd4:	d08c      	beq.n	800eaf0 <_strtod_l+0x810>
 800ebd6:	9b08      	ldr	r3, [sp, #32]
 800ebd8:	b1db      	cbz	r3, 800ec12 <_strtod_l+0x932>
 800ebda:	423b      	tst	r3, r7
 800ebdc:	d0ef      	beq.n	800ebbe <_strtod_l+0x8de>
 800ebde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebe0:	9a04      	ldr	r2, [sp, #16]
 800ebe2:	4650      	mov	r0, sl
 800ebe4:	4659      	mov	r1, fp
 800ebe6:	b1c3      	cbz	r3, 800ec1a <_strtod_l+0x93a>
 800ebe8:	f7ff fb5b 	bl	800e2a2 <sulp>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	ec51 0b18 	vmov	r0, r1, d8
 800ebf4:	f7f1 fb82 	bl	80002fc <__adddf3>
 800ebf8:	4682      	mov	sl, r0
 800ebfa:	468b      	mov	fp, r1
 800ebfc:	e7df      	b.n	800ebbe <_strtod_l+0x8de>
 800ebfe:	4013      	ands	r3, r2
 800ec00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ec04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ec08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ec0c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ec10:	e7d5      	b.n	800ebbe <_strtod_l+0x8de>
 800ec12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec14:	ea13 0f0a 	tst.w	r3, sl
 800ec18:	e7e0      	b.n	800ebdc <_strtod_l+0x8fc>
 800ec1a:	f7ff fb42 	bl	800e2a2 <sulp>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	ec51 0b18 	vmov	r0, r1, d8
 800ec26:	f7f1 fb67 	bl	80002f8 <__aeabi_dsub>
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	4682      	mov	sl, r0
 800ec30:	468b      	mov	fp, r1
 800ec32:	f7f1 ff81 	bl	8000b38 <__aeabi_dcmpeq>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d0c1      	beq.n	800ebbe <_strtod_l+0x8de>
 800ec3a:	e611      	b.n	800e860 <_strtod_l+0x580>
 800ec3c:	fffffc02 	.word	0xfffffc02
 800ec40:	7ff00000 	.word	0x7ff00000
 800ec44:	39500000 	.word	0x39500000
 800ec48:	000fffff 	.word	0x000fffff
 800ec4c:	7fefffff 	.word	0x7fefffff
 800ec50:	080121a0 	.word	0x080121a0
 800ec54:	4631      	mov	r1, r6
 800ec56:	4628      	mov	r0, r5
 800ec58:	f002 f832 	bl	8010cc0 <__ratio>
 800ec5c:	ec59 8b10 	vmov	r8, r9, d0
 800ec60:	ee10 0a10 	vmov	r0, s0
 800ec64:	2200      	movs	r2, #0
 800ec66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec6a:	4649      	mov	r1, r9
 800ec6c:	f7f1 ff78 	bl	8000b60 <__aeabi_dcmple>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d07a      	beq.n	800ed6a <_strtod_l+0xa8a>
 800ec74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d04a      	beq.n	800ed10 <_strtod_l+0xa30>
 800ec7a:	4b95      	ldr	r3, [pc, #596]	; (800eed0 <_strtod_l+0xbf0>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ec82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800eed0 <_strtod_l+0xbf0>
 800ec86:	f04f 0800 	mov.w	r8, #0
 800ec8a:	4b92      	ldr	r3, [pc, #584]	; (800eed4 <_strtod_l+0xbf4>)
 800ec8c:	403b      	ands	r3, r7
 800ec8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ec90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec92:	4b91      	ldr	r3, [pc, #580]	; (800eed8 <_strtod_l+0xbf8>)
 800ec94:	429a      	cmp	r2, r3
 800ec96:	f040 80b0 	bne.w	800edfa <_strtod_l+0xb1a>
 800ec9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ec9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800eca2:	ec4b ab10 	vmov	d0, sl, fp
 800eca6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ecaa:	f001 ff31 	bl	8010b10 <__ulp>
 800ecae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ecb2:	ec53 2b10 	vmov	r2, r3, d0
 800ecb6:	f7f1 fcd7 	bl	8000668 <__aeabi_dmul>
 800ecba:	4652      	mov	r2, sl
 800ecbc:	465b      	mov	r3, fp
 800ecbe:	f7f1 fb1d 	bl	80002fc <__adddf3>
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	4983      	ldr	r1, [pc, #524]	; (800eed4 <_strtod_l+0xbf4>)
 800ecc6:	4a85      	ldr	r2, [pc, #532]	; (800eedc <_strtod_l+0xbfc>)
 800ecc8:	4019      	ands	r1, r3
 800ecca:	4291      	cmp	r1, r2
 800eccc:	4682      	mov	sl, r0
 800ecce:	d960      	bls.n	800ed92 <_strtod_l+0xab2>
 800ecd0:	ee18 3a90 	vmov	r3, s17
 800ecd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d104      	bne.n	800ece6 <_strtod_l+0xa06>
 800ecdc:	ee18 3a10 	vmov	r3, s16
 800ece0:	3301      	adds	r3, #1
 800ece2:	f43f ad45 	beq.w	800e770 <_strtod_l+0x490>
 800ece6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800eee8 <_strtod_l+0xc08>
 800ecea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ecee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f001 fbdb 	bl	80104ac <_Bfree>
 800ecf6:	9905      	ldr	r1, [sp, #20]
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f001 fbd7 	bl	80104ac <_Bfree>
 800ecfe:	4631      	mov	r1, r6
 800ed00:	4620      	mov	r0, r4
 800ed02:	f001 fbd3 	bl	80104ac <_Bfree>
 800ed06:	4629      	mov	r1, r5
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f001 fbcf 	bl	80104ac <_Bfree>
 800ed0e:	e61a      	b.n	800e946 <_strtod_l+0x666>
 800ed10:	f1ba 0f00 	cmp.w	sl, #0
 800ed14:	d11b      	bne.n	800ed4e <_strtod_l+0xa6e>
 800ed16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed1a:	b9f3      	cbnz	r3, 800ed5a <_strtod_l+0xa7a>
 800ed1c:	4b6c      	ldr	r3, [pc, #432]	; (800eed0 <_strtod_l+0xbf0>)
 800ed1e:	2200      	movs	r2, #0
 800ed20:	4640      	mov	r0, r8
 800ed22:	4649      	mov	r1, r9
 800ed24:	f7f1 ff12 	bl	8000b4c <__aeabi_dcmplt>
 800ed28:	b9d0      	cbnz	r0, 800ed60 <_strtod_l+0xa80>
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	4b6c      	ldr	r3, [pc, #432]	; (800eee0 <_strtod_l+0xc00>)
 800ed30:	2200      	movs	r2, #0
 800ed32:	f7f1 fc99 	bl	8000668 <__aeabi_dmul>
 800ed36:	4680      	mov	r8, r0
 800ed38:	4689      	mov	r9, r1
 800ed3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ed3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ed42:	9315      	str	r3, [sp, #84]	; 0x54
 800ed44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ed48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ed4c:	e79d      	b.n	800ec8a <_strtod_l+0x9aa>
 800ed4e:	f1ba 0f01 	cmp.w	sl, #1
 800ed52:	d102      	bne.n	800ed5a <_strtod_l+0xa7a>
 800ed54:	2f00      	cmp	r7, #0
 800ed56:	f43f ad83 	beq.w	800e860 <_strtod_l+0x580>
 800ed5a:	4b62      	ldr	r3, [pc, #392]	; (800eee4 <_strtod_l+0xc04>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	e78e      	b.n	800ec7e <_strtod_l+0x99e>
 800ed60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800eee0 <_strtod_l+0xc00>
 800ed64:	f04f 0800 	mov.w	r8, #0
 800ed68:	e7e7      	b.n	800ed3a <_strtod_l+0xa5a>
 800ed6a:	4b5d      	ldr	r3, [pc, #372]	; (800eee0 <_strtod_l+0xc00>)
 800ed6c:	4640      	mov	r0, r8
 800ed6e:	4649      	mov	r1, r9
 800ed70:	2200      	movs	r2, #0
 800ed72:	f7f1 fc79 	bl	8000668 <__aeabi_dmul>
 800ed76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed78:	4680      	mov	r8, r0
 800ed7a:	4689      	mov	r9, r1
 800ed7c:	b933      	cbnz	r3, 800ed8c <_strtod_l+0xaac>
 800ed7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed82:	900e      	str	r0, [sp, #56]	; 0x38
 800ed84:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ed8a:	e7dd      	b.n	800ed48 <_strtod_l+0xa68>
 800ed8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ed90:	e7f9      	b.n	800ed86 <_strtod_l+0xaa6>
 800ed92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ed96:	9b04      	ldr	r3, [sp, #16]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1a8      	bne.n	800ecee <_strtod_l+0xa0e>
 800ed9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eda0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eda2:	0d1b      	lsrs	r3, r3, #20
 800eda4:	051b      	lsls	r3, r3, #20
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d1a1      	bne.n	800ecee <_strtod_l+0xa0e>
 800edaa:	4640      	mov	r0, r8
 800edac:	4649      	mov	r1, r9
 800edae:	f7f1 ffbb 	bl	8000d28 <__aeabi_d2lz>
 800edb2:	f7f1 fc2b 	bl	800060c <__aeabi_l2d>
 800edb6:	4602      	mov	r2, r0
 800edb8:	460b      	mov	r3, r1
 800edba:	4640      	mov	r0, r8
 800edbc:	4649      	mov	r1, r9
 800edbe:	f7f1 fa9b 	bl	80002f8 <__aeabi_dsub>
 800edc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edc8:	ea43 030a 	orr.w	r3, r3, sl
 800edcc:	4313      	orrs	r3, r2
 800edce:	4680      	mov	r8, r0
 800edd0:	4689      	mov	r9, r1
 800edd2:	d055      	beq.n	800ee80 <_strtod_l+0xba0>
 800edd4:	a336      	add	r3, pc, #216	; (adr r3, 800eeb0 <_strtod_l+0xbd0>)
 800edd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edda:	f7f1 feb7 	bl	8000b4c <__aeabi_dcmplt>
 800edde:	2800      	cmp	r0, #0
 800ede0:	f47f acd0 	bne.w	800e784 <_strtod_l+0x4a4>
 800ede4:	a334      	add	r3, pc, #208	; (adr r3, 800eeb8 <_strtod_l+0xbd8>)
 800ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edea:	4640      	mov	r0, r8
 800edec:	4649      	mov	r1, r9
 800edee:	f7f1 fecb 	bl	8000b88 <__aeabi_dcmpgt>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	f43f af7b 	beq.w	800ecee <_strtod_l+0xa0e>
 800edf8:	e4c4      	b.n	800e784 <_strtod_l+0x4a4>
 800edfa:	9b04      	ldr	r3, [sp, #16]
 800edfc:	b333      	cbz	r3, 800ee4c <_strtod_l+0xb6c>
 800edfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ee04:	d822      	bhi.n	800ee4c <_strtod_l+0xb6c>
 800ee06:	a32e      	add	r3, pc, #184	; (adr r3, 800eec0 <_strtod_l+0xbe0>)
 800ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0c:	4640      	mov	r0, r8
 800ee0e:	4649      	mov	r1, r9
 800ee10:	f7f1 fea6 	bl	8000b60 <__aeabi_dcmple>
 800ee14:	b1a0      	cbz	r0, 800ee40 <_strtod_l+0xb60>
 800ee16:	4649      	mov	r1, r9
 800ee18:	4640      	mov	r0, r8
 800ee1a:	f7f1 fefd 	bl	8000c18 <__aeabi_d2uiz>
 800ee1e:	2801      	cmp	r0, #1
 800ee20:	bf38      	it	cc
 800ee22:	2001      	movcc	r0, #1
 800ee24:	f7f1 fba6 	bl	8000574 <__aeabi_ui2d>
 800ee28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee2a:	4680      	mov	r8, r0
 800ee2c:	4689      	mov	r9, r1
 800ee2e:	bb23      	cbnz	r3, 800ee7a <_strtod_l+0xb9a>
 800ee30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee34:	9010      	str	r0, [sp, #64]	; 0x40
 800ee36:	9311      	str	r3, [sp, #68]	; 0x44
 800ee38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ee3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ee40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ee48:	1a9b      	subs	r3, r3, r2
 800ee4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee50:	eeb0 0a48 	vmov.f32	s0, s16
 800ee54:	eef0 0a68 	vmov.f32	s1, s17
 800ee58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee5c:	f001 fe58 	bl	8010b10 <__ulp>
 800ee60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee64:	ec53 2b10 	vmov	r2, r3, d0
 800ee68:	f7f1 fbfe 	bl	8000668 <__aeabi_dmul>
 800ee6c:	ec53 2b18 	vmov	r2, r3, d8
 800ee70:	f7f1 fa44 	bl	80002fc <__adddf3>
 800ee74:	4682      	mov	sl, r0
 800ee76:	468b      	mov	fp, r1
 800ee78:	e78d      	b.n	800ed96 <_strtod_l+0xab6>
 800ee7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ee7e:	e7db      	b.n	800ee38 <_strtod_l+0xb58>
 800ee80:	a311      	add	r3, pc, #68	; (adr r3, 800eec8 <_strtod_l+0xbe8>)
 800ee82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee86:	f7f1 fe61 	bl	8000b4c <__aeabi_dcmplt>
 800ee8a:	e7b2      	b.n	800edf2 <_strtod_l+0xb12>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee94:	6013      	str	r3, [r2, #0]
 800ee96:	f7ff ba6b 	b.w	800e370 <_strtod_l+0x90>
 800ee9a:	2a65      	cmp	r2, #101	; 0x65
 800ee9c:	f43f ab5f 	beq.w	800e55e <_strtod_l+0x27e>
 800eea0:	2a45      	cmp	r2, #69	; 0x45
 800eea2:	f43f ab5c 	beq.w	800e55e <_strtod_l+0x27e>
 800eea6:	2301      	movs	r3, #1
 800eea8:	f7ff bb94 	b.w	800e5d4 <_strtod_l+0x2f4>
 800eeac:	f3af 8000 	nop.w
 800eeb0:	94a03595 	.word	0x94a03595
 800eeb4:	3fdfffff 	.word	0x3fdfffff
 800eeb8:	35afe535 	.word	0x35afe535
 800eebc:	3fe00000 	.word	0x3fe00000
 800eec0:	ffc00000 	.word	0xffc00000
 800eec4:	41dfffff 	.word	0x41dfffff
 800eec8:	94a03595 	.word	0x94a03595
 800eecc:	3fcfffff 	.word	0x3fcfffff
 800eed0:	3ff00000 	.word	0x3ff00000
 800eed4:	7ff00000 	.word	0x7ff00000
 800eed8:	7fe00000 	.word	0x7fe00000
 800eedc:	7c9fffff 	.word	0x7c9fffff
 800eee0:	3fe00000 	.word	0x3fe00000
 800eee4:	bff00000 	.word	0xbff00000
 800eee8:	7fefffff 	.word	0x7fefffff

0800eeec <_strtod_r>:
 800eeec:	4b01      	ldr	r3, [pc, #4]	; (800eef4 <_strtod_r+0x8>)
 800eeee:	f7ff b9f7 	b.w	800e2e0 <_strtod_l>
 800eef2:	bf00      	nop
 800eef4:	20000078 	.word	0x20000078

0800eef8 <_strtol_l.constprop.0>:
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eefe:	d001      	beq.n	800ef04 <_strtol_l.constprop.0+0xc>
 800ef00:	2b24      	cmp	r3, #36	; 0x24
 800ef02:	d906      	bls.n	800ef12 <_strtol_l.constprop.0+0x1a>
 800ef04:	f7fe fae8 	bl	800d4d8 <__errno>
 800ef08:	2316      	movs	r3, #22
 800ef0a:	6003      	str	r3, [r0, #0]
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eff8 <_strtol_l.constprop.0+0x100>
 800ef16:	460d      	mov	r5, r1
 800ef18:	462e      	mov	r6, r5
 800ef1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ef22:	f017 0708 	ands.w	r7, r7, #8
 800ef26:	d1f7      	bne.n	800ef18 <_strtol_l.constprop.0+0x20>
 800ef28:	2c2d      	cmp	r4, #45	; 0x2d
 800ef2a:	d132      	bne.n	800ef92 <_strtol_l.constprop.0+0x9a>
 800ef2c:	782c      	ldrb	r4, [r5, #0]
 800ef2e:	2701      	movs	r7, #1
 800ef30:	1cb5      	adds	r5, r6, #2
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d05b      	beq.n	800efee <_strtol_l.constprop.0+0xf6>
 800ef36:	2b10      	cmp	r3, #16
 800ef38:	d109      	bne.n	800ef4e <_strtol_l.constprop.0+0x56>
 800ef3a:	2c30      	cmp	r4, #48	; 0x30
 800ef3c:	d107      	bne.n	800ef4e <_strtol_l.constprop.0+0x56>
 800ef3e:	782c      	ldrb	r4, [r5, #0]
 800ef40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ef44:	2c58      	cmp	r4, #88	; 0x58
 800ef46:	d14d      	bne.n	800efe4 <_strtol_l.constprop.0+0xec>
 800ef48:	786c      	ldrb	r4, [r5, #1]
 800ef4a:	2310      	movs	r3, #16
 800ef4c:	3502      	adds	r5, #2
 800ef4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ef52:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ef56:	f04f 0c00 	mov.w	ip, #0
 800ef5a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ef5e:	4666      	mov	r6, ip
 800ef60:	fb03 8a19 	mls	sl, r3, r9, r8
 800ef64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ef68:	f1be 0f09 	cmp.w	lr, #9
 800ef6c:	d816      	bhi.n	800ef9c <_strtol_l.constprop.0+0xa4>
 800ef6e:	4674      	mov	r4, lr
 800ef70:	42a3      	cmp	r3, r4
 800ef72:	dd24      	ble.n	800efbe <_strtol_l.constprop.0+0xc6>
 800ef74:	f1bc 0f00 	cmp.w	ip, #0
 800ef78:	db1e      	blt.n	800efb8 <_strtol_l.constprop.0+0xc0>
 800ef7a:	45b1      	cmp	r9, r6
 800ef7c:	d31c      	bcc.n	800efb8 <_strtol_l.constprop.0+0xc0>
 800ef7e:	d101      	bne.n	800ef84 <_strtol_l.constprop.0+0x8c>
 800ef80:	45a2      	cmp	sl, r4
 800ef82:	db19      	blt.n	800efb8 <_strtol_l.constprop.0+0xc0>
 800ef84:	fb06 4603 	mla	r6, r6, r3, r4
 800ef88:	f04f 0c01 	mov.w	ip, #1
 800ef8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef90:	e7e8      	b.n	800ef64 <_strtol_l.constprop.0+0x6c>
 800ef92:	2c2b      	cmp	r4, #43	; 0x2b
 800ef94:	bf04      	itt	eq
 800ef96:	782c      	ldrbeq	r4, [r5, #0]
 800ef98:	1cb5      	addeq	r5, r6, #2
 800ef9a:	e7ca      	b.n	800ef32 <_strtol_l.constprop.0+0x3a>
 800ef9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800efa0:	f1be 0f19 	cmp.w	lr, #25
 800efa4:	d801      	bhi.n	800efaa <_strtol_l.constprop.0+0xb2>
 800efa6:	3c37      	subs	r4, #55	; 0x37
 800efa8:	e7e2      	b.n	800ef70 <_strtol_l.constprop.0+0x78>
 800efaa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800efae:	f1be 0f19 	cmp.w	lr, #25
 800efb2:	d804      	bhi.n	800efbe <_strtol_l.constprop.0+0xc6>
 800efb4:	3c57      	subs	r4, #87	; 0x57
 800efb6:	e7db      	b.n	800ef70 <_strtol_l.constprop.0+0x78>
 800efb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800efbc:	e7e6      	b.n	800ef8c <_strtol_l.constprop.0+0x94>
 800efbe:	f1bc 0f00 	cmp.w	ip, #0
 800efc2:	da05      	bge.n	800efd0 <_strtol_l.constprop.0+0xd8>
 800efc4:	2322      	movs	r3, #34	; 0x22
 800efc6:	6003      	str	r3, [r0, #0]
 800efc8:	4646      	mov	r6, r8
 800efca:	b942      	cbnz	r2, 800efde <_strtol_l.constprop.0+0xe6>
 800efcc:	4630      	mov	r0, r6
 800efce:	e79e      	b.n	800ef0e <_strtol_l.constprop.0+0x16>
 800efd0:	b107      	cbz	r7, 800efd4 <_strtol_l.constprop.0+0xdc>
 800efd2:	4276      	negs	r6, r6
 800efd4:	2a00      	cmp	r2, #0
 800efd6:	d0f9      	beq.n	800efcc <_strtol_l.constprop.0+0xd4>
 800efd8:	f1bc 0f00 	cmp.w	ip, #0
 800efdc:	d000      	beq.n	800efe0 <_strtol_l.constprop.0+0xe8>
 800efde:	1e69      	subs	r1, r5, #1
 800efe0:	6011      	str	r1, [r2, #0]
 800efe2:	e7f3      	b.n	800efcc <_strtol_l.constprop.0+0xd4>
 800efe4:	2430      	movs	r4, #48	; 0x30
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1b1      	bne.n	800ef4e <_strtol_l.constprop.0+0x56>
 800efea:	2308      	movs	r3, #8
 800efec:	e7af      	b.n	800ef4e <_strtol_l.constprop.0+0x56>
 800efee:	2c30      	cmp	r4, #48	; 0x30
 800eff0:	d0a5      	beq.n	800ef3e <_strtol_l.constprop.0+0x46>
 800eff2:	230a      	movs	r3, #10
 800eff4:	e7ab      	b.n	800ef4e <_strtol_l.constprop.0+0x56>
 800eff6:	bf00      	nop
 800eff8:	08012031 	.word	0x08012031

0800effc <_strtol_r>:
 800effc:	f7ff bf7c 	b.w	800eef8 <_strtol_l.constprop.0>

0800f000 <quorem>:
 800f000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f004:	6903      	ldr	r3, [r0, #16]
 800f006:	690c      	ldr	r4, [r1, #16]
 800f008:	42a3      	cmp	r3, r4
 800f00a:	4607      	mov	r7, r0
 800f00c:	f2c0 8081 	blt.w	800f112 <quorem+0x112>
 800f010:	3c01      	subs	r4, #1
 800f012:	f101 0814 	add.w	r8, r1, #20
 800f016:	f100 0514 	add.w	r5, r0, #20
 800f01a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f01e:	9301      	str	r3, [sp, #4]
 800f020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f028:	3301      	adds	r3, #1
 800f02a:	429a      	cmp	r2, r3
 800f02c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f034:	fbb2 f6f3 	udiv	r6, r2, r3
 800f038:	d331      	bcc.n	800f09e <quorem+0x9e>
 800f03a:	f04f 0e00 	mov.w	lr, #0
 800f03e:	4640      	mov	r0, r8
 800f040:	46ac      	mov	ip, r5
 800f042:	46f2      	mov	sl, lr
 800f044:	f850 2b04 	ldr.w	r2, [r0], #4
 800f048:	b293      	uxth	r3, r2
 800f04a:	fb06 e303 	mla	r3, r6, r3, lr
 800f04e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f052:	b29b      	uxth	r3, r3
 800f054:	ebaa 0303 	sub.w	r3, sl, r3
 800f058:	f8dc a000 	ldr.w	sl, [ip]
 800f05c:	0c12      	lsrs	r2, r2, #16
 800f05e:	fa13 f38a 	uxtah	r3, r3, sl
 800f062:	fb06 e202 	mla	r2, r6, r2, lr
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	9b00      	ldr	r3, [sp, #0]
 800f06a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f06e:	b292      	uxth	r2, r2
 800f070:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f078:	f8bd 3000 	ldrh.w	r3, [sp]
 800f07c:	4581      	cmp	r9, r0
 800f07e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f082:	f84c 3b04 	str.w	r3, [ip], #4
 800f086:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f08a:	d2db      	bcs.n	800f044 <quorem+0x44>
 800f08c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f090:	b92b      	cbnz	r3, 800f09e <quorem+0x9e>
 800f092:	9b01      	ldr	r3, [sp, #4]
 800f094:	3b04      	subs	r3, #4
 800f096:	429d      	cmp	r5, r3
 800f098:	461a      	mov	r2, r3
 800f09a:	d32e      	bcc.n	800f0fa <quorem+0xfa>
 800f09c:	613c      	str	r4, [r7, #16]
 800f09e:	4638      	mov	r0, r7
 800f0a0:	f001 fc90 	bl	80109c4 <__mcmp>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	db24      	blt.n	800f0f2 <quorem+0xf2>
 800f0a8:	3601      	adds	r6, #1
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	f04f 0c00 	mov.w	ip, #0
 800f0b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f0b4:	f8d0 e000 	ldr.w	lr, [r0]
 800f0b8:	b293      	uxth	r3, r2
 800f0ba:	ebac 0303 	sub.w	r3, ip, r3
 800f0be:	0c12      	lsrs	r2, r2, #16
 800f0c0:	fa13 f38e 	uxtah	r3, r3, lr
 800f0c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f0c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0d2:	45c1      	cmp	r9, r8
 800f0d4:	f840 3b04 	str.w	r3, [r0], #4
 800f0d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f0dc:	d2e8      	bcs.n	800f0b0 <quorem+0xb0>
 800f0de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0e6:	b922      	cbnz	r2, 800f0f2 <quorem+0xf2>
 800f0e8:	3b04      	subs	r3, #4
 800f0ea:	429d      	cmp	r5, r3
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	d30a      	bcc.n	800f106 <quorem+0x106>
 800f0f0:	613c      	str	r4, [r7, #16]
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	b003      	add	sp, #12
 800f0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fa:	6812      	ldr	r2, [r2, #0]
 800f0fc:	3b04      	subs	r3, #4
 800f0fe:	2a00      	cmp	r2, #0
 800f100:	d1cc      	bne.n	800f09c <quorem+0x9c>
 800f102:	3c01      	subs	r4, #1
 800f104:	e7c7      	b.n	800f096 <quorem+0x96>
 800f106:	6812      	ldr	r2, [r2, #0]
 800f108:	3b04      	subs	r3, #4
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	d1f0      	bne.n	800f0f0 <quorem+0xf0>
 800f10e:	3c01      	subs	r4, #1
 800f110:	e7eb      	b.n	800f0ea <quorem+0xea>
 800f112:	2000      	movs	r0, #0
 800f114:	e7ee      	b.n	800f0f4 <quorem+0xf4>
	...

0800f118 <_dtoa_r>:
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	ed2d 8b04 	vpush	{d8-d9}
 800f120:	ec57 6b10 	vmov	r6, r7, d0
 800f124:	b093      	sub	sp, #76	; 0x4c
 800f126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f12c:	9106      	str	r1, [sp, #24]
 800f12e:	ee10 aa10 	vmov	sl, s0
 800f132:	4604      	mov	r4, r0
 800f134:	9209      	str	r2, [sp, #36]	; 0x24
 800f136:	930c      	str	r3, [sp, #48]	; 0x30
 800f138:	46bb      	mov	fp, r7
 800f13a:	b975      	cbnz	r5, 800f15a <_dtoa_r+0x42>
 800f13c:	2010      	movs	r0, #16
 800f13e:	f001 f94d 	bl	80103dc <malloc>
 800f142:	4602      	mov	r2, r0
 800f144:	6260      	str	r0, [r4, #36]	; 0x24
 800f146:	b920      	cbnz	r0, 800f152 <_dtoa_r+0x3a>
 800f148:	4ba7      	ldr	r3, [pc, #668]	; (800f3e8 <_dtoa_r+0x2d0>)
 800f14a:	21ea      	movs	r1, #234	; 0xea
 800f14c:	48a7      	ldr	r0, [pc, #668]	; (800f3ec <_dtoa_r+0x2d4>)
 800f14e:	f002 f8bd 	bl	80112cc <__assert_func>
 800f152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f156:	6005      	str	r5, [r0, #0]
 800f158:	60c5      	str	r5, [r0, #12]
 800f15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f15c:	6819      	ldr	r1, [r3, #0]
 800f15e:	b151      	cbz	r1, 800f176 <_dtoa_r+0x5e>
 800f160:	685a      	ldr	r2, [r3, #4]
 800f162:	604a      	str	r2, [r1, #4]
 800f164:	2301      	movs	r3, #1
 800f166:	4093      	lsls	r3, r2
 800f168:	608b      	str	r3, [r1, #8]
 800f16a:	4620      	mov	r0, r4
 800f16c:	f001 f99e 	bl	80104ac <_Bfree>
 800f170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f172:	2200      	movs	r2, #0
 800f174:	601a      	str	r2, [r3, #0]
 800f176:	1e3b      	subs	r3, r7, #0
 800f178:	bfaa      	itet	ge
 800f17a:	2300      	movge	r3, #0
 800f17c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f180:	f8c8 3000 	strge.w	r3, [r8]
 800f184:	4b9a      	ldr	r3, [pc, #616]	; (800f3f0 <_dtoa_r+0x2d8>)
 800f186:	bfbc      	itt	lt
 800f188:	2201      	movlt	r2, #1
 800f18a:	f8c8 2000 	strlt.w	r2, [r8]
 800f18e:	ea33 030b 	bics.w	r3, r3, fp
 800f192:	d11b      	bne.n	800f1cc <_dtoa_r+0xb4>
 800f194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f196:	f242 730f 	movw	r3, #9999	; 0x270f
 800f19a:	6013      	str	r3, [r2, #0]
 800f19c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1a0:	4333      	orrs	r3, r6
 800f1a2:	f000 8592 	beq.w	800fcca <_dtoa_r+0xbb2>
 800f1a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1a8:	b963      	cbnz	r3, 800f1c4 <_dtoa_r+0xac>
 800f1aa:	4b92      	ldr	r3, [pc, #584]	; (800f3f4 <_dtoa_r+0x2dc>)
 800f1ac:	e022      	b.n	800f1f4 <_dtoa_r+0xdc>
 800f1ae:	4b92      	ldr	r3, [pc, #584]	; (800f3f8 <_dtoa_r+0x2e0>)
 800f1b0:	9301      	str	r3, [sp, #4]
 800f1b2:	3308      	adds	r3, #8
 800f1b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1b6:	6013      	str	r3, [r2, #0]
 800f1b8:	9801      	ldr	r0, [sp, #4]
 800f1ba:	b013      	add	sp, #76	; 0x4c
 800f1bc:	ecbd 8b04 	vpop	{d8-d9}
 800f1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c4:	4b8b      	ldr	r3, [pc, #556]	; (800f3f4 <_dtoa_r+0x2dc>)
 800f1c6:	9301      	str	r3, [sp, #4]
 800f1c8:	3303      	adds	r3, #3
 800f1ca:	e7f3      	b.n	800f1b4 <_dtoa_r+0x9c>
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	4650      	mov	r0, sl
 800f1d2:	4659      	mov	r1, fp
 800f1d4:	f7f1 fcb0 	bl	8000b38 <__aeabi_dcmpeq>
 800f1d8:	ec4b ab19 	vmov	d9, sl, fp
 800f1dc:	4680      	mov	r8, r0
 800f1de:	b158      	cbz	r0, 800f1f8 <_dtoa_r+0xe0>
 800f1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	6013      	str	r3, [r2, #0]
 800f1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f000 856b 	beq.w	800fcc4 <_dtoa_r+0xbac>
 800f1ee:	4883      	ldr	r0, [pc, #524]	; (800f3fc <_dtoa_r+0x2e4>)
 800f1f0:	6018      	str	r0, [r3, #0]
 800f1f2:	1e43      	subs	r3, r0, #1
 800f1f4:	9301      	str	r3, [sp, #4]
 800f1f6:	e7df      	b.n	800f1b8 <_dtoa_r+0xa0>
 800f1f8:	ec4b ab10 	vmov	d0, sl, fp
 800f1fc:	aa10      	add	r2, sp, #64	; 0x40
 800f1fe:	a911      	add	r1, sp, #68	; 0x44
 800f200:	4620      	mov	r0, r4
 800f202:	f001 fd01 	bl	8010c08 <__d2b>
 800f206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f20a:	ee08 0a10 	vmov	s16, r0
 800f20e:	2d00      	cmp	r5, #0
 800f210:	f000 8084 	beq.w	800f31c <_dtoa_r+0x204>
 800f214:	ee19 3a90 	vmov	r3, s19
 800f218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f21c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f220:	4656      	mov	r6, sl
 800f222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f22a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f22e:	4b74      	ldr	r3, [pc, #464]	; (800f400 <_dtoa_r+0x2e8>)
 800f230:	2200      	movs	r2, #0
 800f232:	4630      	mov	r0, r6
 800f234:	4639      	mov	r1, r7
 800f236:	f7f1 f85f 	bl	80002f8 <__aeabi_dsub>
 800f23a:	a365      	add	r3, pc, #404	; (adr r3, 800f3d0 <_dtoa_r+0x2b8>)
 800f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f240:	f7f1 fa12 	bl	8000668 <__aeabi_dmul>
 800f244:	a364      	add	r3, pc, #400	; (adr r3, 800f3d8 <_dtoa_r+0x2c0>)
 800f246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24a:	f7f1 f857 	bl	80002fc <__adddf3>
 800f24e:	4606      	mov	r6, r0
 800f250:	4628      	mov	r0, r5
 800f252:	460f      	mov	r7, r1
 800f254:	f7f1 f99e 	bl	8000594 <__aeabi_i2d>
 800f258:	a361      	add	r3, pc, #388	; (adr r3, 800f3e0 <_dtoa_r+0x2c8>)
 800f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25e:	f7f1 fa03 	bl	8000668 <__aeabi_dmul>
 800f262:	4602      	mov	r2, r0
 800f264:	460b      	mov	r3, r1
 800f266:	4630      	mov	r0, r6
 800f268:	4639      	mov	r1, r7
 800f26a:	f7f1 f847 	bl	80002fc <__adddf3>
 800f26e:	4606      	mov	r6, r0
 800f270:	460f      	mov	r7, r1
 800f272:	f7f1 fca9 	bl	8000bc8 <__aeabi_d2iz>
 800f276:	2200      	movs	r2, #0
 800f278:	9000      	str	r0, [sp, #0]
 800f27a:	2300      	movs	r3, #0
 800f27c:	4630      	mov	r0, r6
 800f27e:	4639      	mov	r1, r7
 800f280:	f7f1 fc64 	bl	8000b4c <__aeabi_dcmplt>
 800f284:	b150      	cbz	r0, 800f29c <_dtoa_r+0x184>
 800f286:	9800      	ldr	r0, [sp, #0]
 800f288:	f7f1 f984 	bl	8000594 <__aeabi_i2d>
 800f28c:	4632      	mov	r2, r6
 800f28e:	463b      	mov	r3, r7
 800f290:	f7f1 fc52 	bl	8000b38 <__aeabi_dcmpeq>
 800f294:	b910      	cbnz	r0, 800f29c <_dtoa_r+0x184>
 800f296:	9b00      	ldr	r3, [sp, #0]
 800f298:	3b01      	subs	r3, #1
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	9b00      	ldr	r3, [sp, #0]
 800f29e:	2b16      	cmp	r3, #22
 800f2a0:	d85a      	bhi.n	800f358 <_dtoa_r+0x240>
 800f2a2:	9a00      	ldr	r2, [sp, #0]
 800f2a4:	4b57      	ldr	r3, [pc, #348]	; (800f404 <_dtoa_r+0x2ec>)
 800f2a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ae:	ec51 0b19 	vmov	r0, r1, d9
 800f2b2:	f7f1 fc4b 	bl	8000b4c <__aeabi_dcmplt>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	d050      	beq.n	800f35c <_dtoa_r+0x244>
 800f2ba:	9b00      	ldr	r3, [sp, #0]
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	9300      	str	r3, [sp, #0]
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2c6:	1b5d      	subs	r5, r3, r5
 800f2c8:	1e6b      	subs	r3, r5, #1
 800f2ca:	9305      	str	r3, [sp, #20]
 800f2cc:	bf45      	ittet	mi
 800f2ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800f2d2:	9304      	strmi	r3, [sp, #16]
 800f2d4:	2300      	movpl	r3, #0
 800f2d6:	2300      	movmi	r3, #0
 800f2d8:	bf4c      	ite	mi
 800f2da:	9305      	strmi	r3, [sp, #20]
 800f2dc:	9304      	strpl	r3, [sp, #16]
 800f2de:	9b00      	ldr	r3, [sp, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	db3d      	blt.n	800f360 <_dtoa_r+0x248>
 800f2e4:	9b05      	ldr	r3, [sp, #20]
 800f2e6:	9a00      	ldr	r2, [sp, #0]
 800f2e8:	920a      	str	r2, [sp, #40]	; 0x28
 800f2ea:	4413      	add	r3, r2
 800f2ec:	9305      	str	r3, [sp, #20]
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	9307      	str	r3, [sp, #28]
 800f2f2:	9b06      	ldr	r3, [sp, #24]
 800f2f4:	2b09      	cmp	r3, #9
 800f2f6:	f200 8089 	bhi.w	800f40c <_dtoa_r+0x2f4>
 800f2fa:	2b05      	cmp	r3, #5
 800f2fc:	bfc4      	itt	gt
 800f2fe:	3b04      	subgt	r3, #4
 800f300:	9306      	strgt	r3, [sp, #24]
 800f302:	9b06      	ldr	r3, [sp, #24]
 800f304:	f1a3 0302 	sub.w	r3, r3, #2
 800f308:	bfcc      	ite	gt
 800f30a:	2500      	movgt	r5, #0
 800f30c:	2501      	movle	r5, #1
 800f30e:	2b03      	cmp	r3, #3
 800f310:	f200 8087 	bhi.w	800f422 <_dtoa_r+0x30a>
 800f314:	e8df f003 	tbb	[pc, r3]
 800f318:	59383a2d 	.word	0x59383a2d
 800f31c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f320:	441d      	add	r5, r3
 800f322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f326:	2b20      	cmp	r3, #32
 800f328:	bfc1      	itttt	gt
 800f32a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f32e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f332:	fa0b f303 	lslgt.w	r3, fp, r3
 800f336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f33a:	bfda      	itte	le
 800f33c:	f1c3 0320 	rsble	r3, r3, #32
 800f340:	fa06 f003 	lslle.w	r0, r6, r3
 800f344:	4318      	orrgt	r0, r3
 800f346:	f7f1 f915 	bl	8000574 <__aeabi_ui2d>
 800f34a:	2301      	movs	r3, #1
 800f34c:	4606      	mov	r6, r0
 800f34e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f352:	3d01      	subs	r5, #1
 800f354:	930e      	str	r3, [sp, #56]	; 0x38
 800f356:	e76a      	b.n	800f22e <_dtoa_r+0x116>
 800f358:	2301      	movs	r3, #1
 800f35a:	e7b2      	b.n	800f2c2 <_dtoa_r+0x1aa>
 800f35c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f35e:	e7b1      	b.n	800f2c4 <_dtoa_r+0x1ac>
 800f360:	9b04      	ldr	r3, [sp, #16]
 800f362:	9a00      	ldr	r2, [sp, #0]
 800f364:	1a9b      	subs	r3, r3, r2
 800f366:	9304      	str	r3, [sp, #16]
 800f368:	4253      	negs	r3, r2
 800f36a:	9307      	str	r3, [sp, #28]
 800f36c:	2300      	movs	r3, #0
 800f36e:	930a      	str	r3, [sp, #40]	; 0x28
 800f370:	e7bf      	b.n	800f2f2 <_dtoa_r+0x1da>
 800f372:	2300      	movs	r3, #0
 800f374:	9308      	str	r3, [sp, #32]
 800f376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f378:	2b00      	cmp	r3, #0
 800f37a:	dc55      	bgt.n	800f428 <_dtoa_r+0x310>
 800f37c:	2301      	movs	r3, #1
 800f37e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f382:	461a      	mov	r2, r3
 800f384:	9209      	str	r2, [sp, #36]	; 0x24
 800f386:	e00c      	b.n	800f3a2 <_dtoa_r+0x28a>
 800f388:	2301      	movs	r3, #1
 800f38a:	e7f3      	b.n	800f374 <_dtoa_r+0x25c>
 800f38c:	2300      	movs	r3, #0
 800f38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f390:	9308      	str	r3, [sp, #32]
 800f392:	9b00      	ldr	r3, [sp, #0]
 800f394:	4413      	add	r3, r2
 800f396:	9302      	str	r3, [sp, #8]
 800f398:	3301      	adds	r3, #1
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	9303      	str	r3, [sp, #12]
 800f39e:	bfb8      	it	lt
 800f3a0:	2301      	movlt	r3, #1
 800f3a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	6042      	str	r2, [r0, #4]
 800f3a8:	2204      	movs	r2, #4
 800f3aa:	f102 0614 	add.w	r6, r2, #20
 800f3ae:	429e      	cmp	r6, r3
 800f3b0:	6841      	ldr	r1, [r0, #4]
 800f3b2:	d93d      	bls.n	800f430 <_dtoa_r+0x318>
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f001 f839 	bl	801042c <_Balloc>
 800f3ba:	9001      	str	r0, [sp, #4]
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	d13b      	bne.n	800f438 <_dtoa_r+0x320>
 800f3c0:	4b11      	ldr	r3, [pc, #68]	; (800f408 <_dtoa_r+0x2f0>)
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f3c8:	e6c0      	b.n	800f14c <_dtoa_r+0x34>
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	e7df      	b.n	800f38e <_dtoa_r+0x276>
 800f3ce:	bf00      	nop
 800f3d0:	636f4361 	.word	0x636f4361
 800f3d4:	3fd287a7 	.word	0x3fd287a7
 800f3d8:	8b60c8b3 	.word	0x8b60c8b3
 800f3dc:	3fc68a28 	.word	0x3fc68a28
 800f3e0:	509f79fb 	.word	0x509f79fb
 800f3e4:	3fd34413 	.word	0x3fd34413
 800f3e8:	080121d5 	.word	0x080121d5
 800f3ec:	080121ec 	.word	0x080121ec
 800f3f0:	7ff00000 	.word	0x7ff00000
 800f3f4:	080121d1 	.word	0x080121d1
 800f3f8:	080121c8 	.word	0x080121c8
 800f3fc:	08012149 	.word	0x08012149
 800f400:	3ff80000 	.word	0x3ff80000
 800f404:	08012358 	.word	0x08012358
 800f408:	08012247 	.word	0x08012247
 800f40c:	2501      	movs	r5, #1
 800f40e:	2300      	movs	r3, #0
 800f410:	9306      	str	r3, [sp, #24]
 800f412:	9508      	str	r5, [sp, #32]
 800f414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f41c:	2200      	movs	r2, #0
 800f41e:	2312      	movs	r3, #18
 800f420:	e7b0      	b.n	800f384 <_dtoa_r+0x26c>
 800f422:	2301      	movs	r3, #1
 800f424:	9308      	str	r3, [sp, #32]
 800f426:	e7f5      	b.n	800f414 <_dtoa_r+0x2fc>
 800f428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f42a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f42e:	e7b8      	b.n	800f3a2 <_dtoa_r+0x28a>
 800f430:	3101      	adds	r1, #1
 800f432:	6041      	str	r1, [r0, #4]
 800f434:	0052      	lsls	r2, r2, #1
 800f436:	e7b8      	b.n	800f3aa <_dtoa_r+0x292>
 800f438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f43a:	9a01      	ldr	r2, [sp, #4]
 800f43c:	601a      	str	r2, [r3, #0]
 800f43e:	9b03      	ldr	r3, [sp, #12]
 800f440:	2b0e      	cmp	r3, #14
 800f442:	f200 809d 	bhi.w	800f580 <_dtoa_r+0x468>
 800f446:	2d00      	cmp	r5, #0
 800f448:	f000 809a 	beq.w	800f580 <_dtoa_r+0x468>
 800f44c:	9b00      	ldr	r3, [sp, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	dd32      	ble.n	800f4b8 <_dtoa_r+0x3a0>
 800f452:	4ab7      	ldr	r2, [pc, #732]	; (800f730 <_dtoa_r+0x618>)
 800f454:	f003 030f 	and.w	r3, r3, #15
 800f458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f45c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f460:	9b00      	ldr	r3, [sp, #0]
 800f462:	05d8      	lsls	r0, r3, #23
 800f464:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f468:	d516      	bpl.n	800f498 <_dtoa_r+0x380>
 800f46a:	4bb2      	ldr	r3, [pc, #712]	; (800f734 <_dtoa_r+0x61c>)
 800f46c:	ec51 0b19 	vmov	r0, r1, d9
 800f470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f474:	f7f1 fa22 	bl	80008bc <__aeabi_ddiv>
 800f478:	f007 070f 	and.w	r7, r7, #15
 800f47c:	4682      	mov	sl, r0
 800f47e:	468b      	mov	fp, r1
 800f480:	2503      	movs	r5, #3
 800f482:	4eac      	ldr	r6, [pc, #688]	; (800f734 <_dtoa_r+0x61c>)
 800f484:	b957      	cbnz	r7, 800f49c <_dtoa_r+0x384>
 800f486:	4642      	mov	r2, r8
 800f488:	464b      	mov	r3, r9
 800f48a:	4650      	mov	r0, sl
 800f48c:	4659      	mov	r1, fp
 800f48e:	f7f1 fa15 	bl	80008bc <__aeabi_ddiv>
 800f492:	4682      	mov	sl, r0
 800f494:	468b      	mov	fp, r1
 800f496:	e028      	b.n	800f4ea <_dtoa_r+0x3d2>
 800f498:	2502      	movs	r5, #2
 800f49a:	e7f2      	b.n	800f482 <_dtoa_r+0x36a>
 800f49c:	07f9      	lsls	r1, r7, #31
 800f49e:	d508      	bpl.n	800f4b2 <_dtoa_r+0x39a>
 800f4a0:	4640      	mov	r0, r8
 800f4a2:	4649      	mov	r1, r9
 800f4a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f4a8:	f7f1 f8de 	bl	8000668 <__aeabi_dmul>
 800f4ac:	3501      	adds	r5, #1
 800f4ae:	4680      	mov	r8, r0
 800f4b0:	4689      	mov	r9, r1
 800f4b2:	107f      	asrs	r7, r7, #1
 800f4b4:	3608      	adds	r6, #8
 800f4b6:	e7e5      	b.n	800f484 <_dtoa_r+0x36c>
 800f4b8:	f000 809b 	beq.w	800f5f2 <_dtoa_r+0x4da>
 800f4bc:	9b00      	ldr	r3, [sp, #0]
 800f4be:	4f9d      	ldr	r7, [pc, #628]	; (800f734 <_dtoa_r+0x61c>)
 800f4c0:	425e      	negs	r6, r3
 800f4c2:	4b9b      	ldr	r3, [pc, #620]	; (800f730 <_dtoa_r+0x618>)
 800f4c4:	f006 020f 	and.w	r2, r6, #15
 800f4c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d0:	ec51 0b19 	vmov	r0, r1, d9
 800f4d4:	f7f1 f8c8 	bl	8000668 <__aeabi_dmul>
 800f4d8:	1136      	asrs	r6, r6, #4
 800f4da:	4682      	mov	sl, r0
 800f4dc:	468b      	mov	fp, r1
 800f4de:	2300      	movs	r3, #0
 800f4e0:	2502      	movs	r5, #2
 800f4e2:	2e00      	cmp	r6, #0
 800f4e4:	d17a      	bne.n	800f5dc <_dtoa_r+0x4c4>
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d1d3      	bne.n	800f492 <_dtoa_r+0x37a>
 800f4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	f000 8082 	beq.w	800f5f6 <_dtoa_r+0x4de>
 800f4f2:	4b91      	ldr	r3, [pc, #580]	; (800f738 <_dtoa_r+0x620>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	4650      	mov	r0, sl
 800f4f8:	4659      	mov	r1, fp
 800f4fa:	f7f1 fb27 	bl	8000b4c <__aeabi_dcmplt>
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d079      	beq.n	800f5f6 <_dtoa_r+0x4de>
 800f502:	9b03      	ldr	r3, [sp, #12]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d076      	beq.n	800f5f6 <_dtoa_r+0x4de>
 800f508:	9b02      	ldr	r3, [sp, #8]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	dd36      	ble.n	800f57c <_dtoa_r+0x464>
 800f50e:	9b00      	ldr	r3, [sp, #0]
 800f510:	4650      	mov	r0, sl
 800f512:	4659      	mov	r1, fp
 800f514:	1e5f      	subs	r7, r3, #1
 800f516:	2200      	movs	r2, #0
 800f518:	4b88      	ldr	r3, [pc, #544]	; (800f73c <_dtoa_r+0x624>)
 800f51a:	f7f1 f8a5 	bl	8000668 <__aeabi_dmul>
 800f51e:	9e02      	ldr	r6, [sp, #8]
 800f520:	4682      	mov	sl, r0
 800f522:	468b      	mov	fp, r1
 800f524:	3501      	adds	r5, #1
 800f526:	4628      	mov	r0, r5
 800f528:	f7f1 f834 	bl	8000594 <__aeabi_i2d>
 800f52c:	4652      	mov	r2, sl
 800f52e:	465b      	mov	r3, fp
 800f530:	f7f1 f89a 	bl	8000668 <__aeabi_dmul>
 800f534:	4b82      	ldr	r3, [pc, #520]	; (800f740 <_dtoa_r+0x628>)
 800f536:	2200      	movs	r2, #0
 800f538:	f7f0 fee0 	bl	80002fc <__adddf3>
 800f53c:	46d0      	mov	r8, sl
 800f53e:	46d9      	mov	r9, fp
 800f540:	4682      	mov	sl, r0
 800f542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f546:	2e00      	cmp	r6, #0
 800f548:	d158      	bne.n	800f5fc <_dtoa_r+0x4e4>
 800f54a:	4b7e      	ldr	r3, [pc, #504]	; (800f744 <_dtoa_r+0x62c>)
 800f54c:	2200      	movs	r2, #0
 800f54e:	4640      	mov	r0, r8
 800f550:	4649      	mov	r1, r9
 800f552:	f7f0 fed1 	bl	80002f8 <__aeabi_dsub>
 800f556:	4652      	mov	r2, sl
 800f558:	465b      	mov	r3, fp
 800f55a:	4680      	mov	r8, r0
 800f55c:	4689      	mov	r9, r1
 800f55e:	f7f1 fb13 	bl	8000b88 <__aeabi_dcmpgt>
 800f562:	2800      	cmp	r0, #0
 800f564:	f040 8295 	bne.w	800fa92 <_dtoa_r+0x97a>
 800f568:	4652      	mov	r2, sl
 800f56a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f56e:	4640      	mov	r0, r8
 800f570:	4649      	mov	r1, r9
 800f572:	f7f1 faeb 	bl	8000b4c <__aeabi_dcmplt>
 800f576:	2800      	cmp	r0, #0
 800f578:	f040 8289 	bne.w	800fa8e <_dtoa_r+0x976>
 800f57c:	ec5b ab19 	vmov	sl, fp, d9
 800f580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f582:	2b00      	cmp	r3, #0
 800f584:	f2c0 8148 	blt.w	800f818 <_dtoa_r+0x700>
 800f588:	9a00      	ldr	r2, [sp, #0]
 800f58a:	2a0e      	cmp	r2, #14
 800f58c:	f300 8144 	bgt.w	800f818 <_dtoa_r+0x700>
 800f590:	4b67      	ldr	r3, [pc, #412]	; (800f730 <_dtoa_r+0x618>)
 800f592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f596:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f280 80d5 	bge.w	800f74c <_dtoa_r+0x634>
 800f5a2:	9b03      	ldr	r3, [sp, #12]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f300 80d1 	bgt.w	800f74c <_dtoa_r+0x634>
 800f5aa:	f040 826f 	bne.w	800fa8c <_dtoa_r+0x974>
 800f5ae:	4b65      	ldr	r3, [pc, #404]	; (800f744 <_dtoa_r+0x62c>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	4640      	mov	r0, r8
 800f5b4:	4649      	mov	r1, r9
 800f5b6:	f7f1 f857 	bl	8000668 <__aeabi_dmul>
 800f5ba:	4652      	mov	r2, sl
 800f5bc:	465b      	mov	r3, fp
 800f5be:	f7f1 fad9 	bl	8000b74 <__aeabi_dcmpge>
 800f5c2:	9e03      	ldr	r6, [sp, #12]
 800f5c4:	4637      	mov	r7, r6
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	f040 8245 	bne.w	800fa56 <_dtoa_r+0x93e>
 800f5cc:	9d01      	ldr	r5, [sp, #4]
 800f5ce:	2331      	movs	r3, #49	; 0x31
 800f5d0:	f805 3b01 	strb.w	r3, [r5], #1
 800f5d4:	9b00      	ldr	r3, [sp, #0]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	e240      	b.n	800fa5e <_dtoa_r+0x946>
 800f5dc:	07f2      	lsls	r2, r6, #31
 800f5de:	d505      	bpl.n	800f5ec <_dtoa_r+0x4d4>
 800f5e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5e4:	f7f1 f840 	bl	8000668 <__aeabi_dmul>
 800f5e8:	3501      	adds	r5, #1
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	1076      	asrs	r6, r6, #1
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	e777      	b.n	800f4e2 <_dtoa_r+0x3ca>
 800f5f2:	2502      	movs	r5, #2
 800f5f4:	e779      	b.n	800f4ea <_dtoa_r+0x3d2>
 800f5f6:	9f00      	ldr	r7, [sp, #0]
 800f5f8:	9e03      	ldr	r6, [sp, #12]
 800f5fa:	e794      	b.n	800f526 <_dtoa_r+0x40e>
 800f5fc:	9901      	ldr	r1, [sp, #4]
 800f5fe:	4b4c      	ldr	r3, [pc, #304]	; (800f730 <_dtoa_r+0x618>)
 800f600:	4431      	add	r1, r6
 800f602:	910d      	str	r1, [sp, #52]	; 0x34
 800f604:	9908      	ldr	r1, [sp, #32]
 800f606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f60a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f60e:	2900      	cmp	r1, #0
 800f610:	d043      	beq.n	800f69a <_dtoa_r+0x582>
 800f612:	494d      	ldr	r1, [pc, #308]	; (800f748 <_dtoa_r+0x630>)
 800f614:	2000      	movs	r0, #0
 800f616:	f7f1 f951 	bl	80008bc <__aeabi_ddiv>
 800f61a:	4652      	mov	r2, sl
 800f61c:	465b      	mov	r3, fp
 800f61e:	f7f0 fe6b 	bl	80002f8 <__aeabi_dsub>
 800f622:	9d01      	ldr	r5, [sp, #4]
 800f624:	4682      	mov	sl, r0
 800f626:	468b      	mov	fp, r1
 800f628:	4649      	mov	r1, r9
 800f62a:	4640      	mov	r0, r8
 800f62c:	f7f1 facc 	bl	8000bc8 <__aeabi_d2iz>
 800f630:	4606      	mov	r6, r0
 800f632:	f7f0 ffaf 	bl	8000594 <__aeabi_i2d>
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	4640      	mov	r0, r8
 800f63c:	4649      	mov	r1, r9
 800f63e:	f7f0 fe5b 	bl	80002f8 <__aeabi_dsub>
 800f642:	3630      	adds	r6, #48	; 0x30
 800f644:	f805 6b01 	strb.w	r6, [r5], #1
 800f648:	4652      	mov	r2, sl
 800f64a:	465b      	mov	r3, fp
 800f64c:	4680      	mov	r8, r0
 800f64e:	4689      	mov	r9, r1
 800f650:	f7f1 fa7c 	bl	8000b4c <__aeabi_dcmplt>
 800f654:	2800      	cmp	r0, #0
 800f656:	d163      	bne.n	800f720 <_dtoa_r+0x608>
 800f658:	4642      	mov	r2, r8
 800f65a:	464b      	mov	r3, r9
 800f65c:	4936      	ldr	r1, [pc, #216]	; (800f738 <_dtoa_r+0x620>)
 800f65e:	2000      	movs	r0, #0
 800f660:	f7f0 fe4a 	bl	80002f8 <__aeabi_dsub>
 800f664:	4652      	mov	r2, sl
 800f666:	465b      	mov	r3, fp
 800f668:	f7f1 fa70 	bl	8000b4c <__aeabi_dcmplt>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	f040 80b5 	bne.w	800f7dc <_dtoa_r+0x6c4>
 800f672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f674:	429d      	cmp	r5, r3
 800f676:	d081      	beq.n	800f57c <_dtoa_r+0x464>
 800f678:	4b30      	ldr	r3, [pc, #192]	; (800f73c <_dtoa_r+0x624>)
 800f67a:	2200      	movs	r2, #0
 800f67c:	4650      	mov	r0, sl
 800f67e:	4659      	mov	r1, fp
 800f680:	f7f0 fff2 	bl	8000668 <__aeabi_dmul>
 800f684:	4b2d      	ldr	r3, [pc, #180]	; (800f73c <_dtoa_r+0x624>)
 800f686:	4682      	mov	sl, r0
 800f688:	468b      	mov	fp, r1
 800f68a:	4640      	mov	r0, r8
 800f68c:	4649      	mov	r1, r9
 800f68e:	2200      	movs	r2, #0
 800f690:	f7f0 ffea 	bl	8000668 <__aeabi_dmul>
 800f694:	4680      	mov	r8, r0
 800f696:	4689      	mov	r9, r1
 800f698:	e7c6      	b.n	800f628 <_dtoa_r+0x510>
 800f69a:	4650      	mov	r0, sl
 800f69c:	4659      	mov	r1, fp
 800f69e:	f7f0 ffe3 	bl	8000668 <__aeabi_dmul>
 800f6a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6a4:	9d01      	ldr	r5, [sp, #4]
 800f6a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6a8:	4682      	mov	sl, r0
 800f6aa:	468b      	mov	fp, r1
 800f6ac:	4649      	mov	r1, r9
 800f6ae:	4640      	mov	r0, r8
 800f6b0:	f7f1 fa8a 	bl	8000bc8 <__aeabi_d2iz>
 800f6b4:	4606      	mov	r6, r0
 800f6b6:	f7f0 ff6d 	bl	8000594 <__aeabi_i2d>
 800f6ba:	3630      	adds	r6, #48	; 0x30
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	4640      	mov	r0, r8
 800f6c2:	4649      	mov	r1, r9
 800f6c4:	f7f0 fe18 	bl	80002f8 <__aeabi_dsub>
 800f6c8:	f805 6b01 	strb.w	r6, [r5], #1
 800f6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6ce:	429d      	cmp	r5, r3
 800f6d0:	4680      	mov	r8, r0
 800f6d2:	4689      	mov	r9, r1
 800f6d4:	f04f 0200 	mov.w	r2, #0
 800f6d8:	d124      	bne.n	800f724 <_dtoa_r+0x60c>
 800f6da:	4b1b      	ldr	r3, [pc, #108]	; (800f748 <_dtoa_r+0x630>)
 800f6dc:	4650      	mov	r0, sl
 800f6de:	4659      	mov	r1, fp
 800f6e0:	f7f0 fe0c 	bl	80002fc <__adddf3>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	4640      	mov	r0, r8
 800f6ea:	4649      	mov	r1, r9
 800f6ec:	f7f1 fa4c 	bl	8000b88 <__aeabi_dcmpgt>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	d173      	bne.n	800f7dc <_dtoa_r+0x6c4>
 800f6f4:	4652      	mov	r2, sl
 800f6f6:	465b      	mov	r3, fp
 800f6f8:	4913      	ldr	r1, [pc, #76]	; (800f748 <_dtoa_r+0x630>)
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	f7f0 fdfc 	bl	80002f8 <__aeabi_dsub>
 800f700:	4602      	mov	r2, r0
 800f702:	460b      	mov	r3, r1
 800f704:	4640      	mov	r0, r8
 800f706:	4649      	mov	r1, r9
 800f708:	f7f1 fa20 	bl	8000b4c <__aeabi_dcmplt>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	f43f af35 	beq.w	800f57c <_dtoa_r+0x464>
 800f712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f714:	1e6b      	subs	r3, r5, #1
 800f716:	930f      	str	r3, [sp, #60]	; 0x3c
 800f718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f71c:	2b30      	cmp	r3, #48	; 0x30
 800f71e:	d0f8      	beq.n	800f712 <_dtoa_r+0x5fa>
 800f720:	9700      	str	r7, [sp, #0]
 800f722:	e049      	b.n	800f7b8 <_dtoa_r+0x6a0>
 800f724:	4b05      	ldr	r3, [pc, #20]	; (800f73c <_dtoa_r+0x624>)
 800f726:	f7f0 ff9f 	bl	8000668 <__aeabi_dmul>
 800f72a:	4680      	mov	r8, r0
 800f72c:	4689      	mov	r9, r1
 800f72e:	e7bd      	b.n	800f6ac <_dtoa_r+0x594>
 800f730:	08012358 	.word	0x08012358
 800f734:	08012330 	.word	0x08012330
 800f738:	3ff00000 	.word	0x3ff00000
 800f73c:	40240000 	.word	0x40240000
 800f740:	401c0000 	.word	0x401c0000
 800f744:	40140000 	.word	0x40140000
 800f748:	3fe00000 	.word	0x3fe00000
 800f74c:	9d01      	ldr	r5, [sp, #4]
 800f74e:	4656      	mov	r6, sl
 800f750:	465f      	mov	r7, fp
 800f752:	4642      	mov	r2, r8
 800f754:	464b      	mov	r3, r9
 800f756:	4630      	mov	r0, r6
 800f758:	4639      	mov	r1, r7
 800f75a:	f7f1 f8af 	bl	80008bc <__aeabi_ddiv>
 800f75e:	f7f1 fa33 	bl	8000bc8 <__aeabi_d2iz>
 800f762:	4682      	mov	sl, r0
 800f764:	f7f0 ff16 	bl	8000594 <__aeabi_i2d>
 800f768:	4642      	mov	r2, r8
 800f76a:	464b      	mov	r3, r9
 800f76c:	f7f0 ff7c 	bl	8000668 <__aeabi_dmul>
 800f770:	4602      	mov	r2, r0
 800f772:	460b      	mov	r3, r1
 800f774:	4630      	mov	r0, r6
 800f776:	4639      	mov	r1, r7
 800f778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f77c:	f7f0 fdbc 	bl	80002f8 <__aeabi_dsub>
 800f780:	f805 6b01 	strb.w	r6, [r5], #1
 800f784:	9e01      	ldr	r6, [sp, #4]
 800f786:	9f03      	ldr	r7, [sp, #12]
 800f788:	1bae      	subs	r6, r5, r6
 800f78a:	42b7      	cmp	r7, r6
 800f78c:	4602      	mov	r2, r0
 800f78e:	460b      	mov	r3, r1
 800f790:	d135      	bne.n	800f7fe <_dtoa_r+0x6e6>
 800f792:	f7f0 fdb3 	bl	80002fc <__adddf3>
 800f796:	4642      	mov	r2, r8
 800f798:	464b      	mov	r3, r9
 800f79a:	4606      	mov	r6, r0
 800f79c:	460f      	mov	r7, r1
 800f79e:	f7f1 f9f3 	bl	8000b88 <__aeabi_dcmpgt>
 800f7a2:	b9d0      	cbnz	r0, 800f7da <_dtoa_r+0x6c2>
 800f7a4:	4642      	mov	r2, r8
 800f7a6:	464b      	mov	r3, r9
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	4639      	mov	r1, r7
 800f7ac:	f7f1 f9c4 	bl	8000b38 <__aeabi_dcmpeq>
 800f7b0:	b110      	cbz	r0, 800f7b8 <_dtoa_r+0x6a0>
 800f7b2:	f01a 0f01 	tst.w	sl, #1
 800f7b6:	d110      	bne.n	800f7da <_dtoa_r+0x6c2>
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	ee18 1a10 	vmov	r1, s16
 800f7be:	f000 fe75 	bl	80104ac <_Bfree>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	9800      	ldr	r0, [sp, #0]
 800f7c6:	702b      	strb	r3, [r5, #0]
 800f7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7ca:	3001      	adds	r0, #1
 800f7cc:	6018      	str	r0, [r3, #0]
 800f7ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f43f acf1 	beq.w	800f1b8 <_dtoa_r+0xa0>
 800f7d6:	601d      	str	r5, [r3, #0]
 800f7d8:	e4ee      	b.n	800f1b8 <_dtoa_r+0xa0>
 800f7da:	9f00      	ldr	r7, [sp, #0]
 800f7dc:	462b      	mov	r3, r5
 800f7de:	461d      	mov	r5, r3
 800f7e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7e4:	2a39      	cmp	r2, #57	; 0x39
 800f7e6:	d106      	bne.n	800f7f6 <_dtoa_r+0x6de>
 800f7e8:	9a01      	ldr	r2, [sp, #4]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d1f7      	bne.n	800f7de <_dtoa_r+0x6c6>
 800f7ee:	9901      	ldr	r1, [sp, #4]
 800f7f0:	2230      	movs	r2, #48	; 0x30
 800f7f2:	3701      	adds	r7, #1
 800f7f4:	700a      	strb	r2, [r1, #0]
 800f7f6:	781a      	ldrb	r2, [r3, #0]
 800f7f8:	3201      	adds	r2, #1
 800f7fa:	701a      	strb	r2, [r3, #0]
 800f7fc:	e790      	b.n	800f720 <_dtoa_r+0x608>
 800f7fe:	4ba6      	ldr	r3, [pc, #664]	; (800fa98 <_dtoa_r+0x980>)
 800f800:	2200      	movs	r2, #0
 800f802:	f7f0 ff31 	bl	8000668 <__aeabi_dmul>
 800f806:	2200      	movs	r2, #0
 800f808:	2300      	movs	r3, #0
 800f80a:	4606      	mov	r6, r0
 800f80c:	460f      	mov	r7, r1
 800f80e:	f7f1 f993 	bl	8000b38 <__aeabi_dcmpeq>
 800f812:	2800      	cmp	r0, #0
 800f814:	d09d      	beq.n	800f752 <_dtoa_r+0x63a>
 800f816:	e7cf      	b.n	800f7b8 <_dtoa_r+0x6a0>
 800f818:	9a08      	ldr	r2, [sp, #32]
 800f81a:	2a00      	cmp	r2, #0
 800f81c:	f000 80d7 	beq.w	800f9ce <_dtoa_r+0x8b6>
 800f820:	9a06      	ldr	r2, [sp, #24]
 800f822:	2a01      	cmp	r2, #1
 800f824:	f300 80ba 	bgt.w	800f99c <_dtoa_r+0x884>
 800f828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f82a:	2a00      	cmp	r2, #0
 800f82c:	f000 80b2 	beq.w	800f994 <_dtoa_r+0x87c>
 800f830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f834:	9e07      	ldr	r6, [sp, #28]
 800f836:	9d04      	ldr	r5, [sp, #16]
 800f838:	9a04      	ldr	r2, [sp, #16]
 800f83a:	441a      	add	r2, r3
 800f83c:	9204      	str	r2, [sp, #16]
 800f83e:	9a05      	ldr	r2, [sp, #20]
 800f840:	2101      	movs	r1, #1
 800f842:	441a      	add	r2, r3
 800f844:	4620      	mov	r0, r4
 800f846:	9205      	str	r2, [sp, #20]
 800f848:	f000 ff32 	bl	80106b0 <__i2b>
 800f84c:	4607      	mov	r7, r0
 800f84e:	2d00      	cmp	r5, #0
 800f850:	dd0c      	ble.n	800f86c <_dtoa_r+0x754>
 800f852:	9b05      	ldr	r3, [sp, #20]
 800f854:	2b00      	cmp	r3, #0
 800f856:	dd09      	ble.n	800f86c <_dtoa_r+0x754>
 800f858:	42ab      	cmp	r3, r5
 800f85a:	9a04      	ldr	r2, [sp, #16]
 800f85c:	bfa8      	it	ge
 800f85e:	462b      	movge	r3, r5
 800f860:	1ad2      	subs	r2, r2, r3
 800f862:	9204      	str	r2, [sp, #16]
 800f864:	9a05      	ldr	r2, [sp, #20]
 800f866:	1aed      	subs	r5, r5, r3
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	9305      	str	r3, [sp, #20]
 800f86c:	9b07      	ldr	r3, [sp, #28]
 800f86e:	b31b      	cbz	r3, 800f8b8 <_dtoa_r+0x7a0>
 800f870:	9b08      	ldr	r3, [sp, #32]
 800f872:	2b00      	cmp	r3, #0
 800f874:	f000 80af 	beq.w	800f9d6 <_dtoa_r+0x8be>
 800f878:	2e00      	cmp	r6, #0
 800f87a:	dd13      	ble.n	800f8a4 <_dtoa_r+0x78c>
 800f87c:	4639      	mov	r1, r7
 800f87e:	4632      	mov	r2, r6
 800f880:	4620      	mov	r0, r4
 800f882:	f000 ffd5 	bl	8010830 <__pow5mult>
 800f886:	ee18 2a10 	vmov	r2, s16
 800f88a:	4601      	mov	r1, r0
 800f88c:	4607      	mov	r7, r0
 800f88e:	4620      	mov	r0, r4
 800f890:	f000 ff24 	bl	80106dc <__multiply>
 800f894:	ee18 1a10 	vmov	r1, s16
 800f898:	4680      	mov	r8, r0
 800f89a:	4620      	mov	r0, r4
 800f89c:	f000 fe06 	bl	80104ac <_Bfree>
 800f8a0:	ee08 8a10 	vmov	s16, r8
 800f8a4:	9b07      	ldr	r3, [sp, #28]
 800f8a6:	1b9a      	subs	r2, r3, r6
 800f8a8:	d006      	beq.n	800f8b8 <_dtoa_r+0x7a0>
 800f8aa:	ee18 1a10 	vmov	r1, s16
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f000 ffbe 	bl	8010830 <__pow5mult>
 800f8b4:	ee08 0a10 	vmov	s16, r0
 800f8b8:	2101      	movs	r1, #1
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f000 fef8 	bl	80106b0 <__i2b>
 800f8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	4606      	mov	r6, r0
 800f8c6:	f340 8088 	ble.w	800f9da <_dtoa_r+0x8c2>
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	4601      	mov	r1, r0
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 ffae 	bl	8010830 <__pow5mult>
 800f8d4:	9b06      	ldr	r3, [sp, #24]
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	4606      	mov	r6, r0
 800f8da:	f340 8081 	ble.w	800f9e0 <_dtoa_r+0x8c8>
 800f8de:	f04f 0800 	mov.w	r8, #0
 800f8e2:	6933      	ldr	r3, [r6, #16]
 800f8e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f8e8:	6918      	ldr	r0, [r3, #16]
 800f8ea:	f000 fe91 	bl	8010610 <__hi0bits>
 800f8ee:	f1c0 0020 	rsb	r0, r0, #32
 800f8f2:	9b05      	ldr	r3, [sp, #20]
 800f8f4:	4418      	add	r0, r3
 800f8f6:	f010 001f 	ands.w	r0, r0, #31
 800f8fa:	f000 8092 	beq.w	800fa22 <_dtoa_r+0x90a>
 800f8fe:	f1c0 0320 	rsb	r3, r0, #32
 800f902:	2b04      	cmp	r3, #4
 800f904:	f340 808a 	ble.w	800fa1c <_dtoa_r+0x904>
 800f908:	f1c0 001c 	rsb	r0, r0, #28
 800f90c:	9b04      	ldr	r3, [sp, #16]
 800f90e:	4403      	add	r3, r0
 800f910:	9304      	str	r3, [sp, #16]
 800f912:	9b05      	ldr	r3, [sp, #20]
 800f914:	4403      	add	r3, r0
 800f916:	4405      	add	r5, r0
 800f918:	9305      	str	r3, [sp, #20]
 800f91a:	9b04      	ldr	r3, [sp, #16]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	dd07      	ble.n	800f930 <_dtoa_r+0x818>
 800f920:	ee18 1a10 	vmov	r1, s16
 800f924:	461a      	mov	r2, r3
 800f926:	4620      	mov	r0, r4
 800f928:	f000 ffdc 	bl	80108e4 <__lshift>
 800f92c:	ee08 0a10 	vmov	s16, r0
 800f930:	9b05      	ldr	r3, [sp, #20]
 800f932:	2b00      	cmp	r3, #0
 800f934:	dd05      	ble.n	800f942 <_dtoa_r+0x82a>
 800f936:	4631      	mov	r1, r6
 800f938:	461a      	mov	r2, r3
 800f93a:	4620      	mov	r0, r4
 800f93c:	f000 ffd2 	bl	80108e4 <__lshift>
 800f940:	4606      	mov	r6, r0
 800f942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f944:	2b00      	cmp	r3, #0
 800f946:	d06e      	beq.n	800fa26 <_dtoa_r+0x90e>
 800f948:	ee18 0a10 	vmov	r0, s16
 800f94c:	4631      	mov	r1, r6
 800f94e:	f001 f839 	bl	80109c4 <__mcmp>
 800f952:	2800      	cmp	r0, #0
 800f954:	da67      	bge.n	800fa26 <_dtoa_r+0x90e>
 800f956:	9b00      	ldr	r3, [sp, #0]
 800f958:	3b01      	subs	r3, #1
 800f95a:	ee18 1a10 	vmov	r1, s16
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	220a      	movs	r2, #10
 800f962:	2300      	movs	r3, #0
 800f964:	4620      	mov	r0, r4
 800f966:	f000 fdc3 	bl	80104f0 <__multadd>
 800f96a:	9b08      	ldr	r3, [sp, #32]
 800f96c:	ee08 0a10 	vmov	s16, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	f000 81b1 	beq.w	800fcd8 <_dtoa_r+0xbc0>
 800f976:	2300      	movs	r3, #0
 800f978:	4639      	mov	r1, r7
 800f97a:	220a      	movs	r2, #10
 800f97c:	4620      	mov	r0, r4
 800f97e:	f000 fdb7 	bl	80104f0 <__multadd>
 800f982:	9b02      	ldr	r3, [sp, #8]
 800f984:	2b00      	cmp	r3, #0
 800f986:	4607      	mov	r7, r0
 800f988:	f300 808e 	bgt.w	800faa8 <_dtoa_r+0x990>
 800f98c:	9b06      	ldr	r3, [sp, #24]
 800f98e:	2b02      	cmp	r3, #2
 800f990:	dc51      	bgt.n	800fa36 <_dtoa_r+0x91e>
 800f992:	e089      	b.n	800faa8 <_dtoa_r+0x990>
 800f994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f99a:	e74b      	b.n	800f834 <_dtoa_r+0x71c>
 800f99c:	9b03      	ldr	r3, [sp, #12]
 800f99e:	1e5e      	subs	r6, r3, #1
 800f9a0:	9b07      	ldr	r3, [sp, #28]
 800f9a2:	42b3      	cmp	r3, r6
 800f9a4:	bfbf      	itttt	lt
 800f9a6:	9b07      	ldrlt	r3, [sp, #28]
 800f9a8:	9607      	strlt	r6, [sp, #28]
 800f9aa:	1af2      	sublt	r2, r6, r3
 800f9ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f9ae:	bfb6      	itet	lt
 800f9b0:	189b      	addlt	r3, r3, r2
 800f9b2:	1b9e      	subge	r6, r3, r6
 800f9b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f9b6:	9b03      	ldr	r3, [sp, #12]
 800f9b8:	bfb8      	it	lt
 800f9ba:	2600      	movlt	r6, #0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	bfb7      	itett	lt
 800f9c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f9c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f9c8:	1a9d      	sublt	r5, r3, r2
 800f9ca:	2300      	movlt	r3, #0
 800f9cc:	e734      	b.n	800f838 <_dtoa_r+0x720>
 800f9ce:	9e07      	ldr	r6, [sp, #28]
 800f9d0:	9d04      	ldr	r5, [sp, #16]
 800f9d2:	9f08      	ldr	r7, [sp, #32]
 800f9d4:	e73b      	b.n	800f84e <_dtoa_r+0x736>
 800f9d6:	9a07      	ldr	r2, [sp, #28]
 800f9d8:	e767      	b.n	800f8aa <_dtoa_r+0x792>
 800f9da:	9b06      	ldr	r3, [sp, #24]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	dc18      	bgt.n	800fa12 <_dtoa_r+0x8fa>
 800f9e0:	f1ba 0f00 	cmp.w	sl, #0
 800f9e4:	d115      	bne.n	800fa12 <_dtoa_r+0x8fa>
 800f9e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9ea:	b993      	cbnz	r3, 800fa12 <_dtoa_r+0x8fa>
 800f9ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f9f0:	0d1b      	lsrs	r3, r3, #20
 800f9f2:	051b      	lsls	r3, r3, #20
 800f9f4:	b183      	cbz	r3, 800fa18 <_dtoa_r+0x900>
 800f9f6:	9b04      	ldr	r3, [sp, #16]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	9304      	str	r3, [sp, #16]
 800f9fc:	9b05      	ldr	r3, [sp, #20]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	9305      	str	r3, [sp, #20]
 800fa02:	f04f 0801 	mov.w	r8, #1
 800fa06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	f47f af6a 	bne.w	800f8e2 <_dtoa_r+0x7ca>
 800fa0e:	2001      	movs	r0, #1
 800fa10:	e76f      	b.n	800f8f2 <_dtoa_r+0x7da>
 800fa12:	f04f 0800 	mov.w	r8, #0
 800fa16:	e7f6      	b.n	800fa06 <_dtoa_r+0x8ee>
 800fa18:	4698      	mov	r8, r3
 800fa1a:	e7f4      	b.n	800fa06 <_dtoa_r+0x8ee>
 800fa1c:	f43f af7d 	beq.w	800f91a <_dtoa_r+0x802>
 800fa20:	4618      	mov	r0, r3
 800fa22:	301c      	adds	r0, #28
 800fa24:	e772      	b.n	800f90c <_dtoa_r+0x7f4>
 800fa26:	9b03      	ldr	r3, [sp, #12]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	dc37      	bgt.n	800fa9c <_dtoa_r+0x984>
 800fa2c:	9b06      	ldr	r3, [sp, #24]
 800fa2e:	2b02      	cmp	r3, #2
 800fa30:	dd34      	ble.n	800fa9c <_dtoa_r+0x984>
 800fa32:	9b03      	ldr	r3, [sp, #12]
 800fa34:	9302      	str	r3, [sp, #8]
 800fa36:	9b02      	ldr	r3, [sp, #8]
 800fa38:	b96b      	cbnz	r3, 800fa56 <_dtoa_r+0x93e>
 800fa3a:	4631      	mov	r1, r6
 800fa3c:	2205      	movs	r2, #5
 800fa3e:	4620      	mov	r0, r4
 800fa40:	f000 fd56 	bl	80104f0 <__multadd>
 800fa44:	4601      	mov	r1, r0
 800fa46:	4606      	mov	r6, r0
 800fa48:	ee18 0a10 	vmov	r0, s16
 800fa4c:	f000 ffba 	bl	80109c4 <__mcmp>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	f73f adbb 	bgt.w	800f5cc <_dtoa_r+0x4b4>
 800fa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa58:	9d01      	ldr	r5, [sp, #4]
 800fa5a:	43db      	mvns	r3, r3
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	f04f 0800 	mov.w	r8, #0
 800fa62:	4631      	mov	r1, r6
 800fa64:	4620      	mov	r0, r4
 800fa66:	f000 fd21 	bl	80104ac <_Bfree>
 800fa6a:	2f00      	cmp	r7, #0
 800fa6c:	f43f aea4 	beq.w	800f7b8 <_dtoa_r+0x6a0>
 800fa70:	f1b8 0f00 	cmp.w	r8, #0
 800fa74:	d005      	beq.n	800fa82 <_dtoa_r+0x96a>
 800fa76:	45b8      	cmp	r8, r7
 800fa78:	d003      	beq.n	800fa82 <_dtoa_r+0x96a>
 800fa7a:	4641      	mov	r1, r8
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f000 fd15 	bl	80104ac <_Bfree>
 800fa82:	4639      	mov	r1, r7
 800fa84:	4620      	mov	r0, r4
 800fa86:	f000 fd11 	bl	80104ac <_Bfree>
 800fa8a:	e695      	b.n	800f7b8 <_dtoa_r+0x6a0>
 800fa8c:	2600      	movs	r6, #0
 800fa8e:	4637      	mov	r7, r6
 800fa90:	e7e1      	b.n	800fa56 <_dtoa_r+0x93e>
 800fa92:	9700      	str	r7, [sp, #0]
 800fa94:	4637      	mov	r7, r6
 800fa96:	e599      	b.n	800f5cc <_dtoa_r+0x4b4>
 800fa98:	40240000 	.word	0x40240000
 800fa9c:	9b08      	ldr	r3, [sp, #32]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f000 80ca 	beq.w	800fc38 <_dtoa_r+0xb20>
 800faa4:	9b03      	ldr	r3, [sp, #12]
 800faa6:	9302      	str	r3, [sp, #8]
 800faa8:	2d00      	cmp	r5, #0
 800faaa:	dd05      	ble.n	800fab8 <_dtoa_r+0x9a0>
 800faac:	4639      	mov	r1, r7
 800faae:	462a      	mov	r2, r5
 800fab0:	4620      	mov	r0, r4
 800fab2:	f000 ff17 	bl	80108e4 <__lshift>
 800fab6:	4607      	mov	r7, r0
 800fab8:	f1b8 0f00 	cmp.w	r8, #0
 800fabc:	d05b      	beq.n	800fb76 <_dtoa_r+0xa5e>
 800fabe:	6879      	ldr	r1, [r7, #4]
 800fac0:	4620      	mov	r0, r4
 800fac2:	f000 fcb3 	bl	801042c <_Balloc>
 800fac6:	4605      	mov	r5, r0
 800fac8:	b928      	cbnz	r0, 800fad6 <_dtoa_r+0x9be>
 800faca:	4b87      	ldr	r3, [pc, #540]	; (800fce8 <_dtoa_r+0xbd0>)
 800facc:	4602      	mov	r2, r0
 800face:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fad2:	f7ff bb3b 	b.w	800f14c <_dtoa_r+0x34>
 800fad6:	693a      	ldr	r2, [r7, #16]
 800fad8:	3202      	adds	r2, #2
 800fada:	0092      	lsls	r2, r2, #2
 800fadc:	f107 010c 	add.w	r1, r7, #12
 800fae0:	300c      	adds	r0, #12
 800fae2:	f000 fc95 	bl	8010410 <memcpy>
 800fae6:	2201      	movs	r2, #1
 800fae8:	4629      	mov	r1, r5
 800faea:	4620      	mov	r0, r4
 800faec:	f000 fefa 	bl	80108e4 <__lshift>
 800faf0:	9b01      	ldr	r3, [sp, #4]
 800faf2:	f103 0901 	add.w	r9, r3, #1
 800faf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fafa:	4413      	add	r3, r2
 800fafc:	9305      	str	r3, [sp, #20]
 800fafe:	f00a 0301 	and.w	r3, sl, #1
 800fb02:	46b8      	mov	r8, r7
 800fb04:	9304      	str	r3, [sp, #16]
 800fb06:	4607      	mov	r7, r0
 800fb08:	4631      	mov	r1, r6
 800fb0a:	ee18 0a10 	vmov	r0, s16
 800fb0e:	f7ff fa77 	bl	800f000 <quorem>
 800fb12:	4641      	mov	r1, r8
 800fb14:	9002      	str	r0, [sp, #8]
 800fb16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fb1a:	ee18 0a10 	vmov	r0, s16
 800fb1e:	f000 ff51 	bl	80109c4 <__mcmp>
 800fb22:	463a      	mov	r2, r7
 800fb24:	9003      	str	r0, [sp, #12]
 800fb26:	4631      	mov	r1, r6
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f000 ff67 	bl	80109fc <__mdiff>
 800fb2e:	68c2      	ldr	r2, [r0, #12]
 800fb30:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800fb34:	4605      	mov	r5, r0
 800fb36:	bb02      	cbnz	r2, 800fb7a <_dtoa_r+0xa62>
 800fb38:	4601      	mov	r1, r0
 800fb3a:	ee18 0a10 	vmov	r0, s16
 800fb3e:	f000 ff41 	bl	80109c4 <__mcmp>
 800fb42:	4602      	mov	r2, r0
 800fb44:	4629      	mov	r1, r5
 800fb46:	4620      	mov	r0, r4
 800fb48:	9207      	str	r2, [sp, #28]
 800fb4a:	f000 fcaf 	bl	80104ac <_Bfree>
 800fb4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fb52:	ea43 0102 	orr.w	r1, r3, r2
 800fb56:	9b04      	ldr	r3, [sp, #16]
 800fb58:	430b      	orrs	r3, r1
 800fb5a:	464d      	mov	r5, r9
 800fb5c:	d10f      	bne.n	800fb7e <_dtoa_r+0xa66>
 800fb5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fb62:	d02a      	beq.n	800fbba <_dtoa_r+0xaa2>
 800fb64:	9b03      	ldr	r3, [sp, #12]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	dd02      	ble.n	800fb70 <_dtoa_r+0xa58>
 800fb6a:	9b02      	ldr	r3, [sp, #8]
 800fb6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fb70:	f88b a000 	strb.w	sl, [fp]
 800fb74:	e775      	b.n	800fa62 <_dtoa_r+0x94a>
 800fb76:	4638      	mov	r0, r7
 800fb78:	e7ba      	b.n	800faf0 <_dtoa_r+0x9d8>
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	e7e2      	b.n	800fb44 <_dtoa_r+0xa2c>
 800fb7e:	9b03      	ldr	r3, [sp, #12]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	db04      	blt.n	800fb8e <_dtoa_r+0xa76>
 800fb84:	9906      	ldr	r1, [sp, #24]
 800fb86:	430b      	orrs	r3, r1
 800fb88:	9904      	ldr	r1, [sp, #16]
 800fb8a:	430b      	orrs	r3, r1
 800fb8c:	d122      	bne.n	800fbd4 <_dtoa_r+0xabc>
 800fb8e:	2a00      	cmp	r2, #0
 800fb90:	ddee      	ble.n	800fb70 <_dtoa_r+0xa58>
 800fb92:	ee18 1a10 	vmov	r1, s16
 800fb96:	2201      	movs	r2, #1
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f000 fea3 	bl	80108e4 <__lshift>
 800fb9e:	4631      	mov	r1, r6
 800fba0:	ee08 0a10 	vmov	s16, r0
 800fba4:	f000 ff0e 	bl	80109c4 <__mcmp>
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	dc03      	bgt.n	800fbb4 <_dtoa_r+0xa9c>
 800fbac:	d1e0      	bne.n	800fb70 <_dtoa_r+0xa58>
 800fbae:	f01a 0f01 	tst.w	sl, #1
 800fbb2:	d0dd      	beq.n	800fb70 <_dtoa_r+0xa58>
 800fbb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fbb8:	d1d7      	bne.n	800fb6a <_dtoa_r+0xa52>
 800fbba:	2339      	movs	r3, #57	; 0x39
 800fbbc:	f88b 3000 	strb.w	r3, [fp]
 800fbc0:	462b      	mov	r3, r5
 800fbc2:	461d      	mov	r5, r3
 800fbc4:	3b01      	subs	r3, #1
 800fbc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fbca:	2a39      	cmp	r2, #57	; 0x39
 800fbcc:	d071      	beq.n	800fcb2 <_dtoa_r+0xb9a>
 800fbce:	3201      	adds	r2, #1
 800fbd0:	701a      	strb	r2, [r3, #0]
 800fbd2:	e746      	b.n	800fa62 <_dtoa_r+0x94a>
 800fbd4:	2a00      	cmp	r2, #0
 800fbd6:	dd07      	ble.n	800fbe8 <_dtoa_r+0xad0>
 800fbd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fbdc:	d0ed      	beq.n	800fbba <_dtoa_r+0xaa2>
 800fbde:	f10a 0301 	add.w	r3, sl, #1
 800fbe2:	f88b 3000 	strb.w	r3, [fp]
 800fbe6:	e73c      	b.n	800fa62 <_dtoa_r+0x94a>
 800fbe8:	9b05      	ldr	r3, [sp, #20]
 800fbea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fbee:	4599      	cmp	r9, r3
 800fbf0:	d047      	beq.n	800fc82 <_dtoa_r+0xb6a>
 800fbf2:	ee18 1a10 	vmov	r1, s16
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	220a      	movs	r2, #10
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	f000 fc78 	bl	80104f0 <__multadd>
 800fc00:	45b8      	cmp	r8, r7
 800fc02:	ee08 0a10 	vmov	s16, r0
 800fc06:	f04f 0300 	mov.w	r3, #0
 800fc0a:	f04f 020a 	mov.w	r2, #10
 800fc0e:	4641      	mov	r1, r8
 800fc10:	4620      	mov	r0, r4
 800fc12:	d106      	bne.n	800fc22 <_dtoa_r+0xb0a>
 800fc14:	f000 fc6c 	bl	80104f0 <__multadd>
 800fc18:	4680      	mov	r8, r0
 800fc1a:	4607      	mov	r7, r0
 800fc1c:	f109 0901 	add.w	r9, r9, #1
 800fc20:	e772      	b.n	800fb08 <_dtoa_r+0x9f0>
 800fc22:	f000 fc65 	bl	80104f0 <__multadd>
 800fc26:	4639      	mov	r1, r7
 800fc28:	4680      	mov	r8, r0
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	220a      	movs	r2, #10
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f000 fc5e 	bl	80104f0 <__multadd>
 800fc34:	4607      	mov	r7, r0
 800fc36:	e7f1      	b.n	800fc1c <_dtoa_r+0xb04>
 800fc38:	9b03      	ldr	r3, [sp, #12]
 800fc3a:	9302      	str	r3, [sp, #8]
 800fc3c:	9d01      	ldr	r5, [sp, #4]
 800fc3e:	ee18 0a10 	vmov	r0, s16
 800fc42:	4631      	mov	r1, r6
 800fc44:	f7ff f9dc 	bl	800f000 <quorem>
 800fc48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fc4c:	9b01      	ldr	r3, [sp, #4]
 800fc4e:	f805 ab01 	strb.w	sl, [r5], #1
 800fc52:	1aea      	subs	r2, r5, r3
 800fc54:	9b02      	ldr	r3, [sp, #8]
 800fc56:	4293      	cmp	r3, r2
 800fc58:	dd09      	ble.n	800fc6e <_dtoa_r+0xb56>
 800fc5a:	ee18 1a10 	vmov	r1, s16
 800fc5e:	2300      	movs	r3, #0
 800fc60:	220a      	movs	r2, #10
 800fc62:	4620      	mov	r0, r4
 800fc64:	f000 fc44 	bl	80104f0 <__multadd>
 800fc68:	ee08 0a10 	vmov	s16, r0
 800fc6c:	e7e7      	b.n	800fc3e <_dtoa_r+0xb26>
 800fc6e:	9b02      	ldr	r3, [sp, #8]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	bfc8      	it	gt
 800fc74:	461d      	movgt	r5, r3
 800fc76:	9b01      	ldr	r3, [sp, #4]
 800fc78:	bfd8      	it	le
 800fc7a:	2501      	movle	r5, #1
 800fc7c:	441d      	add	r5, r3
 800fc7e:	f04f 0800 	mov.w	r8, #0
 800fc82:	ee18 1a10 	vmov	r1, s16
 800fc86:	2201      	movs	r2, #1
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f000 fe2b 	bl	80108e4 <__lshift>
 800fc8e:	4631      	mov	r1, r6
 800fc90:	ee08 0a10 	vmov	s16, r0
 800fc94:	f000 fe96 	bl	80109c4 <__mcmp>
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	dc91      	bgt.n	800fbc0 <_dtoa_r+0xaa8>
 800fc9c:	d102      	bne.n	800fca4 <_dtoa_r+0xb8c>
 800fc9e:	f01a 0f01 	tst.w	sl, #1
 800fca2:	d18d      	bne.n	800fbc0 <_dtoa_r+0xaa8>
 800fca4:	462b      	mov	r3, r5
 800fca6:	461d      	mov	r5, r3
 800fca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcac:	2a30      	cmp	r2, #48	; 0x30
 800fcae:	d0fa      	beq.n	800fca6 <_dtoa_r+0xb8e>
 800fcb0:	e6d7      	b.n	800fa62 <_dtoa_r+0x94a>
 800fcb2:	9a01      	ldr	r2, [sp, #4]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d184      	bne.n	800fbc2 <_dtoa_r+0xaaa>
 800fcb8:	9b00      	ldr	r3, [sp, #0]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	9300      	str	r3, [sp, #0]
 800fcbe:	2331      	movs	r3, #49	; 0x31
 800fcc0:	7013      	strb	r3, [r2, #0]
 800fcc2:	e6ce      	b.n	800fa62 <_dtoa_r+0x94a>
 800fcc4:	4b09      	ldr	r3, [pc, #36]	; (800fcec <_dtoa_r+0xbd4>)
 800fcc6:	f7ff ba95 	b.w	800f1f4 <_dtoa_r+0xdc>
 800fcca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f47f aa6e 	bne.w	800f1ae <_dtoa_r+0x96>
 800fcd2:	4b07      	ldr	r3, [pc, #28]	; (800fcf0 <_dtoa_r+0xbd8>)
 800fcd4:	f7ff ba8e 	b.w	800f1f4 <_dtoa_r+0xdc>
 800fcd8:	9b02      	ldr	r3, [sp, #8]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	dcae      	bgt.n	800fc3c <_dtoa_r+0xb24>
 800fcde:	9b06      	ldr	r3, [sp, #24]
 800fce0:	2b02      	cmp	r3, #2
 800fce2:	f73f aea8 	bgt.w	800fa36 <_dtoa_r+0x91e>
 800fce6:	e7a9      	b.n	800fc3c <_dtoa_r+0xb24>
 800fce8:	08012247 	.word	0x08012247
 800fcec:	08012148 	.word	0x08012148
 800fcf0:	080121c8 	.word	0x080121c8

0800fcf4 <rshift>:
 800fcf4:	6903      	ldr	r3, [r0, #16]
 800fcf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fcfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fd02:	f100 0414 	add.w	r4, r0, #20
 800fd06:	dd45      	ble.n	800fd94 <rshift+0xa0>
 800fd08:	f011 011f 	ands.w	r1, r1, #31
 800fd0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd14:	d10c      	bne.n	800fd30 <rshift+0x3c>
 800fd16:	f100 0710 	add.w	r7, r0, #16
 800fd1a:	4629      	mov	r1, r5
 800fd1c:	42b1      	cmp	r1, r6
 800fd1e:	d334      	bcc.n	800fd8a <rshift+0x96>
 800fd20:	1a9b      	subs	r3, r3, r2
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	1eea      	subs	r2, r5, #3
 800fd26:	4296      	cmp	r6, r2
 800fd28:	bf38      	it	cc
 800fd2a:	2300      	movcc	r3, #0
 800fd2c:	4423      	add	r3, r4
 800fd2e:	e015      	b.n	800fd5c <rshift+0x68>
 800fd30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fd34:	f1c1 0820 	rsb	r8, r1, #32
 800fd38:	40cf      	lsrs	r7, r1
 800fd3a:	f105 0e04 	add.w	lr, r5, #4
 800fd3e:	46a1      	mov	r9, r4
 800fd40:	4576      	cmp	r6, lr
 800fd42:	46f4      	mov	ip, lr
 800fd44:	d815      	bhi.n	800fd72 <rshift+0x7e>
 800fd46:	1a9a      	subs	r2, r3, r2
 800fd48:	0092      	lsls	r2, r2, #2
 800fd4a:	3a04      	subs	r2, #4
 800fd4c:	3501      	adds	r5, #1
 800fd4e:	42ae      	cmp	r6, r5
 800fd50:	bf38      	it	cc
 800fd52:	2200      	movcc	r2, #0
 800fd54:	18a3      	adds	r3, r4, r2
 800fd56:	50a7      	str	r7, [r4, r2]
 800fd58:	b107      	cbz	r7, 800fd5c <rshift+0x68>
 800fd5a:	3304      	adds	r3, #4
 800fd5c:	1b1a      	subs	r2, r3, r4
 800fd5e:	42a3      	cmp	r3, r4
 800fd60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fd64:	bf08      	it	eq
 800fd66:	2300      	moveq	r3, #0
 800fd68:	6102      	str	r2, [r0, #16]
 800fd6a:	bf08      	it	eq
 800fd6c:	6143      	streq	r3, [r0, #20]
 800fd6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd72:	f8dc c000 	ldr.w	ip, [ip]
 800fd76:	fa0c fc08 	lsl.w	ip, ip, r8
 800fd7a:	ea4c 0707 	orr.w	r7, ip, r7
 800fd7e:	f849 7b04 	str.w	r7, [r9], #4
 800fd82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd86:	40cf      	lsrs	r7, r1
 800fd88:	e7da      	b.n	800fd40 <rshift+0x4c>
 800fd8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fd8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fd92:	e7c3      	b.n	800fd1c <rshift+0x28>
 800fd94:	4623      	mov	r3, r4
 800fd96:	e7e1      	b.n	800fd5c <rshift+0x68>

0800fd98 <__hexdig_fun>:
 800fd98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fd9c:	2b09      	cmp	r3, #9
 800fd9e:	d802      	bhi.n	800fda6 <__hexdig_fun+0xe>
 800fda0:	3820      	subs	r0, #32
 800fda2:	b2c0      	uxtb	r0, r0
 800fda4:	4770      	bx	lr
 800fda6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fdaa:	2b05      	cmp	r3, #5
 800fdac:	d801      	bhi.n	800fdb2 <__hexdig_fun+0x1a>
 800fdae:	3847      	subs	r0, #71	; 0x47
 800fdb0:	e7f7      	b.n	800fda2 <__hexdig_fun+0xa>
 800fdb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fdb6:	2b05      	cmp	r3, #5
 800fdb8:	d801      	bhi.n	800fdbe <__hexdig_fun+0x26>
 800fdba:	3827      	subs	r0, #39	; 0x27
 800fdbc:	e7f1      	b.n	800fda2 <__hexdig_fun+0xa>
 800fdbe:	2000      	movs	r0, #0
 800fdc0:	4770      	bx	lr
	...

0800fdc4 <__gethex>:
 800fdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc8:	ed2d 8b02 	vpush	{d8}
 800fdcc:	b089      	sub	sp, #36	; 0x24
 800fdce:	ee08 0a10 	vmov	s16, r0
 800fdd2:	9304      	str	r3, [sp, #16]
 800fdd4:	4bb4      	ldr	r3, [pc, #720]	; (80100a8 <__gethex+0x2e4>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	9301      	str	r3, [sp, #4]
 800fdda:	4618      	mov	r0, r3
 800fddc:	468b      	mov	fp, r1
 800fdde:	4690      	mov	r8, r2
 800fde0:	f7f0 fa28 	bl	8000234 <strlen>
 800fde4:	9b01      	ldr	r3, [sp, #4]
 800fde6:	f8db 2000 	ldr.w	r2, [fp]
 800fdea:	4403      	add	r3, r0
 800fdec:	4682      	mov	sl, r0
 800fdee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fdf2:	9305      	str	r3, [sp, #20]
 800fdf4:	1c93      	adds	r3, r2, #2
 800fdf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fdfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fdfe:	32fe      	adds	r2, #254	; 0xfe
 800fe00:	18d1      	adds	r1, r2, r3
 800fe02:	461f      	mov	r7, r3
 800fe04:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fe08:	9100      	str	r1, [sp, #0]
 800fe0a:	2830      	cmp	r0, #48	; 0x30
 800fe0c:	d0f8      	beq.n	800fe00 <__gethex+0x3c>
 800fe0e:	f7ff ffc3 	bl	800fd98 <__hexdig_fun>
 800fe12:	4604      	mov	r4, r0
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d13a      	bne.n	800fe8e <__gethex+0xca>
 800fe18:	9901      	ldr	r1, [sp, #4]
 800fe1a:	4652      	mov	r2, sl
 800fe1c:	4638      	mov	r0, r7
 800fe1e:	f001 fa33 	bl	8011288 <strncmp>
 800fe22:	4605      	mov	r5, r0
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d168      	bne.n	800fefa <__gethex+0x136>
 800fe28:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fe2c:	eb07 060a 	add.w	r6, r7, sl
 800fe30:	f7ff ffb2 	bl	800fd98 <__hexdig_fun>
 800fe34:	2800      	cmp	r0, #0
 800fe36:	d062      	beq.n	800fefe <__gethex+0x13a>
 800fe38:	4633      	mov	r3, r6
 800fe3a:	7818      	ldrb	r0, [r3, #0]
 800fe3c:	2830      	cmp	r0, #48	; 0x30
 800fe3e:	461f      	mov	r7, r3
 800fe40:	f103 0301 	add.w	r3, r3, #1
 800fe44:	d0f9      	beq.n	800fe3a <__gethex+0x76>
 800fe46:	f7ff ffa7 	bl	800fd98 <__hexdig_fun>
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	fab0 f480 	clz	r4, r0
 800fe50:	0964      	lsrs	r4, r4, #5
 800fe52:	4635      	mov	r5, r6
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	463a      	mov	r2, r7
 800fe58:	4616      	mov	r6, r2
 800fe5a:	3201      	adds	r2, #1
 800fe5c:	7830      	ldrb	r0, [r6, #0]
 800fe5e:	f7ff ff9b 	bl	800fd98 <__hexdig_fun>
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d1f8      	bne.n	800fe58 <__gethex+0x94>
 800fe66:	9901      	ldr	r1, [sp, #4]
 800fe68:	4652      	mov	r2, sl
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	f001 fa0c 	bl	8011288 <strncmp>
 800fe70:	b980      	cbnz	r0, 800fe94 <__gethex+0xd0>
 800fe72:	b94d      	cbnz	r5, 800fe88 <__gethex+0xc4>
 800fe74:	eb06 050a 	add.w	r5, r6, sl
 800fe78:	462a      	mov	r2, r5
 800fe7a:	4616      	mov	r6, r2
 800fe7c:	3201      	adds	r2, #1
 800fe7e:	7830      	ldrb	r0, [r6, #0]
 800fe80:	f7ff ff8a 	bl	800fd98 <__hexdig_fun>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d1f8      	bne.n	800fe7a <__gethex+0xb6>
 800fe88:	1bad      	subs	r5, r5, r6
 800fe8a:	00ad      	lsls	r5, r5, #2
 800fe8c:	e004      	b.n	800fe98 <__gethex+0xd4>
 800fe8e:	2400      	movs	r4, #0
 800fe90:	4625      	mov	r5, r4
 800fe92:	e7e0      	b.n	800fe56 <__gethex+0x92>
 800fe94:	2d00      	cmp	r5, #0
 800fe96:	d1f7      	bne.n	800fe88 <__gethex+0xc4>
 800fe98:	7833      	ldrb	r3, [r6, #0]
 800fe9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fe9e:	2b50      	cmp	r3, #80	; 0x50
 800fea0:	d13b      	bne.n	800ff1a <__gethex+0x156>
 800fea2:	7873      	ldrb	r3, [r6, #1]
 800fea4:	2b2b      	cmp	r3, #43	; 0x2b
 800fea6:	d02c      	beq.n	800ff02 <__gethex+0x13e>
 800fea8:	2b2d      	cmp	r3, #45	; 0x2d
 800feaa:	d02e      	beq.n	800ff0a <__gethex+0x146>
 800feac:	1c71      	adds	r1, r6, #1
 800feae:	f04f 0900 	mov.w	r9, #0
 800feb2:	7808      	ldrb	r0, [r1, #0]
 800feb4:	f7ff ff70 	bl	800fd98 <__hexdig_fun>
 800feb8:	1e43      	subs	r3, r0, #1
 800feba:	b2db      	uxtb	r3, r3
 800febc:	2b18      	cmp	r3, #24
 800febe:	d82c      	bhi.n	800ff1a <__gethex+0x156>
 800fec0:	f1a0 0210 	sub.w	r2, r0, #16
 800fec4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fec8:	f7ff ff66 	bl	800fd98 <__hexdig_fun>
 800fecc:	1e43      	subs	r3, r0, #1
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	2b18      	cmp	r3, #24
 800fed2:	d91d      	bls.n	800ff10 <__gethex+0x14c>
 800fed4:	f1b9 0f00 	cmp.w	r9, #0
 800fed8:	d000      	beq.n	800fedc <__gethex+0x118>
 800feda:	4252      	negs	r2, r2
 800fedc:	4415      	add	r5, r2
 800fede:	f8cb 1000 	str.w	r1, [fp]
 800fee2:	b1e4      	cbz	r4, 800ff1e <__gethex+0x15a>
 800fee4:	9b00      	ldr	r3, [sp, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	bf14      	ite	ne
 800feea:	2700      	movne	r7, #0
 800feec:	2706      	moveq	r7, #6
 800feee:	4638      	mov	r0, r7
 800fef0:	b009      	add	sp, #36	; 0x24
 800fef2:	ecbd 8b02 	vpop	{d8}
 800fef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefa:	463e      	mov	r6, r7
 800fefc:	4625      	mov	r5, r4
 800fefe:	2401      	movs	r4, #1
 800ff00:	e7ca      	b.n	800fe98 <__gethex+0xd4>
 800ff02:	f04f 0900 	mov.w	r9, #0
 800ff06:	1cb1      	adds	r1, r6, #2
 800ff08:	e7d3      	b.n	800feb2 <__gethex+0xee>
 800ff0a:	f04f 0901 	mov.w	r9, #1
 800ff0e:	e7fa      	b.n	800ff06 <__gethex+0x142>
 800ff10:	230a      	movs	r3, #10
 800ff12:	fb03 0202 	mla	r2, r3, r2, r0
 800ff16:	3a10      	subs	r2, #16
 800ff18:	e7d4      	b.n	800fec4 <__gethex+0x100>
 800ff1a:	4631      	mov	r1, r6
 800ff1c:	e7df      	b.n	800fede <__gethex+0x11a>
 800ff1e:	1bf3      	subs	r3, r6, r7
 800ff20:	3b01      	subs	r3, #1
 800ff22:	4621      	mov	r1, r4
 800ff24:	2b07      	cmp	r3, #7
 800ff26:	dc0b      	bgt.n	800ff40 <__gethex+0x17c>
 800ff28:	ee18 0a10 	vmov	r0, s16
 800ff2c:	f000 fa7e 	bl	801042c <_Balloc>
 800ff30:	4604      	mov	r4, r0
 800ff32:	b940      	cbnz	r0, 800ff46 <__gethex+0x182>
 800ff34:	4b5d      	ldr	r3, [pc, #372]	; (80100ac <__gethex+0x2e8>)
 800ff36:	4602      	mov	r2, r0
 800ff38:	21de      	movs	r1, #222	; 0xde
 800ff3a:	485d      	ldr	r0, [pc, #372]	; (80100b0 <__gethex+0x2ec>)
 800ff3c:	f001 f9c6 	bl	80112cc <__assert_func>
 800ff40:	3101      	adds	r1, #1
 800ff42:	105b      	asrs	r3, r3, #1
 800ff44:	e7ee      	b.n	800ff24 <__gethex+0x160>
 800ff46:	f100 0914 	add.w	r9, r0, #20
 800ff4a:	f04f 0b00 	mov.w	fp, #0
 800ff4e:	f1ca 0301 	rsb	r3, sl, #1
 800ff52:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff56:	f8cd b000 	str.w	fp, [sp]
 800ff5a:	9306      	str	r3, [sp, #24]
 800ff5c:	42b7      	cmp	r7, r6
 800ff5e:	d340      	bcc.n	800ffe2 <__gethex+0x21e>
 800ff60:	9802      	ldr	r0, [sp, #8]
 800ff62:	9b00      	ldr	r3, [sp, #0]
 800ff64:	f840 3b04 	str.w	r3, [r0], #4
 800ff68:	eba0 0009 	sub.w	r0, r0, r9
 800ff6c:	1080      	asrs	r0, r0, #2
 800ff6e:	0146      	lsls	r6, r0, #5
 800ff70:	6120      	str	r0, [r4, #16]
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 fb4c 	bl	8010610 <__hi0bits>
 800ff78:	1a30      	subs	r0, r6, r0
 800ff7a:	f8d8 6000 	ldr.w	r6, [r8]
 800ff7e:	42b0      	cmp	r0, r6
 800ff80:	dd63      	ble.n	801004a <__gethex+0x286>
 800ff82:	1b87      	subs	r7, r0, r6
 800ff84:	4639      	mov	r1, r7
 800ff86:	4620      	mov	r0, r4
 800ff88:	f000 fef0 	bl	8010d6c <__any_on>
 800ff8c:	4682      	mov	sl, r0
 800ff8e:	b1a8      	cbz	r0, 800ffbc <__gethex+0x1f8>
 800ff90:	1e7b      	subs	r3, r7, #1
 800ff92:	1159      	asrs	r1, r3, #5
 800ff94:	f003 021f 	and.w	r2, r3, #31
 800ff98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ff9c:	f04f 0a01 	mov.w	sl, #1
 800ffa0:	fa0a f202 	lsl.w	r2, sl, r2
 800ffa4:	420a      	tst	r2, r1
 800ffa6:	d009      	beq.n	800ffbc <__gethex+0x1f8>
 800ffa8:	4553      	cmp	r3, sl
 800ffaa:	dd05      	ble.n	800ffb8 <__gethex+0x1f4>
 800ffac:	1eb9      	subs	r1, r7, #2
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 fedc 	bl	8010d6c <__any_on>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	d145      	bne.n	8010044 <__gethex+0x280>
 800ffb8:	f04f 0a02 	mov.w	sl, #2
 800ffbc:	4639      	mov	r1, r7
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f7ff fe98 	bl	800fcf4 <rshift>
 800ffc4:	443d      	add	r5, r7
 800ffc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffca:	42ab      	cmp	r3, r5
 800ffcc:	da4c      	bge.n	8010068 <__gethex+0x2a4>
 800ffce:	ee18 0a10 	vmov	r0, s16
 800ffd2:	4621      	mov	r1, r4
 800ffd4:	f000 fa6a 	bl	80104ac <_Bfree>
 800ffd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ffda:	2300      	movs	r3, #0
 800ffdc:	6013      	str	r3, [r2, #0]
 800ffde:	27a3      	movs	r7, #163	; 0xa3
 800ffe0:	e785      	b.n	800feee <__gethex+0x12a>
 800ffe2:	1e73      	subs	r3, r6, #1
 800ffe4:	9a05      	ldr	r2, [sp, #20]
 800ffe6:	9303      	str	r3, [sp, #12]
 800ffe8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d019      	beq.n	8010024 <__gethex+0x260>
 800fff0:	f1bb 0f20 	cmp.w	fp, #32
 800fff4:	d107      	bne.n	8010006 <__gethex+0x242>
 800fff6:	9b02      	ldr	r3, [sp, #8]
 800fff8:	9a00      	ldr	r2, [sp, #0]
 800fffa:	f843 2b04 	str.w	r2, [r3], #4
 800fffe:	9302      	str	r3, [sp, #8]
 8010000:	2300      	movs	r3, #0
 8010002:	9300      	str	r3, [sp, #0]
 8010004:	469b      	mov	fp, r3
 8010006:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801000a:	f7ff fec5 	bl	800fd98 <__hexdig_fun>
 801000e:	9b00      	ldr	r3, [sp, #0]
 8010010:	f000 000f 	and.w	r0, r0, #15
 8010014:	fa00 f00b 	lsl.w	r0, r0, fp
 8010018:	4303      	orrs	r3, r0
 801001a:	9300      	str	r3, [sp, #0]
 801001c:	f10b 0b04 	add.w	fp, fp, #4
 8010020:	9b03      	ldr	r3, [sp, #12]
 8010022:	e00d      	b.n	8010040 <__gethex+0x27c>
 8010024:	9b03      	ldr	r3, [sp, #12]
 8010026:	9a06      	ldr	r2, [sp, #24]
 8010028:	4413      	add	r3, r2
 801002a:	42bb      	cmp	r3, r7
 801002c:	d3e0      	bcc.n	800fff0 <__gethex+0x22c>
 801002e:	4618      	mov	r0, r3
 8010030:	9901      	ldr	r1, [sp, #4]
 8010032:	9307      	str	r3, [sp, #28]
 8010034:	4652      	mov	r2, sl
 8010036:	f001 f927 	bl	8011288 <strncmp>
 801003a:	9b07      	ldr	r3, [sp, #28]
 801003c:	2800      	cmp	r0, #0
 801003e:	d1d7      	bne.n	800fff0 <__gethex+0x22c>
 8010040:	461e      	mov	r6, r3
 8010042:	e78b      	b.n	800ff5c <__gethex+0x198>
 8010044:	f04f 0a03 	mov.w	sl, #3
 8010048:	e7b8      	b.n	800ffbc <__gethex+0x1f8>
 801004a:	da0a      	bge.n	8010062 <__gethex+0x29e>
 801004c:	1a37      	subs	r7, r6, r0
 801004e:	4621      	mov	r1, r4
 8010050:	ee18 0a10 	vmov	r0, s16
 8010054:	463a      	mov	r2, r7
 8010056:	f000 fc45 	bl	80108e4 <__lshift>
 801005a:	1bed      	subs	r5, r5, r7
 801005c:	4604      	mov	r4, r0
 801005e:	f100 0914 	add.w	r9, r0, #20
 8010062:	f04f 0a00 	mov.w	sl, #0
 8010066:	e7ae      	b.n	800ffc6 <__gethex+0x202>
 8010068:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801006c:	42a8      	cmp	r0, r5
 801006e:	dd72      	ble.n	8010156 <__gethex+0x392>
 8010070:	1b45      	subs	r5, r0, r5
 8010072:	42ae      	cmp	r6, r5
 8010074:	dc36      	bgt.n	80100e4 <__gethex+0x320>
 8010076:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801007a:	2b02      	cmp	r3, #2
 801007c:	d02a      	beq.n	80100d4 <__gethex+0x310>
 801007e:	2b03      	cmp	r3, #3
 8010080:	d02c      	beq.n	80100dc <__gethex+0x318>
 8010082:	2b01      	cmp	r3, #1
 8010084:	d11c      	bne.n	80100c0 <__gethex+0x2fc>
 8010086:	42ae      	cmp	r6, r5
 8010088:	d11a      	bne.n	80100c0 <__gethex+0x2fc>
 801008a:	2e01      	cmp	r6, #1
 801008c:	d112      	bne.n	80100b4 <__gethex+0x2f0>
 801008e:	9a04      	ldr	r2, [sp, #16]
 8010090:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010094:	6013      	str	r3, [r2, #0]
 8010096:	2301      	movs	r3, #1
 8010098:	6123      	str	r3, [r4, #16]
 801009a:	f8c9 3000 	str.w	r3, [r9]
 801009e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100a0:	2762      	movs	r7, #98	; 0x62
 80100a2:	601c      	str	r4, [r3, #0]
 80100a4:	e723      	b.n	800feee <__gethex+0x12a>
 80100a6:	bf00      	nop
 80100a8:	080122c0 	.word	0x080122c0
 80100ac:	08012247 	.word	0x08012247
 80100b0:	08012258 	.word	0x08012258
 80100b4:	1e71      	subs	r1, r6, #1
 80100b6:	4620      	mov	r0, r4
 80100b8:	f000 fe58 	bl	8010d6c <__any_on>
 80100bc:	2800      	cmp	r0, #0
 80100be:	d1e6      	bne.n	801008e <__gethex+0x2ca>
 80100c0:	ee18 0a10 	vmov	r0, s16
 80100c4:	4621      	mov	r1, r4
 80100c6:	f000 f9f1 	bl	80104ac <_Bfree>
 80100ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100cc:	2300      	movs	r3, #0
 80100ce:	6013      	str	r3, [r2, #0]
 80100d0:	2750      	movs	r7, #80	; 0x50
 80100d2:	e70c      	b.n	800feee <__gethex+0x12a>
 80100d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1f2      	bne.n	80100c0 <__gethex+0x2fc>
 80100da:	e7d8      	b.n	801008e <__gethex+0x2ca>
 80100dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d1d5      	bne.n	801008e <__gethex+0x2ca>
 80100e2:	e7ed      	b.n	80100c0 <__gethex+0x2fc>
 80100e4:	1e6f      	subs	r7, r5, #1
 80100e6:	f1ba 0f00 	cmp.w	sl, #0
 80100ea:	d131      	bne.n	8010150 <__gethex+0x38c>
 80100ec:	b127      	cbz	r7, 80100f8 <__gethex+0x334>
 80100ee:	4639      	mov	r1, r7
 80100f0:	4620      	mov	r0, r4
 80100f2:	f000 fe3b 	bl	8010d6c <__any_on>
 80100f6:	4682      	mov	sl, r0
 80100f8:	117b      	asrs	r3, r7, #5
 80100fa:	2101      	movs	r1, #1
 80100fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010100:	f007 071f 	and.w	r7, r7, #31
 8010104:	fa01 f707 	lsl.w	r7, r1, r7
 8010108:	421f      	tst	r7, r3
 801010a:	4629      	mov	r1, r5
 801010c:	4620      	mov	r0, r4
 801010e:	bf18      	it	ne
 8010110:	f04a 0a02 	orrne.w	sl, sl, #2
 8010114:	1b76      	subs	r6, r6, r5
 8010116:	f7ff fded 	bl	800fcf4 <rshift>
 801011a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801011e:	2702      	movs	r7, #2
 8010120:	f1ba 0f00 	cmp.w	sl, #0
 8010124:	d048      	beq.n	80101b8 <__gethex+0x3f4>
 8010126:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801012a:	2b02      	cmp	r3, #2
 801012c:	d015      	beq.n	801015a <__gethex+0x396>
 801012e:	2b03      	cmp	r3, #3
 8010130:	d017      	beq.n	8010162 <__gethex+0x39e>
 8010132:	2b01      	cmp	r3, #1
 8010134:	d109      	bne.n	801014a <__gethex+0x386>
 8010136:	f01a 0f02 	tst.w	sl, #2
 801013a:	d006      	beq.n	801014a <__gethex+0x386>
 801013c:	f8d9 0000 	ldr.w	r0, [r9]
 8010140:	ea4a 0a00 	orr.w	sl, sl, r0
 8010144:	f01a 0f01 	tst.w	sl, #1
 8010148:	d10e      	bne.n	8010168 <__gethex+0x3a4>
 801014a:	f047 0710 	orr.w	r7, r7, #16
 801014e:	e033      	b.n	80101b8 <__gethex+0x3f4>
 8010150:	f04f 0a01 	mov.w	sl, #1
 8010154:	e7d0      	b.n	80100f8 <__gethex+0x334>
 8010156:	2701      	movs	r7, #1
 8010158:	e7e2      	b.n	8010120 <__gethex+0x35c>
 801015a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801015c:	f1c3 0301 	rsb	r3, r3, #1
 8010160:	9315      	str	r3, [sp, #84]	; 0x54
 8010162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010164:	2b00      	cmp	r3, #0
 8010166:	d0f0      	beq.n	801014a <__gethex+0x386>
 8010168:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801016c:	f104 0314 	add.w	r3, r4, #20
 8010170:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010174:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010178:	f04f 0c00 	mov.w	ip, #0
 801017c:	4618      	mov	r0, r3
 801017e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010182:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8010186:	d01c      	beq.n	80101c2 <__gethex+0x3fe>
 8010188:	3201      	adds	r2, #1
 801018a:	6002      	str	r2, [r0, #0]
 801018c:	2f02      	cmp	r7, #2
 801018e:	f104 0314 	add.w	r3, r4, #20
 8010192:	d13f      	bne.n	8010214 <__gethex+0x450>
 8010194:	f8d8 2000 	ldr.w	r2, [r8]
 8010198:	3a01      	subs	r2, #1
 801019a:	42b2      	cmp	r2, r6
 801019c:	d10a      	bne.n	80101b4 <__gethex+0x3f0>
 801019e:	1171      	asrs	r1, r6, #5
 80101a0:	2201      	movs	r2, #1
 80101a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80101a6:	f006 061f 	and.w	r6, r6, #31
 80101aa:	fa02 f606 	lsl.w	r6, r2, r6
 80101ae:	421e      	tst	r6, r3
 80101b0:	bf18      	it	ne
 80101b2:	4617      	movne	r7, r2
 80101b4:	f047 0720 	orr.w	r7, r7, #32
 80101b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101ba:	601c      	str	r4, [r3, #0]
 80101bc:	9b04      	ldr	r3, [sp, #16]
 80101be:	601d      	str	r5, [r3, #0]
 80101c0:	e695      	b.n	800feee <__gethex+0x12a>
 80101c2:	4299      	cmp	r1, r3
 80101c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80101c8:	d8d8      	bhi.n	801017c <__gethex+0x3b8>
 80101ca:	68a3      	ldr	r3, [r4, #8]
 80101cc:	459b      	cmp	fp, r3
 80101ce:	db19      	blt.n	8010204 <__gethex+0x440>
 80101d0:	6861      	ldr	r1, [r4, #4]
 80101d2:	ee18 0a10 	vmov	r0, s16
 80101d6:	3101      	adds	r1, #1
 80101d8:	f000 f928 	bl	801042c <_Balloc>
 80101dc:	4681      	mov	r9, r0
 80101de:	b918      	cbnz	r0, 80101e8 <__gethex+0x424>
 80101e0:	4b1a      	ldr	r3, [pc, #104]	; (801024c <__gethex+0x488>)
 80101e2:	4602      	mov	r2, r0
 80101e4:	2184      	movs	r1, #132	; 0x84
 80101e6:	e6a8      	b.n	800ff3a <__gethex+0x176>
 80101e8:	6922      	ldr	r2, [r4, #16]
 80101ea:	3202      	adds	r2, #2
 80101ec:	f104 010c 	add.w	r1, r4, #12
 80101f0:	0092      	lsls	r2, r2, #2
 80101f2:	300c      	adds	r0, #12
 80101f4:	f000 f90c 	bl	8010410 <memcpy>
 80101f8:	4621      	mov	r1, r4
 80101fa:	ee18 0a10 	vmov	r0, s16
 80101fe:	f000 f955 	bl	80104ac <_Bfree>
 8010202:	464c      	mov	r4, r9
 8010204:	6923      	ldr	r3, [r4, #16]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801020c:	6122      	str	r2, [r4, #16]
 801020e:	2201      	movs	r2, #1
 8010210:	615a      	str	r2, [r3, #20]
 8010212:	e7bb      	b.n	801018c <__gethex+0x3c8>
 8010214:	6922      	ldr	r2, [r4, #16]
 8010216:	455a      	cmp	r2, fp
 8010218:	dd0b      	ble.n	8010232 <__gethex+0x46e>
 801021a:	2101      	movs	r1, #1
 801021c:	4620      	mov	r0, r4
 801021e:	f7ff fd69 	bl	800fcf4 <rshift>
 8010222:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010226:	3501      	adds	r5, #1
 8010228:	42ab      	cmp	r3, r5
 801022a:	f6ff aed0 	blt.w	800ffce <__gethex+0x20a>
 801022e:	2701      	movs	r7, #1
 8010230:	e7c0      	b.n	80101b4 <__gethex+0x3f0>
 8010232:	f016 061f 	ands.w	r6, r6, #31
 8010236:	d0fa      	beq.n	801022e <__gethex+0x46a>
 8010238:	4453      	add	r3, sl
 801023a:	f1c6 0620 	rsb	r6, r6, #32
 801023e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010242:	f000 f9e5 	bl	8010610 <__hi0bits>
 8010246:	42b0      	cmp	r0, r6
 8010248:	dbe7      	blt.n	801021a <__gethex+0x456>
 801024a:	e7f0      	b.n	801022e <__gethex+0x46a>
 801024c:	08012247 	.word	0x08012247

08010250 <L_shift>:
 8010250:	f1c2 0208 	rsb	r2, r2, #8
 8010254:	0092      	lsls	r2, r2, #2
 8010256:	b570      	push	{r4, r5, r6, lr}
 8010258:	f1c2 0620 	rsb	r6, r2, #32
 801025c:	6843      	ldr	r3, [r0, #4]
 801025e:	6804      	ldr	r4, [r0, #0]
 8010260:	fa03 f506 	lsl.w	r5, r3, r6
 8010264:	432c      	orrs	r4, r5
 8010266:	40d3      	lsrs	r3, r2
 8010268:	6004      	str	r4, [r0, #0]
 801026a:	f840 3f04 	str.w	r3, [r0, #4]!
 801026e:	4288      	cmp	r0, r1
 8010270:	d3f4      	bcc.n	801025c <L_shift+0xc>
 8010272:	bd70      	pop	{r4, r5, r6, pc}

08010274 <__match>:
 8010274:	b530      	push	{r4, r5, lr}
 8010276:	6803      	ldr	r3, [r0, #0]
 8010278:	3301      	adds	r3, #1
 801027a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801027e:	b914      	cbnz	r4, 8010286 <__match+0x12>
 8010280:	6003      	str	r3, [r0, #0]
 8010282:	2001      	movs	r0, #1
 8010284:	bd30      	pop	{r4, r5, pc}
 8010286:	f813 2b01 	ldrb.w	r2, [r3], #1
 801028a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801028e:	2d19      	cmp	r5, #25
 8010290:	bf98      	it	ls
 8010292:	3220      	addls	r2, #32
 8010294:	42a2      	cmp	r2, r4
 8010296:	d0f0      	beq.n	801027a <__match+0x6>
 8010298:	2000      	movs	r0, #0
 801029a:	e7f3      	b.n	8010284 <__match+0x10>

0801029c <__hexnan>:
 801029c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a0:	680b      	ldr	r3, [r1, #0]
 80102a2:	115e      	asrs	r6, r3, #5
 80102a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80102a8:	f013 031f 	ands.w	r3, r3, #31
 80102ac:	b087      	sub	sp, #28
 80102ae:	bf18      	it	ne
 80102b0:	3604      	addne	r6, #4
 80102b2:	2500      	movs	r5, #0
 80102b4:	1f37      	subs	r7, r6, #4
 80102b6:	4690      	mov	r8, r2
 80102b8:	6802      	ldr	r2, [r0, #0]
 80102ba:	9301      	str	r3, [sp, #4]
 80102bc:	4682      	mov	sl, r0
 80102be:	f846 5c04 	str.w	r5, [r6, #-4]
 80102c2:	46b9      	mov	r9, r7
 80102c4:	463c      	mov	r4, r7
 80102c6:	9502      	str	r5, [sp, #8]
 80102c8:	46ab      	mov	fp, r5
 80102ca:	7851      	ldrb	r1, [r2, #1]
 80102cc:	1c53      	adds	r3, r2, #1
 80102ce:	9303      	str	r3, [sp, #12]
 80102d0:	b341      	cbz	r1, 8010324 <__hexnan+0x88>
 80102d2:	4608      	mov	r0, r1
 80102d4:	9205      	str	r2, [sp, #20]
 80102d6:	9104      	str	r1, [sp, #16]
 80102d8:	f7ff fd5e 	bl	800fd98 <__hexdig_fun>
 80102dc:	2800      	cmp	r0, #0
 80102de:	d14f      	bne.n	8010380 <__hexnan+0xe4>
 80102e0:	9904      	ldr	r1, [sp, #16]
 80102e2:	9a05      	ldr	r2, [sp, #20]
 80102e4:	2920      	cmp	r1, #32
 80102e6:	d818      	bhi.n	801031a <__hexnan+0x7e>
 80102e8:	9b02      	ldr	r3, [sp, #8]
 80102ea:	459b      	cmp	fp, r3
 80102ec:	dd13      	ble.n	8010316 <__hexnan+0x7a>
 80102ee:	454c      	cmp	r4, r9
 80102f0:	d206      	bcs.n	8010300 <__hexnan+0x64>
 80102f2:	2d07      	cmp	r5, #7
 80102f4:	dc04      	bgt.n	8010300 <__hexnan+0x64>
 80102f6:	462a      	mov	r2, r5
 80102f8:	4649      	mov	r1, r9
 80102fa:	4620      	mov	r0, r4
 80102fc:	f7ff ffa8 	bl	8010250 <L_shift>
 8010300:	4544      	cmp	r4, r8
 8010302:	d950      	bls.n	80103a6 <__hexnan+0x10a>
 8010304:	2300      	movs	r3, #0
 8010306:	f1a4 0904 	sub.w	r9, r4, #4
 801030a:	f844 3c04 	str.w	r3, [r4, #-4]
 801030e:	f8cd b008 	str.w	fp, [sp, #8]
 8010312:	464c      	mov	r4, r9
 8010314:	461d      	mov	r5, r3
 8010316:	9a03      	ldr	r2, [sp, #12]
 8010318:	e7d7      	b.n	80102ca <__hexnan+0x2e>
 801031a:	2929      	cmp	r1, #41	; 0x29
 801031c:	d156      	bne.n	80103cc <__hexnan+0x130>
 801031e:	3202      	adds	r2, #2
 8010320:	f8ca 2000 	str.w	r2, [sl]
 8010324:	f1bb 0f00 	cmp.w	fp, #0
 8010328:	d050      	beq.n	80103cc <__hexnan+0x130>
 801032a:	454c      	cmp	r4, r9
 801032c:	d206      	bcs.n	801033c <__hexnan+0xa0>
 801032e:	2d07      	cmp	r5, #7
 8010330:	dc04      	bgt.n	801033c <__hexnan+0xa0>
 8010332:	462a      	mov	r2, r5
 8010334:	4649      	mov	r1, r9
 8010336:	4620      	mov	r0, r4
 8010338:	f7ff ff8a 	bl	8010250 <L_shift>
 801033c:	4544      	cmp	r4, r8
 801033e:	d934      	bls.n	80103aa <__hexnan+0x10e>
 8010340:	f1a8 0204 	sub.w	r2, r8, #4
 8010344:	4623      	mov	r3, r4
 8010346:	f853 1b04 	ldr.w	r1, [r3], #4
 801034a:	f842 1f04 	str.w	r1, [r2, #4]!
 801034e:	429f      	cmp	r7, r3
 8010350:	d2f9      	bcs.n	8010346 <__hexnan+0xaa>
 8010352:	1b3b      	subs	r3, r7, r4
 8010354:	f023 0303 	bic.w	r3, r3, #3
 8010358:	3304      	adds	r3, #4
 801035a:	3401      	adds	r4, #1
 801035c:	3e03      	subs	r6, #3
 801035e:	42b4      	cmp	r4, r6
 8010360:	bf88      	it	hi
 8010362:	2304      	movhi	r3, #4
 8010364:	4443      	add	r3, r8
 8010366:	2200      	movs	r2, #0
 8010368:	f843 2b04 	str.w	r2, [r3], #4
 801036c:	429f      	cmp	r7, r3
 801036e:	d2fb      	bcs.n	8010368 <__hexnan+0xcc>
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	b91b      	cbnz	r3, 801037c <__hexnan+0xe0>
 8010374:	4547      	cmp	r7, r8
 8010376:	d127      	bne.n	80103c8 <__hexnan+0x12c>
 8010378:	2301      	movs	r3, #1
 801037a:	603b      	str	r3, [r7, #0]
 801037c:	2005      	movs	r0, #5
 801037e:	e026      	b.n	80103ce <__hexnan+0x132>
 8010380:	3501      	adds	r5, #1
 8010382:	2d08      	cmp	r5, #8
 8010384:	f10b 0b01 	add.w	fp, fp, #1
 8010388:	dd06      	ble.n	8010398 <__hexnan+0xfc>
 801038a:	4544      	cmp	r4, r8
 801038c:	d9c3      	bls.n	8010316 <__hexnan+0x7a>
 801038e:	2300      	movs	r3, #0
 8010390:	f844 3c04 	str.w	r3, [r4, #-4]
 8010394:	2501      	movs	r5, #1
 8010396:	3c04      	subs	r4, #4
 8010398:	6822      	ldr	r2, [r4, #0]
 801039a:	f000 000f 	and.w	r0, r0, #15
 801039e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80103a2:	6022      	str	r2, [r4, #0]
 80103a4:	e7b7      	b.n	8010316 <__hexnan+0x7a>
 80103a6:	2508      	movs	r5, #8
 80103a8:	e7b5      	b.n	8010316 <__hexnan+0x7a>
 80103aa:	9b01      	ldr	r3, [sp, #4]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d0df      	beq.n	8010370 <__hexnan+0xd4>
 80103b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103b4:	f1c3 0320 	rsb	r3, r3, #32
 80103b8:	fa22 f303 	lsr.w	r3, r2, r3
 80103bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80103c0:	401a      	ands	r2, r3
 80103c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80103c6:	e7d3      	b.n	8010370 <__hexnan+0xd4>
 80103c8:	3f04      	subs	r7, #4
 80103ca:	e7d1      	b.n	8010370 <__hexnan+0xd4>
 80103cc:	2004      	movs	r0, #4
 80103ce:	b007      	add	sp, #28
 80103d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103d4 <_localeconv_r>:
 80103d4:	4800      	ldr	r0, [pc, #0]	; (80103d8 <_localeconv_r+0x4>)
 80103d6:	4770      	bx	lr
 80103d8:	20000168 	.word	0x20000168

080103dc <malloc>:
 80103dc:	4b02      	ldr	r3, [pc, #8]	; (80103e8 <malloc+0xc>)
 80103de:	4601      	mov	r1, r0
 80103e0:	6818      	ldr	r0, [r3, #0]
 80103e2:	f000 bd67 	b.w	8010eb4 <_malloc_r>
 80103e6:	bf00      	nop
 80103e8:	20000010 	.word	0x20000010

080103ec <__ascii_mbtowc>:
 80103ec:	b082      	sub	sp, #8
 80103ee:	b901      	cbnz	r1, 80103f2 <__ascii_mbtowc+0x6>
 80103f0:	a901      	add	r1, sp, #4
 80103f2:	b142      	cbz	r2, 8010406 <__ascii_mbtowc+0x1a>
 80103f4:	b14b      	cbz	r3, 801040a <__ascii_mbtowc+0x1e>
 80103f6:	7813      	ldrb	r3, [r2, #0]
 80103f8:	600b      	str	r3, [r1, #0]
 80103fa:	7812      	ldrb	r2, [r2, #0]
 80103fc:	1e10      	subs	r0, r2, #0
 80103fe:	bf18      	it	ne
 8010400:	2001      	movne	r0, #1
 8010402:	b002      	add	sp, #8
 8010404:	4770      	bx	lr
 8010406:	4610      	mov	r0, r2
 8010408:	e7fb      	b.n	8010402 <__ascii_mbtowc+0x16>
 801040a:	f06f 0001 	mvn.w	r0, #1
 801040e:	e7f8      	b.n	8010402 <__ascii_mbtowc+0x16>

08010410 <memcpy>:
 8010410:	440a      	add	r2, r1
 8010412:	4291      	cmp	r1, r2
 8010414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010418:	d100      	bne.n	801041c <memcpy+0xc>
 801041a:	4770      	bx	lr
 801041c:	b510      	push	{r4, lr}
 801041e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010426:	4291      	cmp	r1, r2
 8010428:	d1f9      	bne.n	801041e <memcpy+0xe>
 801042a:	bd10      	pop	{r4, pc}

0801042c <_Balloc>:
 801042c:	b570      	push	{r4, r5, r6, lr}
 801042e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010430:	4604      	mov	r4, r0
 8010432:	460d      	mov	r5, r1
 8010434:	b976      	cbnz	r6, 8010454 <_Balloc+0x28>
 8010436:	2010      	movs	r0, #16
 8010438:	f7ff ffd0 	bl	80103dc <malloc>
 801043c:	4602      	mov	r2, r0
 801043e:	6260      	str	r0, [r4, #36]	; 0x24
 8010440:	b920      	cbnz	r0, 801044c <_Balloc+0x20>
 8010442:	4b18      	ldr	r3, [pc, #96]	; (80104a4 <_Balloc+0x78>)
 8010444:	4818      	ldr	r0, [pc, #96]	; (80104a8 <_Balloc+0x7c>)
 8010446:	2166      	movs	r1, #102	; 0x66
 8010448:	f000 ff40 	bl	80112cc <__assert_func>
 801044c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010450:	6006      	str	r6, [r0, #0]
 8010452:	60c6      	str	r6, [r0, #12]
 8010454:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010456:	68f3      	ldr	r3, [r6, #12]
 8010458:	b183      	cbz	r3, 801047c <_Balloc+0x50>
 801045a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010462:	b9b8      	cbnz	r0, 8010494 <_Balloc+0x68>
 8010464:	2101      	movs	r1, #1
 8010466:	fa01 f605 	lsl.w	r6, r1, r5
 801046a:	1d72      	adds	r2, r6, #5
 801046c:	0092      	lsls	r2, r2, #2
 801046e:	4620      	mov	r0, r4
 8010470:	f000 fc9d 	bl	8010dae <_calloc_r>
 8010474:	b160      	cbz	r0, 8010490 <_Balloc+0x64>
 8010476:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801047a:	e00e      	b.n	801049a <_Balloc+0x6e>
 801047c:	2221      	movs	r2, #33	; 0x21
 801047e:	2104      	movs	r1, #4
 8010480:	4620      	mov	r0, r4
 8010482:	f000 fc94 	bl	8010dae <_calloc_r>
 8010486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010488:	60f0      	str	r0, [r6, #12]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1e4      	bne.n	801045a <_Balloc+0x2e>
 8010490:	2000      	movs	r0, #0
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	6802      	ldr	r2, [r0, #0]
 8010496:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801049a:	2300      	movs	r3, #0
 801049c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80104a0:	e7f7      	b.n	8010492 <_Balloc+0x66>
 80104a2:	bf00      	nop
 80104a4:	080121d5 	.word	0x080121d5
 80104a8:	080122d4 	.word	0x080122d4

080104ac <_Bfree>:
 80104ac:	b570      	push	{r4, r5, r6, lr}
 80104ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104b0:	4605      	mov	r5, r0
 80104b2:	460c      	mov	r4, r1
 80104b4:	b976      	cbnz	r6, 80104d4 <_Bfree+0x28>
 80104b6:	2010      	movs	r0, #16
 80104b8:	f7ff ff90 	bl	80103dc <malloc>
 80104bc:	4602      	mov	r2, r0
 80104be:	6268      	str	r0, [r5, #36]	; 0x24
 80104c0:	b920      	cbnz	r0, 80104cc <_Bfree+0x20>
 80104c2:	4b09      	ldr	r3, [pc, #36]	; (80104e8 <_Bfree+0x3c>)
 80104c4:	4809      	ldr	r0, [pc, #36]	; (80104ec <_Bfree+0x40>)
 80104c6:	218a      	movs	r1, #138	; 0x8a
 80104c8:	f000 ff00 	bl	80112cc <__assert_func>
 80104cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104d0:	6006      	str	r6, [r0, #0]
 80104d2:	60c6      	str	r6, [r0, #12]
 80104d4:	b13c      	cbz	r4, 80104e6 <_Bfree+0x3a>
 80104d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104d8:	6862      	ldr	r2, [r4, #4]
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104e0:	6021      	str	r1, [r4, #0]
 80104e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80104e6:	bd70      	pop	{r4, r5, r6, pc}
 80104e8:	080121d5 	.word	0x080121d5
 80104ec:	080122d4 	.word	0x080122d4

080104f0 <__multadd>:
 80104f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f4:	690d      	ldr	r5, [r1, #16]
 80104f6:	4607      	mov	r7, r0
 80104f8:	460c      	mov	r4, r1
 80104fa:	461e      	mov	r6, r3
 80104fc:	f101 0c14 	add.w	ip, r1, #20
 8010500:	2000      	movs	r0, #0
 8010502:	f8dc 3000 	ldr.w	r3, [ip]
 8010506:	b299      	uxth	r1, r3
 8010508:	fb02 6101 	mla	r1, r2, r1, r6
 801050c:	0c1e      	lsrs	r6, r3, #16
 801050e:	0c0b      	lsrs	r3, r1, #16
 8010510:	fb02 3306 	mla	r3, r2, r6, r3
 8010514:	b289      	uxth	r1, r1
 8010516:	3001      	adds	r0, #1
 8010518:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801051c:	4285      	cmp	r5, r0
 801051e:	f84c 1b04 	str.w	r1, [ip], #4
 8010522:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010526:	dcec      	bgt.n	8010502 <__multadd+0x12>
 8010528:	b30e      	cbz	r6, 801056e <__multadd+0x7e>
 801052a:	68a3      	ldr	r3, [r4, #8]
 801052c:	42ab      	cmp	r3, r5
 801052e:	dc19      	bgt.n	8010564 <__multadd+0x74>
 8010530:	6861      	ldr	r1, [r4, #4]
 8010532:	4638      	mov	r0, r7
 8010534:	3101      	adds	r1, #1
 8010536:	f7ff ff79 	bl	801042c <_Balloc>
 801053a:	4680      	mov	r8, r0
 801053c:	b928      	cbnz	r0, 801054a <__multadd+0x5a>
 801053e:	4602      	mov	r2, r0
 8010540:	4b0c      	ldr	r3, [pc, #48]	; (8010574 <__multadd+0x84>)
 8010542:	480d      	ldr	r0, [pc, #52]	; (8010578 <__multadd+0x88>)
 8010544:	21b5      	movs	r1, #181	; 0xb5
 8010546:	f000 fec1 	bl	80112cc <__assert_func>
 801054a:	6922      	ldr	r2, [r4, #16]
 801054c:	3202      	adds	r2, #2
 801054e:	f104 010c 	add.w	r1, r4, #12
 8010552:	0092      	lsls	r2, r2, #2
 8010554:	300c      	adds	r0, #12
 8010556:	f7ff ff5b 	bl	8010410 <memcpy>
 801055a:	4621      	mov	r1, r4
 801055c:	4638      	mov	r0, r7
 801055e:	f7ff ffa5 	bl	80104ac <_Bfree>
 8010562:	4644      	mov	r4, r8
 8010564:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010568:	3501      	adds	r5, #1
 801056a:	615e      	str	r6, [r3, #20]
 801056c:	6125      	str	r5, [r4, #16]
 801056e:	4620      	mov	r0, r4
 8010570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010574:	08012247 	.word	0x08012247
 8010578:	080122d4 	.word	0x080122d4

0801057c <__s2b>:
 801057c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010580:	460c      	mov	r4, r1
 8010582:	4615      	mov	r5, r2
 8010584:	461f      	mov	r7, r3
 8010586:	2209      	movs	r2, #9
 8010588:	3308      	adds	r3, #8
 801058a:	4606      	mov	r6, r0
 801058c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010590:	2100      	movs	r1, #0
 8010592:	2201      	movs	r2, #1
 8010594:	429a      	cmp	r2, r3
 8010596:	db09      	blt.n	80105ac <__s2b+0x30>
 8010598:	4630      	mov	r0, r6
 801059a:	f7ff ff47 	bl	801042c <_Balloc>
 801059e:	b940      	cbnz	r0, 80105b2 <__s2b+0x36>
 80105a0:	4602      	mov	r2, r0
 80105a2:	4b19      	ldr	r3, [pc, #100]	; (8010608 <__s2b+0x8c>)
 80105a4:	4819      	ldr	r0, [pc, #100]	; (801060c <__s2b+0x90>)
 80105a6:	21ce      	movs	r1, #206	; 0xce
 80105a8:	f000 fe90 	bl	80112cc <__assert_func>
 80105ac:	0052      	lsls	r2, r2, #1
 80105ae:	3101      	adds	r1, #1
 80105b0:	e7f0      	b.n	8010594 <__s2b+0x18>
 80105b2:	9b08      	ldr	r3, [sp, #32]
 80105b4:	6143      	str	r3, [r0, #20]
 80105b6:	2d09      	cmp	r5, #9
 80105b8:	f04f 0301 	mov.w	r3, #1
 80105bc:	6103      	str	r3, [r0, #16]
 80105be:	dd16      	ble.n	80105ee <__s2b+0x72>
 80105c0:	f104 0909 	add.w	r9, r4, #9
 80105c4:	46c8      	mov	r8, r9
 80105c6:	442c      	add	r4, r5
 80105c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80105cc:	4601      	mov	r1, r0
 80105ce:	3b30      	subs	r3, #48	; 0x30
 80105d0:	220a      	movs	r2, #10
 80105d2:	4630      	mov	r0, r6
 80105d4:	f7ff ff8c 	bl	80104f0 <__multadd>
 80105d8:	45a0      	cmp	r8, r4
 80105da:	d1f5      	bne.n	80105c8 <__s2b+0x4c>
 80105dc:	f1a5 0408 	sub.w	r4, r5, #8
 80105e0:	444c      	add	r4, r9
 80105e2:	1b2d      	subs	r5, r5, r4
 80105e4:	1963      	adds	r3, r4, r5
 80105e6:	42bb      	cmp	r3, r7
 80105e8:	db04      	blt.n	80105f4 <__s2b+0x78>
 80105ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ee:	340a      	adds	r4, #10
 80105f0:	2509      	movs	r5, #9
 80105f2:	e7f6      	b.n	80105e2 <__s2b+0x66>
 80105f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80105f8:	4601      	mov	r1, r0
 80105fa:	3b30      	subs	r3, #48	; 0x30
 80105fc:	220a      	movs	r2, #10
 80105fe:	4630      	mov	r0, r6
 8010600:	f7ff ff76 	bl	80104f0 <__multadd>
 8010604:	e7ee      	b.n	80105e4 <__s2b+0x68>
 8010606:	bf00      	nop
 8010608:	08012247 	.word	0x08012247
 801060c:	080122d4 	.word	0x080122d4

08010610 <__hi0bits>:
 8010610:	0c03      	lsrs	r3, r0, #16
 8010612:	041b      	lsls	r3, r3, #16
 8010614:	b9d3      	cbnz	r3, 801064c <__hi0bits+0x3c>
 8010616:	0400      	lsls	r0, r0, #16
 8010618:	2310      	movs	r3, #16
 801061a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801061e:	bf04      	itt	eq
 8010620:	0200      	lsleq	r0, r0, #8
 8010622:	3308      	addeq	r3, #8
 8010624:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010628:	bf04      	itt	eq
 801062a:	0100      	lsleq	r0, r0, #4
 801062c:	3304      	addeq	r3, #4
 801062e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010632:	bf04      	itt	eq
 8010634:	0080      	lsleq	r0, r0, #2
 8010636:	3302      	addeq	r3, #2
 8010638:	2800      	cmp	r0, #0
 801063a:	db05      	blt.n	8010648 <__hi0bits+0x38>
 801063c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010640:	f103 0301 	add.w	r3, r3, #1
 8010644:	bf08      	it	eq
 8010646:	2320      	moveq	r3, #32
 8010648:	4618      	mov	r0, r3
 801064a:	4770      	bx	lr
 801064c:	2300      	movs	r3, #0
 801064e:	e7e4      	b.n	801061a <__hi0bits+0xa>

08010650 <__lo0bits>:
 8010650:	6803      	ldr	r3, [r0, #0]
 8010652:	f013 0207 	ands.w	r2, r3, #7
 8010656:	4601      	mov	r1, r0
 8010658:	d00b      	beq.n	8010672 <__lo0bits+0x22>
 801065a:	07da      	lsls	r2, r3, #31
 801065c:	d423      	bmi.n	80106a6 <__lo0bits+0x56>
 801065e:	0798      	lsls	r0, r3, #30
 8010660:	bf49      	itett	mi
 8010662:	085b      	lsrmi	r3, r3, #1
 8010664:	089b      	lsrpl	r3, r3, #2
 8010666:	2001      	movmi	r0, #1
 8010668:	600b      	strmi	r3, [r1, #0]
 801066a:	bf5c      	itt	pl
 801066c:	600b      	strpl	r3, [r1, #0]
 801066e:	2002      	movpl	r0, #2
 8010670:	4770      	bx	lr
 8010672:	b298      	uxth	r0, r3
 8010674:	b9a8      	cbnz	r0, 80106a2 <__lo0bits+0x52>
 8010676:	0c1b      	lsrs	r3, r3, #16
 8010678:	2010      	movs	r0, #16
 801067a:	b2da      	uxtb	r2, r3
 801067c:	b90a      	cbnz	r2, 8010682 <__lo0bits+0x32>
 801067e:	3008      	adds	r0, #8
 8010680:	0a1b      	lsrs	r3, r3, #8
 8010682:	071a      	lsls	r2, r3, #28
 8010684:	bf04      	itt	eq
 8010686:	091b      	lsreq	r3, r3, #4
 8010688:	3004      	addeq	r0, #4
 801068a:	079a      	lsls	r2, r3, #30
 801068c:	bf04      	itt	eq
 801068e:	089b      	lsreq	r3, r3, #2
 8010690:	3002      	addeq	r0, #2
 8010692:	07da      	lsls	r2, r3, #31
 8010694:	d403      	bmi.n	801069e <__lo0bits+0x4e>
 8010696:	085b      	lsrs	r3, r3, #1
 8010698:	f100 0001 	add.w	r0, r0, #1
 801069c:	d005      	beq.n	80106aa <__lo0bits+0x5a>
 801069e:	600b      	str	r3, [r1, #0]
 80106a0:	4770      	bx	lr
 80106a2:	4610      	mov	r0, r2
 80106a4:	e7e9      	b.n	801067a <__lo0bits+0x2a>
 80106a6:	2000      	movs	r0, #0
 80106a8:	4770      	bx	lr
 80106aa:	2020      	movs	r0, #32
 80106ac:	4770      	bx	lr
	...

080106b0 <__i2b>:
 80106b0:	b510      	push	{r4, lr}
 80106b2:	460c      	mov	r4, r1
 80106b4:	2101      	movs	r1, #1
 80106b6:	f7ff feb9 	bl	801042c <_Balloc>
 80106ba:	4602      	mov	r2, r0
 80106bc:	b928      	cbnz	r0, 80106ca <__i2b+0x1a>
 80106be:	4b05      	ldr	r3, [pc, #20]	; (80106d4 <__i2b+0x24>)
 80106c0:	4805      	ldr	r0, [pc, #20]	; (80106d8 <__i2b+0x28>)
 80106c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80106c6:	f000 fe01 	bl	80112cc <__assert_func>
 80106ca:	2301      	movs	r3, #1
 80106cc:	6144      	str	r4, [r0, #20]
 80106ce:	6103      	str	r3, [r0, #16]
 80106d0:	bd10      	pop	{r4, pc}
 80106d2:	bf00      	nop
 80106d4:	08012247 	.word	0x08012247
 80106d8:	080122d4 	.word	0x080122d4

080106dc <__multiply>:
 80106dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e0:	4691      	mov	r9, r2
 80106e2:	690a      	ldr	r2, [r1, #16]
 80106e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	bfb8      	it	lt
 80106ec:	460b      	movlt	r3, r1
 80106ee:	460c      	mov	r4, r1
 80106f0:	bfbc      	itt	lt
 80106f2:	464c      	movlt	r4, r9
 80106f4:	4699      	movlt	r9, r3
 80106f6:	6927      	ldr	r7, [r4, #16]
 80106f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80106fc:	68a3      	ldr	r3, [r4, #8]
 80106fe:	6861      	ldr	r1, [r4, #4]
 8010700:	eb07 060a 	add.w	r6, r7, sl
 8010704:	42b3      	cmp	r3, r6
 8010706:	b085      	sub	sp, #20
 8010708:	bfb8      	it	lt
 801070a:	3101      	addlt	r1, #1
 801070c:	f7ff fe8e 	bl	801042c <_Balloc>
 8010710:	b930      	cbnz	r0, 8010720 <__multiply+0x44>
 8010712:	4602      	mov	r2, r0
 8010714:	4b44      	ldr	r3, [pc, #272]	; (8010828 <__multiply+0x14c>)
 8010716:	4845      	ldr	r0, [pc, #276]	; (801082c <__multiply+0x150>)
 8010718:	f240 115d 	movw	r1, #349	; 0x15d
 801071c:	f000 fdd6 	bl	80112cc <__assert_func>
 8010720:	f100 0514 	add.w	r5, r0, #20
 8010724:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010728:	462b      	mov	r3, r5
 801072a:	2200      	movs	r2, #0
 801072c:	4543      	cmp	r3, r8
 801072e:	d321      	bcc.n	8010774 <__multiply+0x98>
 8010730:	f104 0314 	add.w	r3, r4, #20
 8010734:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010738:	f109 0314 	add.w	r3, r9, #20
 801073c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010740:	9202      	str	r2, [sp, #8]
 8010742:	1b3a      	subs	r2, r7, r4
 8010744:	3a15      	subs	r2, #21
 8010746:	f022 0203 	bic.w	r2, r2, #3
 801074a:	3204      	adds	r2, #4
 801074c:	f104 0115 	add.w	r1, r4, #21
 8010750:	428f      	cmp	r7, r1
 8010752:	bf38      	it	cc
 8010754:	2204      	movcc	r2, #4
 8010756:	9201      	str	r2, [sp, #4]
 8010758:	9a02      	ldr	r2, [sp, #8]
 801075a:	9303      	str	r3, [sp, #12]
 801075c:	429a      	cmp	r2, r3
 801075e:	d80c      	bhi.n	801077a <__multiply+0x9e>
 8010760:	2e00      	cmp	r6, #0
 8010762:	dd03      	ble.n	801076c <__multiply+0x90>
 8010764:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010768:	2b00      	cmp	r3, #0
 801076a:	d05a      	beq.n	8010822 <__multiply+0x146>
 801076c:	6106      	str	r6, [r0, #16]
 801076e:	b005      	add	sp, #20
 8010770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010774:	f843 2b04 	str.w	r2, [r3], #4
 8010778:	e7d8      	b.n	801072c <__multiply+0x50>
 801077a:	f8b3 a000 	ldrh.w	sl, [r3]
 801077e:	f1ba 0f00 	cmp.w	sl, #0
 8010782:	d024      	beq.n	80107ce <__multiply+0xf2>
 8010784:	f104 0e14 	add.w	lr, r4, #20
 8010788:	46a9      	mov	r9, r5
 801078a:	f04f 0c00 	mov.w	ip, #0
 801078e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010792:	f8d9 1000 	ldr.w	r1, [r9]
 8010796:	fa1f fb82 	uxth.w	fp, r2
 801079a:	b289      	uxth	r1, r1
 801079c:	fb0a 110b 	mla	r1, sl, fp, r1
 80107a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80107a4:	f8d9 2000 	ldr.w	r2, [r9]
 80107a8:	4461      	add	r1, ip
 80107aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80107b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80107b6:	b289      	uxth	r1, r1
 80107b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80107bc:	4577      	cmp	r7, lr
 80107be:	f849 1b04 	str.w	r1, [r9], #4
 80107c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107c6:	d8e2      	bhi.n	801078e <__multiply+0xb2>
 80107c8:	9a01      	ldr	r2, [sp, #4]
 80107ca:	f845 c002 	str.w	ip, [r5, r2]
 80107ce:	9a03      	ldr	r2, [sp, #12]
 80107d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80107d4:	3304      	adds	r3, #4
 80107d6:	f1b9 0f00 	cmp.w	r9, #0
 80107da:	d020      	beq.n	801081e <__multiply+0x142>
 80107dc:	6829      	ldr	r1, [r5, #0]
 80107de:	f104 0c14 	add.w	ip, r4, #20
 80107e2:	46ae      	mov	lr, r5
 80107e4:	f04f 0a00 	mov.w	sl, #0
 80107e8:	f8bc b000 	ldrh.w	fp, [ip]
 80107ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80107f0:	fb09 220b 	mla	r2, r9, fp, r2
 80107f4:	4492      	add	sl, r2
 80107f6:	b289      	uxth	r1, r1
 80107f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80107fc:	f84e 1b04 	str.w	r1, [lr], #4
 8010800:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010804:	f8be 1000 	ldrh.w	r1, [lr]
 8010808:	0c12      	lsrs	r2, r2, #16
 801080a:	fb09 1102 	mla	r1, r9, r2, r1
 801080e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010812:	4567      	cmp	r7, ip
 8010814:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010818:	d8e6      	bhi.n	80107e8 <__multiply+0x10c>
 801081a:	9a01      	ldr	r2, [sp, #4]
 801081c:	50a9      	str	r1, [r5, r2]
 801081e:	3504      	adds	r5, #4
 8010820:	e79a      	b.n	8010758 <__multiply+0x7c>
 8010822:	3e01      	subs	r6, #1
 8010824:	e79c      	b.n	8010760 <__multiply+0x84>
 8010826:	bf00      	nop
 8010828:	08012247 	.word	0x08012247
 801082c:	080122d4 	.word	0x080122d4

08010830 <__pow5mult>:
 8010830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010834:	4615      	mov	r5, r2
 8010836:	f012 0203 	ands.w	r2, r2, #3
 801083a:	4606      	mov	r6, r0
 801083c:	460f      	mov	r7, r1
 801083e:	d007      	beq.n	8010850 <__pow5mult+0x20>
 8010840:	4c25      	ldr	r4, [pc, #148]	; (80108d8 <__pow5mult+0xa8>)
 8010842:	3a01      	subs	r2, #1
 8010844:	2300      	movs	r3, #0
 8010846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801084a:	f7ff fe51 	bl	80104f0 <__multadd>
 801084e:	4607      	mov	r7, r0
 8010850:	10ad      	asrs	r5, r5, #2
 8010852:	d03d      	beq.n	80108d0 <__pow5mult+0xa0>
 8010854:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010856:	b97c      	cbnz	r4, 8010878 <__pow5mult+0x48>
 8010858:	2010      	movs	r0, #16
 801085a:	f7ff fdbf 	bl	80103dc <malloc>
 801085e:	4602      	mov	r2, r0
 8010860:	6270      	str	r0, [r6, #36]	; 0x24
 8010862:	b928      	cbnz	r0, 8010870 <__pow5mult+0x40>
 8010864:	4b1d      	ldr	r3, [pc, #116]	; (80108dc <__pow5mult+0xac>)
 8010866:	481e      	ldr	r0, [pc, #120]	; (80108e0 <__pow5mult+0xb0>)
 8010868:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801086c:	f000 fd2e 	bl	80112cc <__assert_func>
 8010870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010874:	6004      	str	r4, [r0, #0]
 8010876:	60c4      	str	r4, [r0, #12]
 8010878:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801087c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010880:	b94c      	cbnz	r4, 8010896 <__pow5mult+0x66>
 8010882:	f240 2171 	movw	r1, #625	; 0x271
 8010886:	4630      	mov	r0, r6
 8010888:	f7ff ff12 	bl	80106b0 <__i2b>
 801088c:	2300      	movs	r3, #0
 801088e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010892:	4604      	mov	r4, r0
 8010894:	6003      	str	r3, [r0, #0]
 8010896:	f04f 0900 	mov.w	r9, #0
 801089a:	07eb      	lsls	r3, r5, #31
 801089c:	d50a      	bpl.n	80108b4 <__pow5mult+0x84>
 801089e:	4639      	mov	r1, r7
 80108a0:	4622      	mov	r2, r4
 80108a2:	4630      	mov	r0, r6
 80108a4:	f7ff ff1a 	bl	80106dc <__multiply>
 80108a8:	4639      	mov	r1, r7
 80108aa:	4680      	mov	r8, r0
 80108ac:	4630      	mov	r0, r6
 80108ae:	f7ff fdfd 	bl	80104ac <_Bfree>
 80108b2:	4647      	mov	r7, r8
 80108b4:	106d      	asrs	r5, r5, #1
 80108b6:	d00b      	beq.n	80108d0 <__pow5mult+0xa0>
 80108b8:	6820      	ldr	r0, [r4, #0]
 80108ba:	b938      	cbnz	r0, 80108cc <__pow5mult+0x9c>
 80108bc:	4622      	mov	r2, r4
 80108be:	4621      	mov	r1, r4
 80108c0:	4630      	mov	r0, r6
 80108c2:	f7ff ff0b 	bl	80106dc <__multiply>
 80108c6:	6020      	str	r0, [r4, #0]
 80108c8:	f8c0 9000 	str.w	r9, [r0]
 80108cc:	4604      	mov	r4, r0
 80108ce:	e7e4      	b.n	801089a <__pow5mult+0x6a>
 80108d0:	4638      	mov	r0, r7
 80108d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108d6:	bf00      	nop
 80108d8:	08012420 	.word	0x08012420
 80108dc:	080121d5 	.word	0x080121d5
 80108e0:	080122d4 	.word	0x080122d4

080108e4 <__lshift>:
 80108e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e8:	460c      	mov	r4, r1
 80108ea:	6849      	ldr	r1, [r1, #4]
 80108ec:	6923      	ldr	r3, [r4, #16]
 80108ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108f2:	68a3      	ldr	r3, [r4, #8]
 80108f4:	4607      	mov	r7, r0
 80108f6:	4691      	mov	r9, r2
 80108f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108fc:	f108 0601 	add.w	r6, r8, #1
 8010900:	42b3      	cmp	r3, r6
 8010902:	db0b      	blt.n	801091c <__lshift+0x38>
 8010904:	4638      	mov	r0, r7
 8010906:	f7ff fd91 	bl	801042c <_Balloc>
 801090a:	4605      	mov	r5, r0
 801090c:	b948      	cbnz	r0, 8010922 <__lshift+0x3e>
 801090e:	4602      	mov	r2, r0
 8010910:	4b2a      	ldr	r3, [pc, #168]	; (80109bc <__lshift+0xd8>)
 8010912:	482b      	ldr	r0, [pc, #172]	; (80109c0 <__lshift+0xdc>)
 8010914:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010918:	f000 fcd8 	bl	80112cc <__assert_func>
 801091c:	3101      	adds	r1, #1
 801091e:	005b      	lsls	r3, r3, #1
 8010920:	e7ee      	b.n	8010900 <__lshift+0x1c>
 8010922:	2300      	movs	r3, #0
 8010924:	f100 0114 	add.w	r1, r0, #20
 8010928:	f100 0210 	add.w	r2, r0, #16
 801092c:	4618      	mov	r0, r3
 801092e:	4553      	cmp	r3, sl
 8010930:	db37      	blt.n	80109a2 <__lshift+0xbe>
 8010932:	6920      	ldr	r0, [r4, #16]
 8010934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010938:	f104 0314 	add.w	r3, r4, #20
 801093c:	f019 091f 	ands.w	r9, r9, #31
 8010940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010944:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010948:	d02f      	beq.n	80109aa <__lshift+0xc6>
 801094a:	f1c9 0e20 	rsb	lr, r9, #32
 801094e:	468a      	mov	sl, r1
 8010950:	f04f 0c00 	mov.w	ip, #0
 8010954:	681a      	ldr	r2, [r3, #0]
 8010956:	fa02 f209 	lsl.w	r2, r2, r9
 801095a:	ea42 020c 	orr.w	r2, r2, ip
 801095e:	f84a 2b04 	str.w	r2, [sl], #4
 8010962:	f853 2b04 	ldr.w	r2, [r3], #4
 8010966:	4298      	cmp	r0, r3
 8010968:	fa22 fc0e 	lsr.w	ip, r2, lr
 801096c:	d8f2      	bhi.n	8010954 <__lshift+0x70>
 801096e:	1b03      	subs	r3, r0, r4
 8010970:	3b15      	subs	r3, #21
 8010972:	f023 0303 	bic.w	r3, r3, #3
 8010976:	3304      	adds	r3, #4
 8010978:	f104 0215 	add.w	r2, r4, #21
 801097c:	4290      	cmp	r0, r2
 801097e:	bf38      	it	cc
 8010980:	2304      	movcc	r3, #4
 8010982:	f841 c003 	str.w	ip, [r1, r3]
 8010986:	f1bc 0f00 	cmp.w	ip, #0
 801098a:	d001      	beq.n	8010990 <__lshift+0xac>
 801098c:	f108 0602 	add.w	r6, r8, #2
 8010990:	3e01      	subs	r6, #1
 8010992:	4638      	mov	r0, r7
 8010994:	612e      	str	r6, [r5, #16]
 8010996:	4621      	mov	r1, r4
 8010998:	f7ff fd88 	bl	80104ac <_Bfree>
 801099c:	4628      	mov	r0, r5
 801099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80109a6:	3301      	adds	r3, #1
 80109a8:	e7c1      	b.n	801092e <__lshift+0x4a>
 80109aa:	3904      	subs	r1, #4
 80109ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80109b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80109b4:	4298      	cmp	r0, r3
 80109b6:	d8f9      	bhi.n	80109ac <__lshift+0xc8>
 80109b8:	e7ea      	b.n	8010990 <__lshift+0xac>
 80109ba:	bf00      	nop
 80109bc:	08012247 	.word	0x08012247
 80109c0:	080122d4 	.word	0x080122d4

080109c4 <__mcmp>:
 80109c4:	b530      	push	{r4, r5, lr}
 80109c6:	6902      	ldr	r2, [r0, #16]
 80109c8:	690c      	ldr	r4, [r1, #16]
 80109ca:	1b12      	subs	r2, r2, r4
 80109cc:	d10e      	bne.n	80109ec <__mcmp+0x28>
 80109ce:	f100 0314 	add.w	r3, r0, #20
 80109d2:	3114      	adds	r1, #20
 80109d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80109d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80109dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80109e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80109e4:	42a5      	cmp	r5, r4
 80109e6:	d003      	beq.n	80109f0 <__mcmp+0x2c>
 80109e8:	d305      	bcc.n	80109f6 <__mcmp+0x32>
 80109ea:	2201      	movs	r2, #1
 80109ec:	4610      	mov	r0, r2
 80109ee:	bd30      	pop	{r4, r5, pc}
 80109f0:	4283      	cmp	r3, r0
 80109f2:	d3f3      	bcc.n	80109dc <__mcmp+0x18>
 80109f4:	e7fa      	b.n	80109ec <__mcmp+0x28>
 80109f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109fa:	e7f7      	b.n	80109ec <__mcmp+0x28>

080109fc <__mdiff>:
 80109fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a00:	460c      	mov	r4, r1
 8010a02:	4606      	mov	r6, r0
 8010a04:	4611      	mov	r1, r2
 8010a06:	4620      	mov	r0, r4
 8010a08:	4690      	mov	r8, r2
 8010a0a:	f7ff ffdb 	bl	80109c4 <__mcmp>
 8010a0e:	1e05      	subs	r5, r0, #0
 8010a10:	d110      	bne.n	8010a34 <__mdiff+0x38>
 8010a12:	4629      	mov	r1, r5
 8010a14:	4630      	mov	r0, r6
 8010a16:	f7ff fd09 	bl	801042c <_Balloc>
 8010a1a:	b930      	cbnz	r0, 8010a2a <__mdiff+0x2e>
 8010a1c:	4b3a      	ldr	r3, [pc, #232]	; (8010b08 <__mdiff+0x10c>)
 8010a1e:	4602      	mov	r2, r0
 8010a20:	f240 2132 	movw	r1, #562	; 0x232
 8010a24:	4839      	ldr	r0, [pc, #228]	; (8010b0c <__mdiff+0x110>)
 8010a26:	f000 fc51 	bl	80112cc <__assert_func>
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a34:	bfa4      	itt	ge
 8010a36:	4643      	movge	r3, r8
 8010a38:	46a0      	movge	r8, r4
 8010a3a:	4630      	mov	r0, r6
 8010a3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a40:	bfa6      	itte	ge
 8010a42:	461c      	movge	r4, r3
 8010a44:	2500      	movge	r5, #0
 8010a46:	2501      	movlt	r5, #1
 8010a48:	f7ff fcf0 	bl	801042c <_Balloc>
 8010a4c:	b920      	cbnz	r0, 8010a58 <__mdiff+0x5c>
 8010a4e:	4b2e      	ldr	r3, [pc, #184]	; (8010b08 <__mdiff+0x10c>)
 8010a50:	4602      	mov	r2, r0
 8010a52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a56:	e7e5      	b.n	8010a24 <__mdiff+0x28>
 8010a58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a5c:	6926      	ldr	r6, [r4, #16]
 8010a5e:	60c5      	str	r5, [r0, #12]
 8010a60:	f104 0914 	add.w	r9, r4, #20
 8010a64:	f108 0514 	add.w	r5, r8, #20
 8010a68:	f100 0e14 	add.w	lr, r0, #20
 8010a6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010a70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010a74:	f108 0210 	add.w	r2, r8, #16
 8010a78:	46f2      	mov	sl, lr
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a84:	fa1f f883 	uxth.w	r8, r3
 8010a88:	fa11 f18b 	uxtah	r1, r1, fp
 8010a8c:	0c1b      	lsrs	r3, r3, #16
 8010a8e:	eba1 0808 	sub.w	r8, r1, r8
 8010a92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a9a:	fa1f f888 	uxth.w	r8, r8
 8010a9e:	1419      	asrs	r1, r3, #16
 8010aa0:	454e      	cmp	r6, r9
 8010aa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010aa6:	f84a 3b04 	str.w	r3, [sl], #4
 8010aaa:	d8e7      	bhi.n	8010a7c <__mdiff+0x80>
 8010aac:	1b33      	subs	r3, r6, r4
 8010aae:	3b15      	subs	r3, #21
 8010ab0:	f023 0303 	bic.w	r3, r3, #3
 8010ab4:	3304      	adds	r3, #4
 8010ab6:	3415      	adds	r4, #21
 8010ab8:	42a6      	cmp	r6, r4
 8010aba:	bf38      	it	cc
 8010abc:	2304      	movcc	r3, #4
 8010abe:	441d      	add	r5, r3
 8010ac0:	4473      	add	r3, lr
 8010ac2:	469e      	mov	lr, r3
 8010ac4:	462e      	mov	r6, r5
 8010ac6:	4566      	cmp	r6, ip
 8010ac8:	d30e      	bcc.n	8010ae8 <__mdiff+0xec>
 8010aca:	f10c 0203 	add.w	r2, ip, #3
 8010ace:	1b52      	subs	r2, r2, r5
 8010ad0:	f022 0203 	bic.w	r2, r2, #3
 8010ad4:	3d03      	subs	r5, #3
 8010ad6:	45ac      	cmp	ip, r5
 8010ad8:	bf38      	it	cc
 8010ada:	2200      	movcc	r2, #0
 8010adc:	441a      	add	r2, r3
 8010ade:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ae2:	b17b      	cbz	r3, 8010b04 <__mdiff+0x108>
 8010ae4:	6107      	str	r7, [r0, #16]
 8010ae6:	e7a3      	b.n	8010a30 <__mdiff+0x34>
 8010ae8:	f856 8b04 	ldr.w	r8, [r6], #4
 8010aec:	fa11 f288 	uxtah	r2, r1, r8
 8010af0:	1414      	asrs	r4, r2, #16
 8010af2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010af6:	b292      	uxth	r2, r2
 8010af8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010afc:	f84e 2b04 	str.w	r2, [lr], #4
 8010b00:	1421      	asrs	r1, r4, #16
 8010b02:	e7e0      	b.n	8010ac6 <__mdiff+0xca>
 8010b04:	3f01      	subs	r7, #1
 8010b06:	e7ea      	b.n	8010ade <__mdiff+0xe2>
 8010b08:	08012247 	.word	0x08012247
 8010b0c:	080122d4 	.word	0x080122d4

08010b10 <__ulp>:
 8010b10:	b082      	sub	sp, #8
 8010b12:	ed8d 0b00 	vstr	d0, [sp]
 8010b16:	9b01      	ldr	r3, [sp, #4]
 8010b18:	4912      	ldr	r1, [pc, #72]	; (8010b64 <__ulp+0x54>)
 8010b1a:	4019      	ands	r1, r3
 8010b1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010b20:	2900      	cmp	r1, #0
 8010b22:	dd05      	ble.n	8010b30 <__ulp+0x20>
 8010b24:	2200      	movs	r2, #0
 8010b26:	460b      	mov	r3, r1
 8010b28:	ec43 2b10 	vmov	d0, r2, r3
 8010b2c:	b002      	add	sp, #8
 8010b2e:	4770      	bx	lr
 8010b30:	4249      	negs	r1, r1
 8010b32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010b36:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010b3a:	f04f 0200 	mov.w	r2, #0
 8010b3e:	f04f 0300 	mov.w	r3, #0
 8010b42:	da04      	bge.n	8010b4e <__ulp+0x3e>
 8010b44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010b48:	fa41 f300 	asr.w	r3, r1, r0
 8010b4c:	e7ec      	b.n	8010b28 <__ulp+0x18>
 8010b4e:	f1a0 0114 	sub.w	r1, r0, #20
 8010b52:	291e      	cmp	r1, #30
 8010b54:	bfda      	itte	le
 8010b56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010b5a:	fa20 f101 	lsrle.w	r1, r0, r1
 8010b5e:	2101      	movgt	r1, #1
 8010b60:	460a      	mov	r2, r1
 8010b62:	e7e1      	b.n	8010b28 <__ulp+0x18>
 8010b64:	7ff00000 	.word	0x7ff00000

08010b68 <__b2d>:
 8010b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b6a:	6905      	ldr	r5, [r0, #16]
 8010b6c:	f100 0714 	add.w	r7, r0, #20
 8010b70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010b74:	1f2e      	subs	r6, r5, #4
 8010b76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f7ff fd48 	bl	8010610 <__hi0bits>
 8010b80:	f1c0 0320 	rsb	r3, r0, #32
 8010b84:	280a      	cmp	r0, #10
 8010b86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010c04 <__b2d+0x9c>
 8010b8a:	600b      	str	r3, [r1, #0]
 8010b8c:	dc14      	bgt.n	8010bb8 <__b2d+0x50>
 8010b8e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010b92:	fa24 f10e 	lsr.w	r1, r4, lr
 8010b96:	42b7      	cmp	r7, r6
 8010b98:	ea41 030c 	orr.w	r3, r1, ip
 8010b9c:	bf34      	ite	cc
 8010b9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010ba2:	2100      	movcs	r1, #0
 8010ba4:	3015      	adds	r0, #21
 8010ba6:	fa04 f000 	lsl.w	r0, r4, r0
 8010baa:	fa21 f10e 	lsr.w	r1, r1, lr
 8010bae:	ea40 0201 	orr.w	r2, r0, r1
 8010bb2:	ec43 2b10 	vmov	d0, r2, r3
 8010bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb8:	42b7      	cmp	r7, r6
 8010bba:	bf3a      	itte	cc
 8010bbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010bc0:	f1a5 0608 	subcc.w	r6, r5, #8
 8010bc4:	2100      	movcs	r1, #0
 8010bc6:	380b      	subs	r0, #11
 8010bc8:	d017      	beq.n	8010bfa <__b2d+0x92>
 8010bca:	f1c0 0c20 	rsb	ip, r0, #32
 8010bce:	fa04 f500 	lsl.w	r5, r4, r0
 8010bd2:	42be      	cmp	r6, r7
 8010bd4:	fa21 f40c 	lsr.w	r4, r1, ip
 8010bd8:	ea45 0504 	orr.w	r5, r5, r4
 8010bdc:	bf8c      	ite	hi
 8010bde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010be2:	2400      	movls	r4, #0
 8010be4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010be8:	fa01 f000 	lsl.w	r0, r1, r0
 8010bec:	fa24 f40c 	lsr.w	r4, r4, ip
 8010bf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010bf4:	ea40 0204 	orr.w	r2, r0, r4
 8010bf8:	e7db      	b.n	8010bb2 <__b2d+0x4a>
 8010bfa:	ea44 030c 	orr.w	r3, r4, ip
 8010bfe:	460a      	mov	r2, r1
 8010c00:	e7d7      	b.n	8010bb2 <__b2d+0x4a>
 8010c02:	bf00      	nop
 8010c04:	3ff00000 	.word	0x3ff00000

08010c08 <__d2b>:
 8010c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c0c:	4689      	mov	r9, r1
 8010c0e:	2101      	movs	r1, #1
 8010c10:	ec57 6b10 	vmov	r6, r7, d0
 8010c14:	4690      	mov	r8, r2
 8010c16:	f7ff fc09 	bl	801042c <_Balloc>
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	b930      	cbnz	r0, 8010c2c <__d2b+0x24>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	4b25      	ldr	r3, [pc, #148]	; (8010cb8 <__d2b+0xb0>)
 8010c22:	4826      	ldr	r0, [pc, #152]	; (8010cbc <__d2b+0xb4>)
 8010c24:	f240 310a 	movw	r1, #778	; 0x30a
 8010c28:	f000 fb50 	bl	80112cc <__assert_func>
 8010c2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010c30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010c34:	bb35      	cbnz	r5, 8010c84 <__d2b+0x7c>
 8010c36:	2e00      	cmp	r6, #0
 8010c38:	9301      	str	r3, [sp, #4]
 8010c3a:	d028      	beq.n	8010c8e <__d2b+0x86>
 8010c3c:	4668      	mov	r0, sp
 8010c3e:	9600      	str	r6, [sp, #0]
 8010c40:	f7ff fd06 	bl	8010650 <__lo0bits>
 8010c44:	9900      	ldr	r1, [sp, #0]
 8010c46:	b300      	cbz	r0, 8010c8a <__d2b+0x82>
 8010c48:	9a01      	ldr	r2, [sp, #4]
 8010c4a:	f1c0 0320 	rsb	r3, r0, #32
 8010c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c52:	430b      	orrs	r3, r1
 8010c54:	40c2      	lsrs	r2, r0
 8010c56:	6163      	str	r3, [r4, #20]
 8010c58:	9201      	str	r2, [sp, #4]
 8010c5a:	9b01      	ldr	r3, [sp, #4]
 8010c5c:	61a3      	str	r3, [r4, #24]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	bf14      	ite	ne
 8010c62:	2202      	movne	r2, #2
 8010c64:	2201      	moveq	r2, #1
 8010c66:	6122      	str	r2, [r4, #16]
 8010c68:	b1d5      	cbz	r5, 8010ca0 <__d2b+0x98>
 8010c6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c6e:	4405      	add	r5, r0
 8010c70:	f8c9 5000 	str.w	r5, [r9]
 8010c74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c78:	f8c8 0000 	str.w	r0, [r8]
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	b003      	add	sp, #12
 8010c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c88:	e7d5      	b.n	8010c36 <__d2b+0x2e>
 8010c8a:	6161      	str	r1, [r4, #20]
 8010c8c:	e7e5      	b.n	8010c5a <__d2b+0x52>
 8010c8e:	a801      	add	r0, sp, #4
 8010c90:	f7ff fcde 	bl	8010650 <__lo0bits>
 8010c94:	9b01      	ldr	r3, [sp, #4]
 8010c96:	6163      	str	r3, [r4, #20]
 8010c98:	2201      	movs	r2, #1
 8010c9a:	6122      	str	r2, [r4, #16]
 8010c9c:	3020      	adds	r0, #32
 8010c9e:	e7e3      	b.n	8010c68 <__d2b+0x60>
 8010ca0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ca4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ca8:	f8c9 0000 	str.w	r0, [r9]
 8010cac:	6918      	ldr	r0, [r3, #16]
 8010cae:	f7ff fcaf 	bl	8010610 <__hi0bits>
 8010cb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010cb6:	e7df      	b.n	8010c78 <__d2b+0x70>
 8010cb8:	08012247 	.word	0x08012247
 8010cbc:	080122d4 	.word	0x080122d4

08010cc0 <__ratio>:
 8010cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc4:	4688      	mov	r8, r1
 8010cc6:	4669      	mov	r1, sp
 8010cc8:	4681      	mov	r9, r0
 8010cca:	f7ff ff4d 	bl	8010b68 <__b2d>
 8010cce:	a901      	add	r1, sp, #4
 8010cd0:	4640      	mov	r0, r8
 8010cd2:	ec55 4b10 	vmov	r4, r5, d0
 8010cd6:	f7ff ff47 	bl	8010b68 <__b2d>
 8010cda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010ce2:	eba3 0c02 	sub.w	ip, r3, r2
 8010ce6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010cea:	1a9b      	subs	r3, r3, r2
 8010cec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010cf0:	ec51 0b10 	vmov	r0, r1, d0
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	bfd6      	itet	le
 8010cf8:	460a      	movle	r2, r1
 8010cfa:	462a      	movgt	r2, r5
 8010cfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010d00:	468b      	mov	fp, r1
 8010d02:	462f      	mov	r7, r5
 8010d04:	bfd4      	ite	le
 8010d06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010d0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010d0e:	4620      	mov	r0, r4
 8010d10:	ee10 2a10 	vmov	r2, s0
 8010d14:	465b      	mov	r3, fp
 8010d16:	4639      	mov	r1, r7
 8010d18:	f7ef fdd0 	bl	80008bc <__aeabi_ddiv>
 8010d1c:	ec41 0b10 	vmov	d0, r0, r1
 8010d20:	b003      	add	sp, #12
 8010d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d26 <__copybits>:
 8010d26:	3901      	subs	r1, #1
 8010d28:	b570      	push	{r4, r5, r6, lr}
 8010d2a:	1149      	asrs	r1, r1, #5
 8010d2c:	6914      	ldr	r4, [r2, #16]
 8010d2e:	3101      	adds	r1, #1
 8010d30:	f102 0314 	add.w	r3, r2, #20
 8010d34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d3c:	1f05      	subs	r5, r0, #4
 8010d3e:	42a3      	cmp	r3, r4
 8010d40:	d30c      	bcc.n	8010d5c <__copybits+0x36>
 8010d42:	1aa3      	subs	r3, r4, r2
 8010d44:	3b11      	subs	r3, #17
 8010d46:	f023 0303 	bic.w	r3, r3, #3
 8010d4a:	3211      	adds	r2, #17
 8010d4c:	42a2      	cmp	r2, r4
 8010d4e:	bf88      	it	hi
 8010d50:	2300      	movhi	r3, #0
 8010d52:	4418      	add	r0, r3
 8010d54:	2300      	movs	r3, #0
 8010d56:	4288      	cmp	r0, r1
 8010d58:	d305      	bcc.n	8010d66 <__copybits+0x40>
 8010d5a:	bd70      	pop	{r4, r5, r6, pc}
 8010d5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010d60:	f845 6f04 	str.w	r6, [r5, #4]!
 8010d64:	e7eb      	b.n	8010d3e <__copybits+0x18>
 8010d66:	f840 3b04 	str.w	r3, [r0], #4
 8010d6a:	e7f4      	b.n	8010d56 <__copybits+0x30>

08010d6c <__any_on>:
 8010d6c:	f100 0214 	add.w	r2, r0, #20
 8010d70:	6900      	ldr	r0, [r0, #16]
 8010d72:	114b      	asrs	r3, r1, #5
 8010d74:	4298      	cmp	r0, r3
 8010d76:	b510      	push	{r4, lr}
 8010d78:	db11      	blt.n	8010d9e <__any_on+0x32>
 8010d7a:	dd0a      	ble.n	8010d92 <__any_on+0x26>
 8010d7c:	f011 011f 	ands.w	r1, r1, #31
 8010d80:	d007      	beq.n	8010d92 <__any_on+0x26>
 8010d82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010d86:	fa24 f001 	lsr.w	r0, r4, r1
 8010d8a:	fa00 f101 	lsl.w	r1, r0, r1
 8010d8e:	428c      	cmp	r4, r1
 8010d90:	d10b      	bne.n	8010daa <__any_on+0x3e>
 8010d92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d803      	bhi.n	8010da2 <__any_on+0x36>
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	bd10      	pop	{r4, pc}
 8010d9e:	4603      	mov	r3, r0
 8010da0:	e7f7      	b.n	8010d92 <__any_on+0x26>
 8010da2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010da6:	2900      	cmp	r1, #0
 8010da8:	d0f5      	beq.n	8010d96 <__any_on+0x2a>
 8010daa:	2001      	movs	r0, #1
 8010dac:	e7f6      	b.n	8010d9c <__any_on+0x30>

08010dae <_calloc_r>:
 8010dae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010db0:	fba1 2402 	umull	r2, r4, r1, r2
 8010db4:	b94c      	cbnz	r4, 8010dca <_calloc_r+0x1c>
 8010db6:	4611      	mov	r1, r2
 8010db8:	9201      	str	r2, [sp, #4]
 8010dba:	f000 f87b 	bl	8010eb4 <_malloc_r>
 8010dbe:	9a01      	ldr	r2, [sp, #4]
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	b930      	cbnz	r0, 8010dd2 <_calloc_r+0x24>
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	b003      	add	sp, #12
 8010dc8:	bd30      	pop	{r4, r5, pc}
 8010dca:	220c      	movs	r2, #12
 8010dcc:	6002      	str	r2, [r0, #0]
 8010dce:	2500      	movs	r5, #0
 8010dd0:	e7f8      	b.n	8010dc4 <_calloc_r+0x16>
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	f7fc fbaa 	bl	800d52c <memset>
 8010dd8:	e7f4      	b.n	8010dc4 <_calloc_r+0x16>
	...

08010ddc <_free_r>:
 8010ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dde:	2900      	cmp	r1, #0
 8010de0:	d044      	beq.n	8010e6c <_free_r+0x90>
 8010de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010de6:	9001      	str	r0, [sp, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f1a1 0404 	sub.w	r4, r1, #4
 8010dee:	bfb8      	it	lt
 8010df0:	18e4      	addlt	r4, r4, r3
 8010df2:	f000 fab5 	bl	8011360 <__malloc_lock>
 8010df6:	4a1e      	ldr	r2, [pc, #120]	; (8010e70 <_free_r+0x94>)
 8010df8:	9801      	ldr	r0, [sp, #4]
 8010dfa:	6813      	ldr	r3, [r2, #0]
 8010dfc:	b933      	cbnz	r3, 8010e0c <_free_r+0x30>
 8010dfe:	6063      	str	r3, [r4, #4]
 8010e00:	6014      	str	r4, [r2, #0]
 8010e02:	b003      	add	sp, #12
 8010e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e08:	f000 bab0 	b.w	801136c <__malloc_unlock>
 8010e0c:	42a3      	cmp	r3, r4
 8010e0e:	d908      	bls.n	8010e22 <_free_r+0x46>
 8010e10:	6825      	ldr	r5, [r4, #0]
 8010e12:	1961      	adds	r1, r4, r5
 8010e14:	428b      	cmp	r3, r1
 8010e16:	bf01      	itttt	eq
 8010e18:	6819      	ldreq	r1, [r3, #0]
 8010e1a:	685b      	ldreq	r3, [r3, #4]
 8010e1c:	1949      	addeq	r1, r1, r5
 8010e1e:	6021      	streq	r1, [r4, #0]
 8010e20:	e7ed      	b.n	8010dfe <_free_r+0x22>
 8010e22:	461a      	mov	r2, r3
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	b10b      	cbz	r3, 8010e2c <_free_r+0x50>
 8010e28:	42a3      	cmp	r3, r4
 8010e2a:	d9fa      	bls.n	8010e22 <_free_r+0x46>
 8010e2c:	6811      	ldr	r1, [r2, #0]
 8010e2e:	1855      	adds	r5, r2, r1
 8010e30:	42a5      	cmp	r5, r4
 8010e32:	d10b      	bne.n	8010e4c <_free_r+0x70>
 8010e34:	6824      	ldr	r4, [r4, #0]
 8010e36:	4421      	add	r1, r4
 8010e38:	1854      	adds	r4, r2, r1
 8010e3a:	42a3      	cmp	r3, r4
 8010e3c:	6011      	str	r1, [r2, #0]
 8010e3e:	d1e0      	bne.n	8010e02 <_free_r+0x26>
 8010e40:	681c      	ldr	r4, [r3, #0]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	6053      	str	r3, [r2, #4]
 8010e46:	4421      	add	r1, r4
 8010e48:	6011      	str	r1, [r2, #0]
 8010e4a:	e7da      	b.n	8010e02 <_free_r+0x26>
 8010e4c:	d902      	bls.n	8010e54 <_free_r+0x78>
 8010e4e:	230c      	movs	r3, #12
 8010e50:	6003      	str	r3, [r0, #0]
 8010e52:	e7d6      	b.n	8010e02 <_free_r+0x26>
 8010e54:	6825      	ldr	r5, [r4, #0]
 8010e56:	1961      	adds	r1, r4, r5
 8010e58:	428b      	cmp	r3, r1
 8010e5a:	bf04      	itt	eq
 8010e5c:	6819      	ldreq	r1, [r3, #0]
 8010e5e:	685b      	ldreq	r3, [r3, #4]
 8010e60:	6063      	str	r3, [r4, #4]
 8010e62:	bf04      	itt	eq
 8010e64:	1949      	addeq	r1, r1, r5
 8010e66:	6021      	streq	r1, [r4, #0]
 8010e68:	6054      	str	r4, [r2, #4]
 8010e6a:	e7ca      	b.n	8010e02 <_free_r+0x26>
 8010e6c:	b003      	add	sp, #12
 8010e6e:	bd30      	pop	{r4, r5, pc}
 8010e70:	200012f4 	.word	0x200012f4

08010e74 <sbrk_aligned>:
 8010e74:	b570      	push	{r4, r5, r6, lr}
 8010e76:	4e0e      	ldr	r6, [pc, #56]	; (8010eb0 <sbrk_aligned+0x3c>)
 8010e78:	460c      	mov	r4, r1
 8010e7a:	6831      	ldr	r1, [r6, #0]
 8010e7c:	4605      	mov	r5, r0
 8010e7e:	b911      	cbnz	r1, 8010e86 <sbrk_aligned+0x12>
 8010e80:	f000 f9f2 	bl	8011268 <_sbrk_r>
 8010e84:	6030      	str	r0, [r6, #0]
 8010e86:	4621      	mov	r1, r4
 8010e88:	4628      	mov	r0, r5
 8010e8a:	f000 f9ed 	bl	8011268 <_sbrk_r>
 8010e8e:	1c43      	adds	r3, r0, #1
 8010e90:	d00a      	beq.n	8010ea8 <sbrk_aligned+0x34>
 8010e92:	1cc4      	adds	r4, r0, #3
 8010e94:	f024 0403 	bic.w	r4, r4, #3
 8010e98:	42a0      	cmp	r0, r4
 8010e9a:	d007      	beq.n	8010eac <sbrk_aligned+0x38>
 8010e9c:	1a21      	subs	r1, r4, r0
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	f000 f9e2 	bl	8011268 <_sbrk_r>
 8010ea4:	3001      	adds	r0, #1
 8010ea6:	d101      	bne.n	8010eac <sbrk_aligned+0x38>
 8010ea8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010eac:	4620      	mov	r0, r4
 8010eae:	bd70      	pop	{r4, r5, r6, pc}
 8010eb0:	200012f8 	.word	0x200012f8

08010eb4 <_malloc_r>:
 8010eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb8:	1ccd      	adds	r5, r1, #3
 8010eba:	f025 0503 	bic.w	r5, r5, #3
 8010ebe:	3508      	adds	r5, #8
 8010ec0:	2d0c      	cmp	r5, #12
 8010ec2:	bf38      	it	cc
 8010ec4:	250c      	movcc	r5, #12
 8010ec6:	2d00      	cmp	r5, #0
 8010ec8:	4607      	mov	r7, r0
 8010eca:	db01      	blt.n	8010ed0 <_malloc_r+0x1c>
 8010ecc:	42a9      	cmp	r1, r5
 8010ece:	d905      	bls.n	8010edc <_malloc_r+0x28>
 8010ed0:	230c      	movs	r3, #12
 8010ed2:	603b      	str	r3, [r7, #0]
 8010ed4:	2600      	movs	r6, #0
 8010ed6:	4630      	mov	r0, r6
 8010ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010edc:	4e2e      	ldr	r6, [pc, #184]	; (8010f98 <_malloc_r+0xe4>)
 8010ede:	f000 fa3f 	bl	8011360 <__malloc_lock>
 8010ee2:	6833      	ldr	r3, [r6, #0]
 8010ee4:	461c      	mov	r4, r3
 8010ee6:	bb34      	cbnz	r4, 8010f36 <_malloc_r+0x82>
 8010ee8:	4629      	mov	r1, r5
 8010eea:	4638      	mov	r0, r7
 8010eec:	f7ff ffc2 	bl	8010e74 <sbrk_aligned>
 8010ef0:	1c43      	adds	r3, r0, #1
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	d14d      	bne.n	8010f92 <_malloc_r+0xde>
 8010ef6:	6834      	ldr	r4, [r6, #0]
 8010ef8:	4626      	mov	r6, r4
 8010efa:	2e00      	cmp	r6, #0
 8010efc:	d140      	bne.n	8010f80 <_malloc_r+0xcc>
 8010efe:	6823      	ldr	r3, [r4, #0]
 8010f00:	4631      	mov	r1, r6
 8010f02:	4638      	mov	r0, r7
 8010f04:	eb04 0803 	add.w	r8, r4, r3
 8010f08:	f000 f9ae 	bl	8011268 <_sbrk_r>
 8010f0c:	4580      	cmp	r8, r0
 8010f0e:	d13a      	bne.n	8010f86 <_malloc_r+0xd2>
 8010f10:	6821      	ldr	r1, [r4, #0]
 8010f12:	3503      	adds	r5, #3
 8010f14:	1a6d      	subs	r5, r5, r1
 8010f16:	f025 0503 	bic.w	r5, r5, #3
 8010f1a:	3508      	adds	r5, #8
 8010f1c:	2d0c      	cmp	r5, #12
 8010f1e:	bf38      	it	cc
 8010f20:	250c      	movcc	r5, #12
 8010f22:	4629      	mov	r1, r5
 8010f24:	4638      	mov	r0, r7
 8010f26:	f7ff ffa5 	bl	8010e74 <sbrk_aligned>
 8010f2a:	3001      	adds	r0, #1
 8010f2c:	d02b      	beq.n	8010f86 <_malloc_r+0xd2>
 8010f2e:	6823      	ldr	r3, [r4, #0]
 8010f30:	442b      	add	r3, r5
 8010f32:	6023      	str	r3, [r4, #0]
 8010f34:	e00e      	b.n	8010f54 <_malloc_r+0xa0>
 8010f36:	6822      	ldr	r2, [r4, #0]
 8010f38:	1b52      	subs	r2, r2, r5
 8010f3a:	d41e      	bmi.n	8010f7a <_malloc_r+0xc6>
 8010f3c:	2a0b      	cmp	r2, #11
 8010f3e:	d916      	bls.n	8010f6e <_malloc_r+0xba>
 8010f40:	1961      	adds	r1, r4, r5
 8010f42:	42a3      	cmp	r3, r4
 8010f44:	6025      	str	r5, [r4, #0]
 8010f46:	bf18      	it	ne
 8010f48:	6059      	strne	r1, [r3, #4]
 8010f4a:	6863      	ldr	r3, [r4, #4]
 8010f4c:	bf08      	it	eq
 8010f4e:	6031      	streq	r1, [r6, #0]
 8010f50:	5162      	str	r2, [r4, r5]
 8010f52:	604b      	str	r3, [r1, #4]
 8010f54:	4638      	mov	r0, r7
 8010f56:	f104 060b 	add.w	r6, r4, #11
 8010f5a:	f000 fa07 	bl	801136c <__malloc_unlock>
 8010f5e:	f026 0607 	bic.w	r6, r6, #7
 8010f62:	1d23      	adds	r3, r4, #4
 8010f64:	1af2      	subs	r2, r6, r3
 8010f66:	d0b6      	beq.n	8010ed6 <_malloc_r+0x22>
 8010f68:	1b9b      	subs	r3, r3, r6
 8010f6a:	50a3      	str	r3, [r4, r2]
 8010f6c:	e7b3      	b.n	8010ed6 <_malloc_r+0x22>
 8010f6e:	6862      	ldr	r2, [r4, #4]
 8010f70:	42a3      	cmp	r3, r4
 8010f72:	bf0c      	ite	eq
 8010f74:	6032      	streq	r2, [r6, #0]
 8010f76:	605a      	strne	r2, [r3, #4]
 8010f78:	e7ec      	b.n	8010f54 <_malloc_r+0xa0>
 8010f7a:	4623      	mov	r3, r4
 8010f7c:	6864      	ldr	r4, [r4, #4]
 8010f7e:	e7b2      	b.n	8010ee6 <_malloc_r+0x32>
 8010f80:	4634      	mov	r4, r6
 8010f82:	6876      	ldr	r6, [r6, #4]
 8010f84:	e7b9      	b.n	8010efa <_malloc_r+0x46>
 8010f86:	230c      	movs	r3, #12
 8010f88:	603b      	str	r3, [r7, #0]
 8010f8a:	4638      	mov	r0, r7
 8010f8c:	f000 f9ee 	bl	801136c <__malloc_unlock>
 8010f90:	e7a1      	b.n	8010ed6 <_malloc_r+0x22>
 8010f92:	6025      	str	r5, [r4, #0]
 8010f94:	e7de      	b.n	8010f54 <_malloc_r+0xa0>
 8010f96:	bf00      	nop
 8010f98:	200012f4 	.word	0x200012f4

08010f9c <__ssputs_r>:
 8010f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fa0:	688e      	ldr	r6, [r1, #8]
 8010fa2:	429e      	cmp	r6, r3
 8010fa4:	4682      	mov	sl, r0
 8010fa6:	460c      	mov	r4, r1
 8010fa8:	4690      	mov	r8, r2
 8010faa:	461f      	mov	r7, r3
 8010fac:	d838      	bhi.n	8011020 <__ssputs_r+0x84>
 8010fae:	898a      	ldrh	r2, [r1, #12]
 8010fb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010fb4:	d032      	beq.n	801101c <__ssputs_r+0x80>
 8010fb6:	6825      	ldr	r5, [r4, #0]
 8010fb8:	6909      	ldr	r1, [r1, #16]
 8010fba:	eba5 0901 	sub.w	r9, r5, r1
 8010fbe:	6965      	ldr	r5, [r4, #20]
 8010fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010fc8:	3301      	adds	r3, #1
 8010fca:	444b      	add	r3, r9
 8010fcc:	106d      	asrs	r5, r5, #1
 8010fce:	429d      	cmp	r5, r3
 8010fd0:	bf38      	it	cc
 8010fd2:	461d      	movcc	r5, r3
 8010fd4:	0553      	lsls	r3, r2, #21
 8010fd6:	d531      	bpl.n	801103c <__ssputs_r+0xa0>
 8010fd8:	4629      	mov	r1, r5
 8010fda:	f7ff ff6b 	bl	8010eb4 <_malloc_r>
 8010fde:	4606      	mov	r6, r0
 8010fe0:	b950      	cbnz	r0, 8010ff8 <__ssputs_r+0x5c>
 8010fe2:	230c      	movs	r3, #12
 8010fe4:	f8ca 3000 	str.w	r3, [sl]
 8010fe8:	89a3      	ldrh	r3, [r4, #12]
 8010fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fee:	81a3      	strh	r3, [r4, #12]
 8010ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ff8:	6921      	ldr	r1, [r4, #16]
 8010ffa:	464a      	mov	r2, r9
 8010ffc:	f7ff fa08 	bl	8010410 <memcpy>
 8011000:	89a3      	ldrh	r3, [r4, #12]
 8011002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801100a:	81a3      	strh	r3, [r4, #12]
 801100c:	6126      	str	r6, [r4, #16]
 801100e:	6165      	str	r5, [r4, #20]
 8011010:	444e      	add	r6, r9
 8011012:	eba5 0509 	sub.w	r5, r5, r9
 8011016:	6026      	str	r6, [r4, #0]
 8011018:	60a5      	str	r5, [r4, #8]
 801101a:	463e      	mov	r6, r7
 801101c:	42be      	cmp	r6, r7
 801101e:	d900      	bls.n	8011022 <__ssputs_r+0x86>
 8011020:	463e      	mov	r6, r7
 8011022:	6820      	ldr	r0, [r4, #0]
 8011024:	4632      	mov	r2, r6
 8011026:	4641      	mov	r1, r8
 8011028:	f000 f980 	bl	801132c <memmove>
 801102c:	68a3      	ldr	r3, [r4, #8]
 801102e:	1b9b      	subs	r3, r3, r6
 8011030:	60a3      	str	r3, [r4, #8]
 8011032:	6823      	ldr	r3, [r4, #0]
 8011034:	4433      	add	r3, r6
 8011036:	6023      	str	r3, [r4, #0]
 8011038:	2000      	movs	r0, #0
 801103a:	e7db      	b.n	8010ff4 <__ssputs_r+0x58>
 801103c:	462a      	mov	r2, r5
 801103e:	f000 f99b 	bl	8011378 <_realloc_r>
 8011042:	4606      	mov	r6, r0
 8011044:	2800      	cmp	r0, #0
 8011046:	d1e1      	bne.n	801100c <__ssputs_r+0x70>
 8011048:	6921      	ldr	r1, [r4, #16]
 801104a:	4650      	mov	r0, sl
 801104c:	f7ff fec6 	bl	8010ddc <_free_r>
 8011050:	e7c7      	b.n	8010fe2 <__ssputs_r+0x46>
	...

08011054 <_svfiprintf_r>:
 8011054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011058:	4698      	mov	r8, r3
 801105a:	898b      	ldrh	r3, [r1, #12]
 801105c:	061b      	lsls	r3, r3, #24
 801105e:	b09d      	sub	sp, #116	; 0x74
 8011060:	4607      	mov	r7, r0
 8011062:	460d      	mov	r5, r1
 8011064:	4614      	mov	r4, r2
 8011066:	d50e      	bpl.n	8011086 <_svfiprintf_r+0x32>
 8011068:	690b      	ldr	r3, [r1, #16]
 801106a:	b963      	cbnz	r3, 8011086 <_svfiprintf_r+0x32>
 801106c:	2140      	movs	r1, #64	; 0x40
 801106e:	f7ff ff21 	bl	8010eb4 <_malloc_r>
 8011072:	6028      	str	r0, [r5, #0]
 8011074:	6128      	str	r0, [r5, #16]
 8011076:	b920      	cbnz	r0, 8011082 <_svfiprintf_r+0x2e>
 8011078:	230c      	movs	r3, #12
 801107a:	603b      	str	r3, [r7, #0]
 801107c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011080:	e0d1      	b.n	8011226 <_svfiprintf_r+0x1d2>
 8011082:	2340      	movs	r3, #64	; 0x40
 8011084:	616b      	str	r3, [r5, #20]
 8011086:	2300      	movs	r3, #0
 8011088:	9309      	str	r3, [sp, #36]	; 0x24
 801108a:	2320      	movs	r3, #32
 801108c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011090:	f8cd 800c 	str.w	r8, [sp, #12]
 8011094:	2330      	movs	r3, #48	; 0x30
 8011096:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011240 <_svfiprintf_r+0x1ec>
 801109a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801109e:	f04f 0901 	mov.w	r9, #1
 80110a2:	4623      	mov	r3, r4
 80110a4:	469a      	mov	sl, r3
 80110a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110aa:	b10a      	cbz	r2, 80110b0 <_svfiprintf_r+0x5c>
 80110ac:	2a25      	cmp	r2, #37	; 0x25
 80110ae:	d1f9      	bne.n	80110a4 <_svfiprintf_r+0x50>
 80110b0:	ebba 0b04 	subs.w	fp, sl, r4
 80110b4:	d00b      	beq.n	80110ce <_svfiprintf_r+0x7a>
 80110b6:	465b      	mov	r3, fp
 80110b8:	4622      	mov	r2, r4
 80110ba:	4629      	mov	r1, r5
 80110bc:	4638      	mov	r0, r7
 80110be:	f7ff ff6d 	bl	8010f9c <__ssputs_r>
 80110c2:	3001      	adds	r0, #1
 80110c4:	f000 80aa 	beq.w	801121c <_svfiprintf_r+0x1c8>
 80110c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110ca:	445a      	add	r2, fp
 80110cc:	9209      	str	r2, [sp, #36]	; 0x24
 80110ce:	f89a 3000 	ldrb.w	r3, [sl]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f000 80a2 	beq.w	801121c <_svfiprintf_r+0x1c8>
 80110d8:	2300      	movs	r3, #0
 80110da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110e2:	f10a 0a01 	add.w	sl, sl, #1
 80110e6:	9304      	str	r3, [sp, #16]
 80110e8:	9307      	str	r3, [sp, #28]
 80110ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110ee:	931a      	str	r3, [sp, #104]	; 0x68
 80110f0:	4654      	mov	r4, sl
 80110f2:	2205      	movs	r2, #5
 80110f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110f8:	4851      	ldr	r0, [pc, #324]	; (8011240 <_svfiprintf_r+0x1ec>)
 80110fa:	f7ef f8a9 	bl	8000250 <memchr>
 80110fe:	9a04      	ldr	r2, [sp, #16]
 8011100:	b9d8      	cbnz	r0, 801113a <_svfiprintf_r+0xe6>
 8011102:	06d0      	lsls	r0, r2, #27
 8011104:	bf44      	itt	mi
 8011106:	2320      	movmi	r3, #32
 8011108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801110c:	0711      	lsls	r1, r2, #28
 801110e:	bf44      	itt	mi
 8011110:	232b      	movmi	r3, #43	; 0x2b
 8011112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011116:	f89a 3000 	ldrb.w	r3, [sl]
 801111a:	2b2a      	cmp	r3, #42	; 0x2a
 801111c:	d015      	beq.n	801114a <_svfiprintf_r+0xf6>
 801111e:	9a07      	ldr	r2, [sp, #28]
 8011120:	4654      	mov	r4, sl
 8011122:	2000      	movs	r0, #0
 8011124:	f04f 0c0a 	mov.w	ip, #10
 8011128:	4621      	mov	r1, r4
 801112a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801112e:	3b30      	subs	r3, #48	; 0x30
 8011130:	2b09      	cmp	r3, #9
 8011132:	d94e      	bls.n	80111d2 <_svfiprintf_r+0x17e>
 8011134:	b1b0      	cbz	r0, 8011164 <_svfiprintf_r+0x110>
 8011136:	9207      	str	r2, [sp, #28]
 8011138:	e014      	b.n	8011164 <_svfiprintf_r+0x110>
 801113a:	eba0 0308 	sub.w	r3, r0, r8
 801113e:	fa09 f303 	lsl.w	r3, r9, r3
 8011142:	4313      	orrs	r3, r2
 8011144:	9304      	str	r3, [sp, #16]
 8011146:	46a2      	mov	sl, r4
 8011148:	e7d2      	b.n	80110f0 <_svfiprintf_r+0x9c>
 801114a:	9b03      	ldr	r3, [sp, #12]
 801114c:	1d19      	adds	r1, r3, #4
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	9103      	str	r1, [sp, #12]
 8011152:	2b00      	cmp	r3, #0
 8011154:	bfbb      	ittet	lt
 8011156:	425b      	neglt	r3, r3
 8011158:	f042 0202 	orrlt.w	r2, r2, #2
 801115c:	9307      	strge	r3, [sp, #28]
 801115e:	9307      	strlt	r3, [sp, #28]
 8011160:	bfb8      	it	lt
 8011162:	9204      	strlt	r2, [sp, #16]
 8011164:	7823      	ldrb	r3, [r4, #0]
 8011166:	2b2e      	cmp	r3, #46	; 0x2e
 8011168:	d10c      	bne.n	8011184 <_svfiprintf_r+0x130>
 801116a:	7863      	ldrb	r3, [r4, #1]
 801116c:	2b2a      	cmp	r3, #42	; 0x2a
 801116e:	d135      	bne.n	80111dc <_svfiprintf_r+0x188>
 8011170:	9b03      	ldr	r3, [sp, #12]
 8011172:	1d1a      	adds	r2, r3, #4
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	9203      	str	r2, [sp, #12]
 8011178:	2b00      	cmp	r3, #0
 801117a:	bfb8      	it	lt
 801117c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011180:	3402      	adds	r4, #2
 8011182:	9305      	str	r3, [sp, #20]
 8011184:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011250 <_svfiprintf_r+0x1fc>
 8011188:	7821      	ldrb	r1, [r4, #0]
 801118a:	2203      	movs	r2, #3
 801118c:	4650      	mov	r0, sl
 801118e:	f7ef f85f 	bl	8000250 <memchr>
 8011192:	b140      	cbz	r0, 80111a6 <_svfiprintf_r+0x152>
 8011194:	2340      	movs	r3, #64	; 0x40
 8011196:	eba0 000a 	sub.w	r0, r0, sl
 801119a:	fa03 f000 	lsl.w	r0, r3, r0
 801119e:	9b04      	ldr	r3, [sp, #16]
 80111a0:	4303      	orrs	r3, r0
 80111a2:	3401      	adds	r4, #1
 80111a4:	9304      	str	r3, [sp, #16]
 80111a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111aa:	4826      	ldr	r0, [pc, #152]	; (8011244 <_svfiprintf_r+0x1f0>)
 80111ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111b0:	2206      	movs	r2, #6
 80111b2:	f7ef f84d 	bl	8000250 <memchr>
 80111b6:	2800      	cmp	r0, #0
 80111b8:	d038      	beq.n	801122c <_svfiprintf_r+0x1d8>
 80111ba:	4b23      	ldr	r3, [pc, #140]	; (8011248 <_svfiprintf_r+0x1f4>)
 80111bc:	bb1b      	cbnz	r3, 8011206 <_svfiprintf_r+0x1b2>
 80111be:	9b03      	ldr	r3, [sp, #12]
 80111c0:	3307      	adds	r3, #7
 80111c2:	f023 0307 	bic.w	r3, r3, #7
 80111c6:	3308      	adds	r3, #8
 80111c8:	9303      	str	r3, [sp, #12]
 80111ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111cc:	4433      	add	r3, r6
 80111ce:	9309      	str	r3, [sp, #36]	; 0x24
 80111d0:	e767      	b.n	80110a2 <_svfiprintf_r+0x4e>
 80111d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80111d6:	460c      	mov	r4, r1
 80111d8:	2001      	movs	r0, #1
 80111da:	e7a5      	b.n	8011128 <_svfiprintf_r+0xd4>
 80111dc:	2300      	movs	r3, #0
 80111de:	3401      	adds	r4, #1
 80111e0:	9305      	str	r3, [sp, #20]
 80111e2:	4619      	mov	r1, r3
 80111e4:	f04f 0c0a 	mov.w	ip, #10
 80111e8:	4620      	mov	r0, r4
 80111ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111ee:	3a30      	subs	r2, #48	; 0x30
 80111f0:	2a09      	cmp	r2, #9
 80111f2:	d903      	bls.n	80111fc <_svfiprintf_r+0x1a8>
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d0c5      	beq.n	8011184 <_svfiprintf_r+0x130>
 80111f8:	9105      	str	r1, [sp, #20]
 80111fa:	e7c3      	b.n	8011184 <_svfiprintf_r+0x130>
 80111fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011200:	4604      	mov	r4, r0
 8011202:	2301      	movs	r3, #1
 8011204:	e7f0      	b.n	80111e8 <_svfiprintf_r+0x194>
 8011206:	ab03      	add	r3, sp, #12
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	462a      	mov	r2, r5
 801120c:	4b0f      	ldr	r3, [pc, #60]	; (801124c <_svfiprintf_r+0x1f8>)
 801120e:	a904      	add	r1, sp, #16
 8011210:	4638      	mov	r0, r7
 8011212:	f7fc fa33 	bl	800d67c <_printf_float>
 8011216:	1c42      	adds	r2, r0, #1
 8011218:	4606      	mov	r6, r0
 801121a:	d1d6      	bne.n	80111ca <_svfiprintf_r+0x176>
 801121c:	89ab      	ldrh	r3, [r5, #12]
 801121e:	065b      	lsls	r3, r3, #25
 8011220:	f53f af2c 	bmi.w	801107c <_svfiprintf_r+0x28>
 8011224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011226:	b01d      	add	sp, #116	; 0x74
 8011228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801122c:	ab03      	add	r3, sp, #12
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	462a      	mov	r2, r5
 8011232:	4b06      	ldr	r3, [pc, #24]	; (801124c <_svfiprintf_r+0x1f8>)
 8011234:	a904      	add	r1, sp, #16
 8011236:	4638      	mov	r0, r7
 8011238:	f7fc fcc4 	bl	800dbc4 <_printf_i>
 801123c:	e7eb      	b.n	8011216 <_svfiprintf_r+0x1c2>
 801123e:	bf00      	nop
 8011240:	0801242c 	.word	0x0801242c
 8011244:	08012436 	.word	0x08012436
 8011248:	0800d67d 	.word	0x0800d67d
 801124c:	08010f9d 	.word	0x08010f9d
 8011250:	08012432 	.word	0x08012432
 8011254:	00000000 	.word	0x00000000

08011258 <nan>:
 8011258:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011260 <nan+0x8>
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	00000000 	.word	0x00000000
 8011264:	7ff80000 	.word	0x7ff80000

08011268 <_sbrk_r>:
 8011268:	b538      	push	{r3, r4, r5, lr}
 801126a:	4d06      	ldr	r5, [pc, #24]	; (8011284 <_sbrk_r+0x1c>)
 801126c:	2300      	movs	r3, #0
 801126e:	4604      	mov	r4, r0
 8011270:	4608      	mov	r0, r1
 8011272:	602b      	str	r3, [r5, #0]
 8011274:	f7f1 fb58 	bl	8002928 <_sbrk>
 8011278:	1c43      	adds	r3, r0, #1
 801127a:	d102      	bne.n	8011282 <_sbrk_r+0x1a>
 801127c:	682b      	ldr	r3, [r5, #0]
 801127e:	b103      	cbz	r3, 8011282 <_sbrk_r+0x1a>
 8011280:	6023      	str	r3, [r4, #0]
 8011282:	bd38      	pop	{r3, r4, r5, pc}
 8011284:	200012fc 	.word	0x200012fc

08011288 <strncmp>:
 8011288:	b510      	push	{r4, lr}
 801128a:	b17a      	cbz	r2, 80112ac <strncmp+0x24>
 801128c:	4603      	mov	r3, r0
 801128e:	3901      	subs	r1, #1
 8011290:	1884      	adds	r4, r0, r2
 8011292:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011296:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801129a:	4290      	cmp	r0, r2
 801129c:	d101      	bne.n	80112a2 <strncmp+0x1a>
 801129e:	42a3      	cmp	r3, r4
 80112a0:	d101      	bne.n	80112a6 <strncmp+0x1e>
 80112a2:	1a80      	subs	r0, r0, r2
 80112a4:	bd10      	pop	{r4, pc}
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d1f3      	bne.n	8011292 <strncmp+0xa>
 80112aa:	e7fa      	b.n	80112a2 <strncmp+0x1a>
 80112ac:	4610      	mov	r0, r2
 80112ae:	e7f9      	b.n	80112a4 <strncmp+0x1c>

080112b0 <__ascii_wctomb>:
 80112b0:	b149      	cbz	r1, 80112c6 <__ascii_wctomb+0x16>
 80112b2:	2aff      	cmp	r2, #255	; 0xff
 80112b4:	bf85      	ittet	hi
 80112b6:	238a      	movhi	r3, #138	; 0x8a
 80112b8:	6003      	strhi	r3, [r0, #0]
 80112ba:	700a      	strbls	r2, [r1, #0]
 80112bc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80112c0:	bf98      	it	ls
 80112c2:	2001      	movls	r0, #1
 80112c4:	4770      	bx	lr
 80112c6:	4608      	mov	r0, r1
 80112c8:	4770      	bx	lr
	...

080112cc <__assert_func>:
 80112cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112ce:	4614      	mov	r4, r2
 80112d0:	461a      	mov	r2, r3
 80112d2:	4b09      	ldr	r3, [pc, #36]	; (80112f8 <__assert_func+0x2c>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4605      	mov	r5, r0
 80112d8:	68d8      	ldr	r0, [r3, #12]
 80112da:	b14c      	cbz	r4, 80112f0 <__assert_func+0x24>
 80112dc:	4b07      	ldr	r3, [pc, #28]	; (80112fc <__assert_func+0x30>)
 80112de:	9100      	str	r1, [sp, #0]
 80112e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112e4:	4906      	ldr	r1, [pc, #24]	; (8011300 <__assert_func+0x34>)
 80112e6:	462b      	mov	r3, r5
 80112e8:	f000 f80e 	bl	8011308 <fiprintf>
 80112ec:	f000 fa8c 	bl	8011808 <abort>
 80112f0:	4b04      	ldr	r3, [pc, #16]	; (8011304 <__assert_func+0x38>)
 80112f2:	461c      	mov	r4, r3
 80112f4:	e7f3      	b.n	80112de <__assert_func+0x12>
 80112f6:	bf00      	nop
 80112f8:	20000010 	.word	0x20000010
 80112fc:	0801243d 	.word	0x0801243d
 8011300:	0801244a 	.word	0x0801244a
 8011304:	08012478 	.word	0x08012478

08011308 <fiprintf>:
 8011308:	b40e      	push	{r1, r2, r3}
 801130a:	b503      	push	{r0, r1, lr}
 801130c:	4601      	mov	r1, r0
 801130e:	ab03      	add	r3, sp, #12
 8011310:	4805      	ldr	r0, [pc, #20]	; (8011328 <fiprintf+0x20>)
 8011312:	f853 2b04 	ldr.w	r2, [r3], #4
 8011316:	6800      	ldr	r0, [r0, #0]
 8011318:	9301      	str	r3, [sp, #4]
 801131a:	f000 f885 	bl	8011428 <_vfiprintf_r>
 801131e:	b002      	add	sp, #8
 8011320:	f85d eb04 	ldr.w	lr, [sp], #4
 8011324:	b003      	add	sp, #12
 8011326:	4770      	bx	lr
 8011328:	20000010 	.word	0x20000010

0801132c <memmove>:
 801132c:	4288      	cmp	r0, r1
 801132e:	b510      	push	{r4, lr}
 8011330:	eb01 0402 	add.w	r4, r1, r2
 8011334:	d902      	bls.n	801133c <memmove+0x10>
 8011336:	4284      	cmp	r4, r0
 8011338:	4623      	mov	r3, r4
 801133a:	d807      	bhi.n	801134c <memmove+0x20>
 801133c:	1e43      	subs	r3, r0, #1
 801133e:	42a1      	cmp	r1, r4
 8011340:	d008      	beq.n	8011354 <memmove+0x28>
 8011342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011346:	f803 2f01 	strb.w	r2, [r3, #1]!
 801134a:	e7f8      	b.n	801133e <memmove+0x12>
 801134c:	4402      	add	r2, r0
 801134e:	4601      	mov	r1, r0
 8011350:	428a      	cmp	r2, r1
 8011352:	d100      	bne.n	8011356 <memmove+0x2a>
 8011354:	bd10      	pop	{r4, pc}
 8011356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801135a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801135e:	e7f7      	b.n	8011350 <memmove+0x24>

08011360 <__malloc_lock>:
 8011360:	4801      	ldr	r0, [pc, #4]	; (8011368 <__malloc_lock+0x8>)
 8011362:	f000 bc11 	b.w	8011b88 <__retarget_lock_acquire_recursive>
 8011366:	bf00      	nop
 8011368:	20001300 	.word	0x20001300

0801136c <__malloc_unlock>:
 801136c:	4801      	ldr	r0, [pc, #4]	; (8011374 <__malloc_unlock+0x8>)
 801136e:	f000 bc0c 	b.w	8011b8a <__retarget_lock_release_recursive>
 8011372:	bf00      	nop
 8011374:	20001300 	.word	0x20001300

08011378 <_realloc_r>:
 8011378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801137c:	4680      	mov	r8, r0
 801137e:	4614      	mov	r4, r2
 8011380:	460e      	mov	r6, r1
 8011382:	b921      	cbnz	r1, 801138e <_realloc_r+0x16>
 8011384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011388:	4611      	mov	r1, r2
 801138a:	f7ff bd93 	b.w	8010eb4 <_malloc_r>
 801138e:	b92a      	cbnz	r2, 801139c <_realloc_r+0x24>
 8011390:	f7ff fd24 	bl	8010ddc <_free_r>
 8011394:	4625      	mov	r5, r4
 8011396:	4628      	mov	r0, r5
 8011398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801139c:	f000 fc5c 	bl	8011c58 <_malloc_usable_size_r>
 80113a0:	4284      	cmp	r4, r0
 80113a2:	4607      	mov	r7, r0
 80113a4:	d802      	bhi.n	80113ac <_realloc_r+0x34>
 80113a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80113aa:	d812      	bhi.n	80113d2 <_realloc_r+0x5a>
 80113ac:	4621      	mov	r1, r4
 80113ae:	4640      	mov	r0, r8
 80113b0:	f7ff fd80 	bl	8010eb4 <_malloc_r>
 80113b4:	4605      	mov	r5, r0
 80113b6:	2800      	cmp	r0, #0
 80113b8:	d0ed      	beq.n	8011396 <_realloc_r+0x1e>
 80113ba:	42bc      	cmp	r4, r7
 80113bc:	4622      	mov	r2, r4
 80113be:	4631      	mov	r1, r6
 80113c0:	bf28      	it	cs
 80113c2:	463a      	movcs	r2, r7
 80113c4:	f7ff f824 	bl	8010410 <memcpy>
 80113c8:	4631      	mov	r1, r6
 80113ca:	4640      	mov	r0, r8
 80113cc:	f7ff fd06 	bl	8010ddc <_free_r>
 80113d0:	e7e1      	b.n	8011396 <_realloc_r+0x1e>
 80113d2:	4635      	mov	r5, r6
 80113d4:	e7df      	b.n	8011396 <_realloc_r+0x1e>

080113d6 <__sfputc_r>:
 80113d6:	6893      	ldr	r3, [r2, #8]
 80113d8:	3b01      	subs	r3, #1
 80113da:	2b00      	cmp	r3, #0
 80113dc:	b410      	push	{r4}
 80113de:	6093      	str	r3, [r2, #8]
 80113e0:	da08      	bge.n	80113f4 <__sfputc_r+0x1e>
 80113e2:	6994      	ldr	r4, [r2, #24]
 80113e4:	42a3      	cmp	r3, r4
 80113e6:	db01      	blt.n	80113ec <__sfputc_r+0x16>
 80113e8:	290a      	cmp	r1, #10
 80113ea:	d103      	bne.n	80113f4 <__sfputc_r+0x1e>
 80113ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113f0:	f000 b94a 	b.w	8011688 <__swbuf_r>
 80113f4:	6813      	ldr	r3, [r2, #0]
 80113f6:	1c58      	adds	r0, r3, #1
 80113f8:	6010      	str	r0, [r2, #0]
 80113fa:	7019      	strb	r1, [r3, #0]
 80113fc:	4608      	mov	r0, r1
 80113fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011402:	4770      	bx	lr

08011404 <__sfputs_r>:
 8011404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011406:	4606      	mov	r6, r0
 8011408:	460f      	mov	r7, r1
 801140a:	4614      	mov	r4, r2
 801140c:	18d5      	adds	r5, r2, r3
 801140e:	42ac      	cmp	r4, r5
 8011410:	d101      	bne.n	8011416 <__sfputs_r+0x12>
 8011412:	2000      	movs	r0, #0
 8011414:	e007      	b.n	8011426 <__sfputs_r+0x22>
 8011416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141a:	463a      	mov	r2, r7
 801141c:	4630      	mov	r0, r6
 801141e:	f7ff ffda 	bl	80113d6 <__sfputc_r>
 8011422:	1c43      	adds	r3, r0, #1
 8011424:	d1f3      	bne.n	801140e <__sfputs_r+0xa>
 8011426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011428 <_vfiprintf_r>:
 8011428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142c:	460d      	mov	r5, r1
 801142e:	b09d      	sub	sp, #116	; 0x74
 8011430:	4614      	mov	r4, r2
 8011432:	4698      	mov	r8, r3
 8011434:	4606      	mov	r6, r0
 8011436:	b118      	cbz	r0, 8011440 <_vfiprintf_r+0x18>
 8011438:	6983      	ldr	r3, [r0, #24]
 801143a:	b90b      	cbnz	r3, 8011440 <_vfiprintf_r+0x18>
 801143c:	f000 fb06 	bl	8011a4c <__sinit>
 8011440:	4b89      	ldr	r3, [pc, #548]	; (8011668 <_vfiprintf_r+0x240>)
 8011442:	429d      	cmp	r5, r3
 8011444:	d11b      	bne.n	801147e <_vfiprintf_r+0x56>
 8011446:	6875      	ldr	r5, [r6, #4]
 8011448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801144a:	07d9      	lsls	r1, r3, #31
 801144c:	d405      	bmi.n	801145a <_vfiprintf_r+0x32>
 801144e:	89ab      	ldrh	r3, [r5, #12]
 8011450:	059a      	lsls	r2, r3, #22
 8011452:	d402      	bmi.n	801145a <_vfiprintf_r+0x32>
 8011454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011456:	f000 fb97 	bl	8011b88 <__retarget_lock_acquire_recursive>
 801145a:	89ab      	ldrh	r3, [r5, #12]
 801145c:	071b      	lsls	r3, r3, #28
 801145e:	d501      	bpl.n	8011464 <_vfiprintf_r+0x3c>
 8011460:	692b      	ldr	r3, [r5, #16]
 8011462:	b9eb      	cbnz	r3, 80114a0 <_vfiprintf_r+0x78>
 8011464:	4629      	mov	r1, r5
 8011466:	4630      	mov	r0, r6
 8011468:	f000 f960 	bl	801172c <__swsetup_r>
 801146c:	b1c0      	cbz	r0, 80114a0 <_vfiprintf_r+0x78>
 801146e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011470:	07dc      	lsls	r4, r3, #31
 8011472:	d50e      	bpl.n	8011492 <_vfiprintf_r+0x6a>
 8011474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011478:	b01d      	add	sp, #116	; 0x74
 801147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147e:	4b7b      	ldr	r3, [pc, #492]	; (801166c <_vfiprintf_r+0x244>)
 8011480:	429d      	cmp	r5, r3
 8011482:	d101      	bne.n	8011488 <_vfiprintf_r+0x60>
 8011484:	68b5      	ldr	r5, [r6, #8]
 8011486:	e7df      	b.n	8011448 <_vfiprintf_r+0x20>
 8011488:	4b79      	ldr	r3, [pc, #484]	; (8011670 <_vfiprintf_r+0x248>)
 801148a:	429d      	cmp	r5, r3
 801148c:	bf08      	it	eq
 801148e:	68f5      	ldreq	r5, [r6, #12]
 8011490:	e7da      	b.n	8011448 <_vfiprintf_r+0x20>
 8011492:	89ab      	ldrh	r3, [r5, #12]
 8011494:	0598      	lsls	r0, r3, #22
 8011496:	d4ed      	bmi.n	8011474 <_vfiprintf_r+0x4c>
 8011498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801149a:	f000 fb76 	bl	8011b8a <__retarget_lock_release_recursive>
 801149e:	e7e9      	b.n	8011474 <_vfiprintf_r+0x4c>
 80114a0:	2300      	movs	r3, #0
 80114a2:	9309      	str	r3, [sp, #36]	; 0x24
 80114a4:	2320      	movs	r3, #32
 80114a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80114ae:	2330      	movs	r3, #48	; 0x30
 80114b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011674 <_vfiprintf_r+0x24c>
 80114b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114b8:	f04f 0901 	mov.w	r9, #1
 80114bc:	4623      	mov	r3, r4
 80114be:	469a      	mov	sl, r3
 80114c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114c4:	b10a      	cbz	r2, 80114ca <_vfiprintf_r+0xa2>
 80114c6:	2a25      	cmp	r2, #37	; 0x25
 80114c8:	d1f9      	bne.n	80114be <_vfiprintf_r+0x96>
 80114ca:	ebba 0b04 	subs.w	fp, sl, r4
 80114ce:	d00b      	beq.n	80114e8 <_vfiprintf_r+0xc0>
 80114d0:	465b      	mov	r3, fp
 80114d2:	4622      	mov	r2, r4
 80114d4:	4629      	mov	r1, r5
 80114d6:	4630      	mov	r0, r6
 80114d8:	f7ff ff94 	bl	8011404 <__sfputs_r>
 80114dc:	3001      	adds	r0, #1
 80114de:	f000 80aa 	beq.w	8011636 <_vfiprintf_r+0x20e>
 80114e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114e4:	445a      	add	r2, fp
 80114e6:	9209      	str	r2, [sp, #36]	; 0x24
 80114e8:	f89a 3000 	ldrb.w	r3, [sl]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	f000 80a2 	beq.w	8011636 <_vfiprintf_r+0x20e>
 80114f2:	2300      	movs	r3, #0
 80114f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114fc:	f10a 0a01 	add.w	sl, sl, #1
 8011500:	9304      	str	r3, [sp, #16]
 8011502:	9307      	str	r3, [sp, #28]
 8011504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011508:	931a      	str	r3, [sp, #104]	; 0x68
 801150a:	4654      	mov	r4, sl
 801150c:	2205      	movs	r2, #5
 801150e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011512:	4858      	ldr	r0, [pc, #352]	; (8011674 <_vfiprintf_r+0x24c>)
 8011514:	f7ee fe9c 	bl	8000250 <memchr>
 8011518:	9a04      	ldr	r2, [sp, #16]
 801151a:	b9d8      	cbnz	r0, 8011554 <_vfiprintf_r+0x12c>
 801151c:	06d1      	lsls	r1, r2, #27
 801151e:	bf44      	itt	mi
 8011520:	2320      	movmi	r3, #32
 8011522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011526:	0713      	lsls	r3, r2, #28
 8011528:	bf44      	itt	mi
 801152a:	232b      	movmi	r3, #43	; 0x2b
 801152c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011530:	f89a 3000 	ldrb.w	r3, [sl]
 8011534:	2b2a      	cmp	r3, #42	; 0x2a
 8011536:	d015      	beq.n	8011564 <_vfiprintf_r+0x13c>
 8011538:	9a07      	ldr	r2, [sp, #28]
 801153a:	4654      	mov	r4, sl
 801153c:	2000      	movs	r0, #0
 801153e:	f04f 0c0a 	mov.w	ip, #10
 8011542:	4621      	mov	r1, r4
 8011544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011548:	3b30      	subs	r3, #48	; 0x30
 801154a:	2b09      	cmp	r3, #9
 801154c:	d94e      	bls.n	80115ec <_vfiprintf_r+0x1c4>
 801154e:	b1b0      	cbz	r0, 801157e <_vfiprintf_r+0x156>
 8011550:	9207      	str	r2, [sp, #28]
 8011552:	e014      	b.n	801157e <_vfiprintf_r+0x156>
 8011554:	eba0 0308 	sub.w	r3, r0, r8
 8011558:	fa09 f303 	lsl.w	r3, r9, r3
 801155c:	4313      	orrs	r3, r2
 801155e:	9304      	str	r3, [sp, #16]
 8011560:	46a2      	mov	sl, r4
 8011562:	e7d2      	b.n	801150a <_vfiprintf_r+0xe2>
 8011564:	9b03      	ldr	r3, [sp, #12]
 8011566:	1d19      	adds	r1, r3, #4
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	9103      	str	r1, [sp, #12]
 801156c:	2b00      	cmp	r3, #0
 801156e:	bfbb      	ittet	lt
 8011570:	425b      	neglt	r3, r3
 8011572:	f042 0202 	orrlt.w	r2, r2, #2
 8011576:	9307      	strge	r3, [sp, #28]
 8011578:	9307      	strlt	r3, [sp, #28]
 801157a:	bfb8      	it	lt
 801157c:	9204      	strlt	r2, [sp, #16]
 801157e:	7823      	ldrb	r3, [r4, #0]
 8011580:	2b2e      	cmp	r3, #46	; 0x2e
 8011582:	d10c      	bne.n	801159e <_vfiprintf_r+0x176>
 8011584:	7863      	ldrb	r3, [r4, #1]
 8011586:	2b2a      	cmp	r3, #42	; 0x2a
 8011588:	d135      	bne.n	80115f6 <_vfiprintf_r+0x1ce>
 801158a:	9b03      	ldr	r3, [sp, #12]
 801158c:	1d1a      	adds	r2, r3, #4
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	9203      	str	r2, [sp, #12]
 8011592:	2b00      	cmp	r3, #0
 8011594:	bfb8      	it	lt
 8011596:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801159a:	3402      	adds	r4, #2
 801159c:	9305      	str	r3, [sp, #20]
 801159e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011684 <_vfiprintf_r+0x25c>
 80115a2:	7821      	ldrb	r1, [r4, #0]
 80115a4:	2203      	movs	r2, #3
 80115a6:	4650      	mov	r0, sl
 80115a8:	f7ee fe52 	bl	8000250 <memchr>
 80115ac:	b140      	cbz	r0, 80115c0 <_vfiprintf_r+0x198>
 80115ae:	2340      	movs	r3, #64	; 0x40
 80115b0:	eba0 000a 	sub.w	r0, r0, sl
 80115b4:	fa03 f000 	lsl.w	r0, r3, r0
 80115b8:	9b04      	ldr	r3, [sp, #16]
 80115ba:	4303      	orrs	r3, r0
 80115bc:	3401      	adds	r4, #1
 80115be:	9304      	str	r3, [sp, #16]
 80115c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c4:	482c      	ldr	r0, [pc, #176]	; (8011678 <_vfiprintf_r+0x250>)
 80115c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115ca:	2206      	movs	r2, #6
 80115cc:	f7ee fe40 	bl	8000250 <memchr>
 80115d0:	2800      	cmp	r0, #0
 80115d2:	d03f      	beq.n	8011654 <_vfiprintf_r+0x22c>
 80115d4:	4b29      	ldr	r3, [pc, #164]	; (801167c <_vfiprintf_r+0x254>)
 80115d6:	bb1b      	cbnz	r3, 8011620 <_vfiprintf_r+0x1f8>
 80115d8:	9b03      	ldr	r3, [sp, #12]
 80115da:	3307      	adds	r3, #7
 80115dc:	f023 0307 	bic.w	r3, r3, #7
 80115e0:	3308      	adds	r3, #8
 80115e2:	9303      	str	r3, [sp, #12]
 80115e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115e6:	443b      	add	r3, r7
 80115e8:	9309      	str	r3, [sp, #36]	; 0x24
 80115ea:	e767      	b.n	80114bc <_vfiprintf_r+0x94>
 80115ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80115f0:	460c      	mov	r4, r1
 80115f2:	2001      	movs	r0, #1
 80115f4:	e7a5      	b.n	8011542 <_vfiprintf_r+0x11a>
 80115f6:	2300      	movs	r3, #0
 80115f8:	3401      	adds	r4, #1
 80115fa:	9305      	str	r3, [sp, #20]
 80115fc:	4619      	mov	r1, r3
 80115fe:	f04f 0c0a 	mov.w	ip, #10
 8011602:	4620      	mov	r0, r4
 8011604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011608:	3a30      	subs	r2, #48	; 0x30
 801160a:	2a09      	cmp	r2, #9
 801160c:	d903      	bls.n	8011616 <_vfiprintf_r+0x1ee>
 801160e:	2b00      	cmp	r3, #0
 8011610:	d0c5      	beq.n	801159e <_vfiprintf_r+0x176>
 8011612:	9105      	str	r1, [sp, #20]
 8011614:	e7c3      	b.n	801159e <_vfiprintf_r+0x176>
 8011616:	fb0c 2101 	mla	r1, ip, r1, r2
 801161a:	4604      	mov	r4, r0
 801161c:	2301      	movs	r3, #1
 801161e:	e7f0      	b.n	8011602 <_vfiprintf_r+0x1da>
 8011620:	ab03      	add	r3, sp, #12
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	462a      	mov	r2, r5
 8011626:	4b16      	ldr	r3, [pc, #88]	; (8011680 <_vfiprintf_r+0x258>)
 8011628:	a904      	add	r1, sp, #16
 801162a:	4630      	mov	r0, r6
 801162c:	f7fc f826 	bl	800d67c <_printf_float>
 8011630:	4607      	mov	r7, r0
 8011632:	1c78      	adds	r0, r7, #1
 8011634:	d1d6      	bne.n	80115e4 <_vfiprintf_r+0x1bc>
 8011636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011638:	07d9      	lsls	r1, r3, #31
 801163a:	d405      	bmi.n	8011648 <_vfiprintf_r+0x220>
 801163c:	89ab      	ldrh	r3, [r5, #12]
 801163e:	059a      	lsls	r2, r3, #22
 8011640:	d402      	bmi.n	8011648 <_vfiprintf_r+0x220>
 8011642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011644:	f000 faa1 	bl	8011b8a <__retarget_lock_release_recursive>
 8011648:	89ab      	ldrh	r3, [r5, #12]
 801164a:	065b      	lsls	r3, r3, #25
 801164c:	f53f af12 	bmi.w	8011474 <_vfiprintf_r+0x4c>
 8011650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011652:	e711      	b.n	8011478 <_vfiprintf_r+0x50>
 8011654:	ab03      	add	r3, sp, #12
 8011656:	9300      	str	r3, [sp, #0]
 8011658:	462a      	mov	r2, r5
 801165a:	4b09      	ldr	r3, [pc, #36]	; (8011680 <_vfiprintf_r+0x258>)
 801165c:	a904      	add	r1, sp, #16
 801165e:	4630      	mov	r0, r6
 8011660:	f7fc fab0 	bl	800dbc4 <_printf_i>
 8011664:	e7e4      	b.n	8011630 <_vfiprintf_r+0x208>
 8011666:	bf00      	nop
 8011668:	0801249c 	.word	0x0801249c
 801166c:	080124bc 	.word	0x080124bc
 8011670:	0801247c 	.word	0x0801247c
 8011674:	0801242c 	.word	0x0801242c
 8011678:	08012436 	.word	0x08012436
 801167c:	0800d67d 	.word	0x0800d67d
 8011680:	08011405 	.word	0x08011405
 8011684:	08012432 	.word	0x08012432

08011688 <__swbuf_r>:
 8011688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168a:	460e      	mov	r6, r1
 801168c:	4614      	mov	r4, r2
 801168e:	4605      	mov	r5, r0
 8011690:	b118      	cbz	r0, 801169a <__swbuf_r+0x12>
 8011692:	6983      	ldr	r3, [r0, #24]
 8011694:	b90b      	cbnz	r3, 801169a <__swbuf_r+0x12>
 8011696:	f000 f9d9 	bl	8011a4c <__sinit>
 801169a:	4b21      	ldr	r3, [pc, #132]	; (8011720 <__swbuf_r+0x98>)
 801169c:	429c      	cmp	r4, r3
 801169e:	d12b      	bne.n	80116f8 <__swbuf_r+0x70>
 80116a0:	686c      	ldr	r4, [r5, #4]
 80116a2:	69a3      	ldr	r3, [r4, #24]
 80116a4:	60a3      	str	r3, [r4, #8]
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	071a      	lsls	r2, r3, #28
 80116aa:	d52f      	bpl.n	801170c <__swbuf_r+0x84>
 80116ac:	6923      	ldr	r3, [r4, #16]
 80116ae:	b36b      	cbz	r3, 801170c <__swbuf_r+0x84>
 80116b0:	6923      	ldr	r3, [r4, #16]
 80116b2:	6820      	ldr	r0, [r4, #0]
 80116b4:	1ac0      	subs	r0, r0, r3
 80116b6:	6963      	ldr	r3, [r4, #20]
 80116b8:	b2f6      	uxtb	r6, r6
 80116ba:	4283      	cmp	r3, r0
 80116bc:	4637      	mov	r7, r6
 80116be:	dc04      	bgt.n	80116ca <__swbuf_r+0x42>
 80116c0:	4621      	mov	r1, r4
 80116c2:	4628      	mov	r0, r5
 80116c4:	f000 f92e 	bl	8011924 <_fflush_r>
 80116c8:	bb30      	cbnz	r0, 8011718 <__swbuf_r+0x90>
 80116ca:	68a3      	ldr	r3, [r4, #8]
 80116cc:	3b01      	subs	r3, #1
 80116ce:	60a3      	str	r3, [r4, #8]
 80116d0:	6823      	ldr	r3, [r4, #0]
 80116d2:	1c5a      	adds	r2, r3, #1
 80116d4:	6022      	str	r2, [r4, #0]
 80116d6:	701e      	strb	r6, [r3, #0]
 80116d8:	6963      	ldr	r3, [r4, #20]
 80116da:	3001      	adds	r0, #1
 80116dc:	4283      	cmp	r3, r0
 80116de:	d004      	beq.n	80116ea <__swbuf_r+0x62>
 80116e0:	89a3      	ldrh	r3, [r4, #12]
 80116e2:	07db      	lsls	r3, r3, #31
 80116e4:	d506      	bpl.n	80116f4 <__swbuf_r+0x6c>
 80116e6:	2e0a      	cmp	r6, #10
 80116e8:	d104      	bne.n	80116f4 <__swbuf_r+0x6c>
 80116ea:	4621      	mov	r1, r4
 80116ec:	4628      	mov	r0, r5
 80116ee:	f000 f919 	bl	8011924 <_fflush_r>
 80116f2:	b988      	cbnz	r0, 8011718 <__swbuf_r+0x90>
 80116f4:	4638      	mov	r0, r7
 80116f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116f8:	4b0a      	ldr	r3, [pc, #40]	; (8011724 <__swbuf_r+0x9c>)
 80116fa:	429c      	cmp	r4, r3
 80116fc:	d101      	bne.n	8011702 <__swbuf_r+0x7a>
 80116fe:	68ac      	ldr	r4, [r5, #8]
 8011700:	e7cf      	b.n	80116a2 <__swbuf_r+0x1a>
 8011702:	4b09      	ldr	r3, [pc, #36]	; (8011728 <__swbuf_r+0xa0>)
 8011704:	429c      	cmp	r4, r3
 8011706:	bf08      	it	eq
 8011708:	68ec      	ldreq	r4, [r5, #12]
 801170a:	e7ca      	b.n	80116a2 <__swbuf_r+0x1a>
 801170c:	4621      	mov	r1, r4
 801170e:	4628      	mov	r0, r5
 8011710:	f000 f80c 	bl	801172c <__swsetup_r>
 8011714:	2800      	cmp	r0, #0
 8011716:	d0cb      	beq.n	80116b0 <__swbuf_r+0x28>
 8011718:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801171c:	e7ea      	b.n	80116f4 <__swbuf_r+0x6c>
 801171e:	bf00      	nop
 8011720:	0801249c 	.word	0x0801249c
 8011724:	080124bc 	.word	0x080124bc
 8011728:	0801247c 	.word	0x0801247c

0801172c <__swsetup_r>:
 801172c:	4b32      	ldr	r3, [pc, #200]	; (80117f8 <__swsetup_r+0xcc>)
 801172e:	b570      	push	{r4, r5, r6, lr}
 8011730:	681d      	ldr	r5, [r3, #0]
 8011732:	4606      	mov	r6, r0
 8011734:	460c      	mov	r4, r1
 8011736:	b125      	cbz	r5, 8011742 <__swsetup_r+0x16>
 8011738:	69ab      	ldr	r3, [r5, #24]
 801173a:	b913      	cbnz	r3, 8011742 <__swsetup_r+0x16>
 801173c:	4628      	mov	r0, r5
 801173e:	f000 f985 	bl	8011a4c <__sinit>
 8011742:	4b2e      	ldr	r3, [pc, #184]	; (80117fc <__swsetup_r+0xd0>)
 8011744:	429c      	cmp	r4, r3
 8011746:	d10f      	bne.n	8011768 <__swsetup_r+0x3c>
 8011748:	686c      	ldr	r4, [r5, #4]
 801174a:	89a3      	ldrh	r3, [r4, #12]
 801174c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011750:	0719      	lsls	r1, r3, #28
 8011752:	d42c      	bmi.n	80117ae <__swsetup_r+0x82>
 8011754:	06dd      	lsls	r5, r3, #27
 8011756:	d411      	bmi.n	801177c <__swsetup_r+0x50>
 8011758:	2309      	movs	r3, #9
 801175a:	6033      	str	r3, [r6, #0]
 801175c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011760:	81a3      	strh	r3, [r4, #12]
 8011762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011766:	e03e      	b.n	80117e6 <__swsetup_r+0xba>
 8011768:	4b25      	ldr	r3, [pc, #148]	; (8011800 <__swsetup_r+0xd4>)
 801176a:	429c      	cmp	r4, r3
 801176c:	d101      	bne.n	8011772 <__swsetup_r+0x46>
 801176e:	68ac      	ldr	r4, [r5, #8]
 8011770:	e7eb      	b.n	801174a <__swsetup_r+0x1e>
 8011772:	4b24      	ldr	r3, [pc, #144]	; (8011804 <__swsetup_r+0xd8>)
 8011774:	429c      	cmp	r4, r3
 8011776:	bf08      	it	eq
 8011778:	68ec      	ldreq	r4, [r5, #12]
 801177a:	e7e6      	b.n	801174a <__swsetup_r+0x1e>
 801177c:	0758      	lsls	r0, r3, #29
 801177e:	d512      	bpl.n	80117a6 <__swsetup_r+0x7a>
 8011780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011782:	b141      	cbz	r1, 8011796 <__swsetup_r+0x6a>
 8011784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011788:	4299      	cmp	r1, r3
 801178a:	d002      	beq.n	8011792 <__swsetup_r+0x66>
 801178c:	4630      	mov	r0, r6
 801178e:	f7ff fb25 	bl	8010ddc <_free_r>
 8011792:	2300      	movs	r3, #0
 8011794:	6363      	str	r3, [r4, #52]	; 0x34
 8011796:	89a3      	ldrh	r3, [r4, #12]
 8011798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801179c:	81a3      	strh	r3, [r4, #12]
 801179e:	2300      	movs	r3, #0
 80117a0:	6063      	str	r3, [r4, #4]
 80117a2:	6923      	ldr	r3, [r4, #16]
 80117a4:	6023      	str	r3, [r4, #0]
 80117a6:	89a3      	ldrh	r3, [r4, #12]
 80117a8:	f043 0308 	orr.w	r3, r3, #8
 80117ac:	81a3      	strh	r3, [r4, #12]
 80117ae:	6923      	ldr	r3, [r4, #16]
 80117b0:	b94b      	cbnz	r3, 80117c6 <__swsetup_r+0x9a>
 80117b2:	89a3      	ldrh	r3, [r4, #12]
 80117b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80117b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117bc:	d003      	beq.n	80117c6 <__swsetup_r+0x9a>
 80117be:	4621      	mov	r1, r4
 80117c0:	4630      	mov	r0, r6
 80117c2:	f000 fa09 	bl	8011bd8 <__smakebuf_r>
 80117c6:	89a0      	ldrh	r0, [r4, #12]
 80117c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117cc:	f010 0301 	ands.w	r3, r0, #1
 80117d0:	d00a      	beq.n	80117e8 <__swsetup_r+0xbc>
 80117d2:	2300      	movs	r3, #0
 80117d4:	60a3      	str	r3, [r4, #8]
 80117d6:	6963      	ldr	r3, [r4, #20]
 80117d8:	425b      	negs	r3, r3
 80117da:	61a3      	str	r3, [r4, #24]
 80117dc:	6923      	ldr	r3, [r4, #16]
 80117de:	b943      	cbnz	r3, 80117f2 <__swsetup_r+0xc6>
 80117e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80117e4:	d1ba      	bne.n	801175c <__swsetup_r+0x30>
 80117e6:	bd70      	pop	{r4, r5, r6, pc}
 80117e8:	0781      	lsls	r1, r0, #30
 80117ea:	bf58      	it	pl
 80117ec:	6963      	ldrpl	r3, [r4, #20]
 80117ee:	60a3      	str	r3, [r4, #8]
 80117f0:	e7f4      	b.n	80117dc <__swsetup_r+0xb0>
 80117f2:	2000      	movs	r0, #0
 80117f4:	e7f7      	b.n	80117e6 <__swsetup_r+0xba>
 80117f6:	bf00      	nop
 80117f8:	20000010 	.word	0x20000010
 80117fc:	0801249c 	.word	0x0801249c
 8011800:	080124bc 	.word	0x080124bc
 8011804:	0801247c 	.word	0x0801247c

08011808 <abort>:
 8011808:	b508      	push	{r3, lr}
 801180a:	2006      	movs	r0, #6
 801180c:	f000 fa54 	bl	8011cb8 <raise>
 8011810:	2001      	movs	r0, #1
 8011812:	f7f1 f811 	bl	8002838 <_exit>
	...

08011818 <__sflush_r>:
 8011818:	898a      	ldrh	r2, [r1, #12]
 801181a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801181e:	4605      	mov	r5, r0
 8011820:	0710      	lsls	r0, r2, #28
 8011822:	460c      	mov	r4, r1
 8011824:	d458      	bmi.n	80118d8 <__sflush_r+0xc0>
 8011826:	684b      	ldr	r3, [r1, #4]
 8011828:	2b00      	cmp	r3, #0
 801182a:	dc05      	bgt.n	8011838 <__sflush_r+0x20>
 801182c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801182e:	2b00      	cmp	r3, #0
 8011830:	dc02      	bgt.n	8011838 <__sflush_r+0x20>
 8011832:	2000      	movs	r0, #0
 8011834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801183a:	2e00      	cmp	r6, #0
 801183c:	d0f9      	beq.n	8011832 <__sflush_r+0x1a>
 801183e:	2300      	movs	r3, #0
 8011840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011844:	682f      	ldr	r7, [r5, #0]
 8011846:	602b      	str	r3, [r5, #0]
 8011848:	d032      	beq.n	80118b0 <__sflush_r+0x98>
 801184a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801184c:	89a3      	ldrh	r3, [r4, #12]
 801184e:	075a      	lsls	r2, r3, #29
 8011850:	d505      	bpl.n	801185e <__sflush_r+0x46>
 8011852:	6863      	ldr	r3, [r4, #4]
 8011854:	1ac0      	subs	r0, r0, r3
 8011856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011858:	b10b      	cbz	r3, 801185e <__sflush_r+0x46>
 801185a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801185c:	1ac0      	subs	r0, r0, r3
 801185e:	2300      	movs	r3, #0
 8011860:	4602      	mov	r2, r0
 8011862:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011864:	6a21      	ldr	r1, [r4, #32]
 8011866:	4628      	mov	r0, r5
 8011868:	47b0      	blx	r6
 801186a:	1c43      	adds	r3, r0, #1
 801186c:	89a3      	ldrh	r3, [r4, #12]
 801186e:	d106      	bne.n	801187e <__sflush_r+0x66>
 8011870:	6829      	ldr	r1, [r5, #0]
 8011872:	291d      	cmp	r1, #29
 8011874:	d82c      	bhi.n	80118d0 <__sflush_r+0xb8>
 8011876:	4a2a      	ldr	r2, [pc, #168]	; (8011920 <__sflush_r+0x108>)
 8011878:	40ca      	lsrs	r2, r1
 801187a:	07d6      	lsls	r6, r2, #31
 801187c:	d528      	bpl.n	80118d0 <__sflush_r+0xb8>
 801187e:	2200      	movs	r2, #0
 8011880:	6062      	str	r2, [r4, #4]
 8011882:	04d9      	lsls	r1, r3, #19
 8011884:	6922      	ldr	r2, [r4, #16]
 8011886:	6022      	str	r2, [r4, #0]
 8011888:	d504      	bpl.n	8011894 <__sflush_r+0x7c>
 801188a:	1c42      	adds	r2, r0, #1
 801188c:	d101      	bne.n	8011892 <__sflush_r+0x7a>
 801188e:	682b      	ldr	r3, [r5, #0]
 8011890:	b903      	cbnz	r3, 8011894 <__sflush_r+0x7c>
 8011892:	6560      	str	r0, [r4, #84]	; 0x54
 8011894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011896:	602f      	str	r7, [r5, #0]
 8011898:	2900      	cmp	r1, #0
 801189a:	d0ca      	beq.n	8011832 <__sflush_r+0x1a>
 801189c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118a0:	4299      	cmp	r1, r3
 80118a2:	d002      	beq.n	80118aa <__sflush_r+0x92>
 80118a4:	4628      	mov	r0, r5
 80118a6:	f7ff fa99 	bl	8010ddc <_free_r>
 80118aa:	2000      	movs	r0, #0
 80118ac:	6360      	str	r0, [r4, #52]	; 0x34
 80118ae:	e7c1      	b.n	8011834 <__sflush_r+0x1c>
 80118b0:	6a21      	ldr	r1, [r4, #32]
 80118b2:	2301      	movs	r3, #1
 80118b4:	4628      	mov	r0, r5
 80118b6:	47b0      	blx	r6
 80118b8:	1c41      	adds	r1, r0, #1
 80118ba:	d1c7      	bne.n	801184c <__sflush_r+0x34>
 80118bc:	682b      	ldr	r3, [r5, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d0c4      	beq.n	801184c <__sflush_r+0x34>
 80118c2:	2b1d      	cmp	r3, #29
 80118c4:	d001      	beq.n	80118ca <__sflush_r+0xb2>
 80118c6:	2b16      	cmp	r3, #22
 80118c8:	d101      	bne.n	80118ce <__sflush_r+0xb6>
 80118ca:	602f      	str	r7, [r5, #0]
 80118cc:	e7b1      	b.n	8011832 <__sflush_r+0x1a>
 80118ce:	89a3      	ldrh	r3, [r4, #12]
 80118d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118d4:	81a3      	strh	r3, [r4, #12]
 80118d6:	e7ad      	b.n	8011834 <__sflush_r+0x1c>
 80118d8:	690f      	ldr	r7, [r1, #16]
 80118da:	2f00      	cmp	r7, #0
 80118dc:	d0a9      	beq.n	8011832 <__sflush_r+0x1a>
 80118de:	0793      	lsls	r3, r2, #30
 80118e0:	680e      	ldr	r6, [r1, #0]
 80118e2:	bf08      	it	eq
 80118e4:	694b      	ldreq	r3, [r1, #20]
 80118e6:	600f      	str	r7, [r1, #0]
 80118e8:	bf18      	it	ne
 80118ea:	2300      	movne	r3, #0
 80118ec:	eba6 0807 	sub.w	r8, r6, r7
 80118f0:	608b      	str	r3, [r1, #8]
 80118f2:	f1b8 0f00 	cmp.w	r8, #0
 80118f6:	dd9c      	ble.n	8011832 <__sflush_r+0x1a>
 80118f8:	6a21      	ldr	r1, [r4, #32]
 80118fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118fc:	4643      	mov	r3, r8
 80118fe:	463a      	mov	r2, r7
 8011900:	4628      	mov	r0, r5
 8011902:	47b0      	blx	r6
 8011904:	2800      	cmp	r0, #0
 8011906:	dc06      	bgt.n	8011916 <__sflush_r+0xfe>
 8011908:	89a3      	ldrh	r3, [r4, #12]
 801190a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801190e:	81a3      	strh	r3, [r4, #12]
 8011910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011914:	e78e      	b.n	8011834 <__sflush_r+0x1c>
 8011916:	4407      	add	r7, r0
 8011918:	eba8 0800 	sub.w	r8, r8, r0
 801191c:	e7e9      	b.n	80118f2 <__sflush_r+0xda>
 801191e:	bf00      	nop
 8011920:	20400001 	.word	0x20400001

08011924 <_fflush_r>:
 8011924:	b538      	push	{r3, r4, r5, lr}
 8011926:	690b      	ldr	r3, [r1, #16]
 8011928:	4605      	mov	r5, r0
 801192a:	460c      	mov	r4, r1
 801192c:	b913      	cbnz	r3, 8011934 <_fflush_r+0x10>
 801192e:	2500      	movs	r5, #0
 8011930:	4628      	mov	r0, r5
 8011932:	bd38      	pop	{r3, r4, r5, pc}
 8011934:	b118      	cbz	r0, 801193e <_fflush_r+0x1a>
 8011936:	6983      	ldr	r3, [r0, #24]
 8011938:	b90b      	cbnz	r3, 801193e <_fflush_r+0x1a>
 801193a:	f000 f887 	bl	8011a4c <__sinit>
 801193e:	4b14      	ldr	r3, [pc, #80]	; (8011990 <_fflush_r+0x6c>)
 8011940:	429c      	cmp	r4, r3
 8011942:	d11b      	bne.n	801197c <_fflush_r+0x58>
 8011944:	686c      	ldr	r4, [r5, #4]
 8011946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d0ef      	beq.n	801192e <_fflush_r+0xa>
 801194e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011950:	07d0      	lsls	r0, r2, #31
 8011952:	d404      	bmi.n	801195e <_fflush_r+0x3a>
 8011954:	0599      	lsls	r1, r3, #22
 8011956:	d402      	bmi.n	801195e <_fflush_r+0x3a>
 8011958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801195a:	f000 f915 	bl	8011b88 <__retarget_lock_acquire_recursive>
 801195e:	4628      	mov	r0, r5
 8011960:	4621      	mov	r1, r4
 8011962:	f7ff ff59 	bl	8011818 <__sflush_r>
 8011966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011968:	07da      	lsls	r2, r3, #31
 801196a:	4605      	mov	r5, r0
 801196c:	d4e0      	bmi.n	8011930 <_fflush_r+0xc>
 801196e:	89a3      	ldrh	r3, [r4, #12]
 8011970:	059b      	lsls	r3, r3, #22
 8011972:	d4dd      	bmi.n	8011930 <_fflush_r+0xc>
 8011974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011976:	f000 f908 	bl	8011b8a <__retarget_lock_release_recursive>
 801197a:	e7d9      	b.n	8011930 <_fflush_r+0xc>
 801197c:	4b05      	ldr	r3, [pc, #20]	; (8011994 <_fflush_r+0x70>)
 801197e:	429c      	cmp	r4, r3
 8011980:	d101      	bne.n	8011986 <_fflush_r+0x62>
 8011982:	68ac      	ldr	r4, [r5, #8]
 8011984:	e7df      	b.n	8011946 <_fflush_r+0x22>
 8011986:	4b04      	ldr	r3, [pc, #16]	; (8011998 <_fflush_r+0x74>)
 8011988:	429c      	cmp	r4, r3
 801198a:	bf08      	it	eq
 801198c:	68ec      	ldreq	r4, [r5, #12]
 801198e:	e7da      	b.n	8011946 <_fflush_r+0x22>
 8011990:	0801249c 	.word	0x0801249c
 8011994:	080124bc 	.word	0x080124bc
 8011998:	0801247c 	.word	0x0801247c

0801199c <std>:
 801199c:	2300      	movs	r3, #0
 801199e:	b510      	push	{r4, lr}
 80119a0:	4604      	mov	r4, r0
 80119a2:	e9c0 3300 	strd	r3, r3, [r0]
 80119a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119aa:	6083      	str	r3, [r0, #8]
 80119ac:	8181      	strh	r1, [r0, #12]
 80119ae:	6643      	str	r3, [r0, #100]	; 0x64
 80119b0:	81c2      	strh	r2, [r0, #14]
 80119b2:	6183      	str	r3, [r0, #24]
 80119b4:	4619      	mov	r1, r3
 80119b6:	2208      	movs	r2, #8
 80119b8:	305c      	adds	r0, #92	; 0x5c
 80119ba:	f7fb fdb7 	bl	800d52c <memset>
 80119be:	4b05      	ldr	r3, [pc, #20]	; (80119d4 <std+0x38>)
 80119c0:	6263      	str	r3, [r4, #36]	; 0x24
 80119c2:	4b05      	ldr	r3, [pc, #20]	; (80119d8 <std+0x3c>)
 80119c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80119c6:	4b05      	ldr	r3, [pc, #20]	; (80119dc <std+0x40>)
 80119c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119ca:	4b05      	ldr	r3, [pc, #20]	; (80119e0 <std+0x44>)
 80119cc:	6224      	str	r4, [r4, #32]
 80119ce:	6323      	str	r3, [r4, #48]	; 0x30
 80119d0:	bd10      	pop	{r4, pc}
 80119d2:	bf00      	nop
 80119d4:	08011cf1 	.word	0x08011cf1
 80119d8:	08011d13 	.word	0x08011d13
 80119dc:	08011d4b 	.word	0x08011d4b
 80119e0:	08011d6f 	.word	0x08011d6f

080119e4 <_cleanup_r>:
 80119e4:	4901      	ldr	r1, [pc, #4]	; (80119ec <_cleanup_r+0x8>)
 80119e6:	f000 b8af 	b.w	8011b48 <_fwalk_reent>
 80119ea:	bf00      	nop
 80119ec:	08011925 	.word	0x08011925

080119f0 <__sfmoreglue>:
 80119f0:	b570      	push	{r4, r5, r6, lr}
 80119f2:	2268      	movs	r2, #104	; 0x68
 80119f4:	1e4d      	subs	r5, r1, #1
 80119f6:	4355      	muls	r5, r2
 80119f8:	460e      	mov	r6, r1
 80119fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80119fe:	f7ff fa59 	bl	8010eb4 <_malloc_r>
 8011a02:	4604      	mov	r4, r0
 8011a04:	b140      	cbz	r0, 8011a18 <__sfmoreglue+0x28>
 8011a06:	2100      	movs	r1, #0
 8011a08:	e9c0 1600 	strd	r1, r6, [r0]
 8011a0c:	300c      	adds	r0, #12
 8011a0e:	60a0      	str	r0, [r4, #8]
 8011a10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011a14:	f7fb fd8a 	bl	800d52c <memset>
 8011a18:	4620      	mov	r0, r4
 8011a1a:	bd70      	pop	{r4, r5, r6, pc}

08011a1c <__sfp_lock_acquire>:
 8011a1c:	4801      	ldr	r0, [pc, #4]	; (8011a24 <__sfp_lock_acquire+0x8>)
 8011a1e:	f000 b8b3 	b.w	8011b88 <__retarget_lock_acquire_recursive>
 8011a22:	bf00      	nop
 8011a24:	20001301 	.word	0x20001301

08011a28 <__sfp_lock_release>:
 8011a28:	4801      	ldr	r0, [pc, #4]	; (8011a30 <__sfp_lock_release+0x8>)
 8011a2a:	f000 b8ae 	b.w	8011b8a <__retarget_lock_release_recursive>
 8011a2e:	bf00      	nop
 8011a30:	20001301 	.word	0x20001301

08011a34 <__sinit_lock_acquire>:
 8011a34:	4801      	ldr	r0, [pc, #4]	; (8011a3c <__sinit_lock_acquire+0x8>)
 8011a36:	f000 b8a7 	b.w	8011b88 <__retarget_lock_acquire_recursive>
 8011a3a:	bf00      	nop
 8011a3c:	20001302 	.word	0x20001302

08011a40 <__sinit_lock_release>:
 8011a40:	4801      	ldr	r0, [pc, #4]	; (8011a48 <__sinit_lock_release+0x8>)
 8011a42:	f000 b8a2 	b.w	8011b8a <__retarget_lock_release_recursive>
 8011a46:	bf00      	nop
 8011a48:	20001302 	.word	0x20001302

08011a4c <__sinit>:
 8011a4c:	b510      	push	{r4, lr}
 8011a4e:	4604      	mov	r4, r0
 8011a50:	f7ff fff0 	bl	8011a34 <__sinit_lock_acquire>
 8011a54:	69a3      	ldr	r3, [r4, #24]
 8011a56:	b11b      	cbz	r3, 8011a60 <__sinit+0x14>
 8011a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a5c:	f7ff bff0 	b.w	8011a40 <__sinit_lock_release>
 8011a60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011a64:	6523      	str	r3, [r4, #80]	; 0x50
 8011a66:	4b13      	ldr	r3, [pc, #76]	; (8011ab4 <__sinit+0x68>)
 8011a68:	4a13      	ldr	r2, [pc, #76]	; (8011ab8 <__sinit+0x6c>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011a6e:	42a3      	cmp	r3, r4
 8011a70:	bf04      	itt	eq
 8011a72:	2301      	moveq	r3, #1
 8011a74:	61a3      	streq	r3, [r4, #24]
 8011a76:	4620      	mov	r0, r4
 8011a78:	f000 f820 	bl	8011abc <__sfp>
 8011a7c:	6060      	str	r0, [r4, #4]
 8011a7e:	4620      	mov	r0, r4
 8011a80:	f000 f81c 	bl	8011abc <__sfp>
 8011a84:	60a0      	str	r0, [r4, #8]
 8011a86:	4620      	mov	r0, r4
 8011a88:	f000 f818 	bl	8011abc <__sfp>
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	60e0      	str	r0, [r4, #12]
 8011a90:	2104      	movs	r1, #4
 8011a92:	6860      	ldr	r0, [r4, #4]
 8011a94:	f7ff ff82 	bl	801199c <std>
 8011a98:	68a0      	ldr	r0, [r4, #8]
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	2109      	movs	r1, #9
 8011a9e:	f7ff ff7d 	bl	801199c <std>
 8011aa2:	68e0      	ldr	r0, [r4, #12]
 8011aa4:	2202      	movs	r2, #2
 8011aa6:	2112      	movs	r1, #18
 8011aa8:	f7ff ff78 	bl	801199c <std>
 8011aac:	2301      	movs	r3, #1
 8011aae:	61a3      	str	r3, [r4, #24]
 8011ab0:	e7d2      	b.n	8011a58 <__sinit+0xc>
 8011ab2:	bf00      	nop
 8011ab4:	08012134 	.word	0x08012134
 8011ab8:	080119e5 	.word	0x080119e5

08011abc <__sfp>:
 8011abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011abe:	4607      	mov	r7, r0
 8011ac0:	f7ff ffac 	bl	8011a1c <__sfp_lock_acquire>
 8011ac4:	4b1e      	ldr	r3, [pc, #120]	; (8011b40 <__sfp+0x84>)
 8011ac6:	681e      	ldr	r6, [r3, #0]
 8011ac8:	69b3      	ldr	r3, [r6, #24]
 8011aca:	b913      	cbnz	r3, 8011ad2 <__sfp+0x16>
 8011acc:	4630      	mov	r0, r6
 8011ace:	f7ff ffbd 	bl	8011a4c <__sinit>
 8011ad2:	3648      	adds	r6, #72	; 0x48
 8011ad4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ad8:	3b01      	subs	r3, #1
 8011ada:	d503      	bpl.n	8011ae4 <__sfp+0x28>
 8011adc:	6833      	ldr	r3, [r6, #0]
 8011ade:	b30b      	cbz	r3, 8011b24 <__sfp+0x68>
 8011ae0:	6836      	ldr	r6, [r6, #0]
 8011ae2:	e7f7      	b.n	8011ad4 <__sfp+0x18>
 8011ae4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ae8:	b9d5      	cbnz	r5, 8011b20 <__sfp+0x64>
 8011aea:	4b16      	ldr	r3, [pc, #88]	; (8011b44 <__sfp+0x88>)
 8011aec:	60e3      	str	r3, [r4, #12]
 8011aee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011af2:	6665      	str	r5, [r4, #100]	; 0x64
 8011af4:	f000 f847 	bl	8011b86 <__retarget_lock_init_recursive>
 8011af8:	f7ff ff96 	bl	8011a28 <__sfp_lock_release>
 8011afc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011b00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011b04:	6025      	str	r5, [r4, #0]
 8011b06:	61a5      	str	r5, [r4, #24]
 8011b08:	2208      	movs	r2, #8
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011b10:	f7fb fd0c 	bl	800d52c <memset>
 8011b14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011b18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b20:	3468      	adds	r4, #104	; 0x68
 8011b22:	e7d9      	b.n	8011ad8 <__sfp+0x1c>
 8011b24:	2104      	movs	r1, #4
 8011b26:	4638      	mov	r0, r7
 8011b28:	f7ff ff62 	bl	80119f0 <__sfmoreglue>
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	6030      	str	r0, [r6, #0]
 8011b30:	2800      	cmp	r0, #0
 8011b32:	d1d5      	bne.n	8011ae0 <__sfp+0x24>
 8011b34:	f7ff ff78 	bl	8011a28 <__sfp_lock_release>
 8011b38:	230c      	movs	r3, #12
 8011b3a:	603b      	str	r3, [r7, #0]
 8011b3c:	e7ee      	b.n	8011b1c <__sfp+0x60>
 8011b3e:	bf00      	nop
 8011b40:	08012134 	.word	0x08012134
 8011b44:	ffff0001 	.word	0xffff0001

08011b48 <_fwalk_reent>:
 8011b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b4c:	4606      	mov	r6, r0
 8011b4e:	4688      	mov	r8, r1
 8011b50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b54:	2700      	movs	r7, #0
 8011b56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b5a:	f1b9 0901 	subs.w	r9, r9, #1
 8011b5e:	d505      	bpl.n	8011b6c <_fwalk_reent+0x24>
 8011b60:	6824      	ldr	r4, [r4, #0]
 8011b62:	2c00      	cmp	r4, #0
 8011b64:	d1f7      	bne.n	8011b56 <_fwalk_reent+0xe>
 8011b66:	4638      	mov	r0, r7
 8011b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b6c:	89ab      	ldrh	r3, [r5, #12]
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d907      	bls.n	8011b82 <_fwalk_reent+0x3a>
 8011b72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b76:	3301      	adds	r3, #1
 8011b78:	d003      	beq.n	8011b82 <_fwalk_reent+0x3a>
 8011b7a:	4629      	mov	r1, r5
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	47c0      	blx	r8
 8011b80:	4307      	orrs	r7, r0
 8011b82:	3568      	adds	r5, #104	; 0x68
 8011b84:	e7e9      	b.n	8011b5a <_fwalk_reent+0x12>

08011b86 <__retarget_lock_init_recursive>:
 8011b86:	4770      	bx	lr

08011b88 <__retarget_lock_acquire_recursive>:
 8011b88:	4770      	bx	lr

08011b8a <__retarget_lock_release_recursive>:
 8011b8a:	4770      	bx	lr

08011b8c <__swhatbuf_r>:
 8011b8c:	b570      	push	{r4, r5, r6, lr}
 8011b8e:	460e      	mov	r6, r1
 8011b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b94:	2900      	cmp	r1, #0
 8011b96:	b096      	sub	sp, #88	; 0x58
 8011b98:	4614      	mov	r4, r2
 8011b9a:	461d      	mov	r5, r3
 8011b9c:	da08      	bge.n	8011bb0 <__swhatbuf_r+0x24>
 8011b9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	602a      	str	r2, [r5, #0]
 8011ba6:	061a      	lsls	r2, r3, #24
 8011ba8:	d410      	bmi.n	8011bcc <__swhatbuf_r+0x40>
 8011baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011bae:	e00e      	b.n	8011bce <__swhatbuf_r+0x42>
 8011bb0:	466a      	mov	r2, sp
 8011bb2:	f000 f903 	bl	8011dbc <_fstat_r>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	dbf1      	blt.n	8011b9e <__swhatbuf_r+0x12>
 8011bba:	9a01      	ldr	r2, [sp, #4]
 8011bbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011bc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011bc4:	425a      	negs	r2, r3
 8011bc6:	415a      	adcs	r2, r3
 8011bc8:	602a      	str	r2, [r5, #0]
 8011bca:	e7ee      	b.n	8011baa <__swhatbuf_r+0x1e>
 8011bcc:	2340      	movs	r3, #64	; 0x40
 8011bce:	2000      	movs	r0, #0
 8011bd0:	6023      	str	r3, [r4, #0]
 8011bd2:	b016      	add	sp, #88	; 0x58
 8011bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011bd8 <__smakebuf_r>:
 8011bd8:	898b      	ldrh	r3, [r1, #12]
 8011bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bdc:	079d      	lsls	r5, r3, #30
 8011bde:	4606      	mov	r6, r0
 8011be0:	460c      	mov	r4, r1
 8011be2:	d507      	bpl.n	8011bf4 <__smakebuf_r+0x1c>
 8011be4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011be8:	6023      	str	r3, [r4, #0]
 8011bea:	6123      	str	r3, [r4, #16]
 8011bec:	2301      	movs	r3, #1
 8011bee:	6163      	str	r3, [r4, #20]
 8011bf0:	b002      	add	sp, #8
 8011bf2:	bd70      	pop	{r4, r5, r6, pc}
 8011bf4:	ab01      	add	r3, sp, #4
 8011bf6:	466a      	mov	r2, sp
 8011bf8:	f7ff ffc8 	bl	8011b8c <__swhatbuf_r>
 8011bfc:	9900      	ldr	r1, [sp, #0]
 8011bfe:	4605      	mov	r5, r0
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7ff f957 	bl	8010eb4 <_malloc_r>
 8011c06:	b948      	cbnz	r0, 8011c1c <__smakebuf_r+0x44>
 8011c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c0c:	059a      	lsls	r2, r3, #22
 8011c0e:	d4ef      	bmi.n	8011bf0 <__smakebuf_r+0x18>
 8011c10:	f023 0303 	bic.w	r3, r3, #3
 8011c14:	f043 0302 	orr.w	r3, r3, #2
 8011c18:	81a3      	strh	r3, [r4, #12]
 8011c1a:	e7e3      	b.n	8011be4 <__smakebuf_r+0xc>
 8011c1c:	4b0d      	ldr	r3, [pc, #52]	; (8011c54 <__smakebuf_r+0x7c>)
 8011c1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c20:	89a3      	ldrh	r3, [r4, #12]
 8011c22:	6020      	str	r0, [r4, #0]
 8011c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c28:	81a3      	strh	r3, [r4, #12]
 8011c2a:	9b00      	ldr	r3, [sp, #0]
 8011c2c:	6163      	str	r3, [r4, #20]
 8011c2e:	9b01      	ldr	r3, [sp, #4]
 8011c30:	6120      	str	r0, [r4, #16]
 8011c32:	b15b      	cbz	r3, 8011c4c <__smakebuf_r+0x74>
 8011c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c38:	4630      	mov	r0, r6
 8011c3a:	f000 f8d1 	bl	8011de0 <_isatty_r>
 8011c3e:	b128      	cbz	r0, 8011c4c <__smakebuf_r+0x74>
 8011c40:	89a3      	ldrh	r3, [r4, #12]
 8011c42:	f023 0303 	bic.w	r3, r3, #3
 8011c46:	f043 0301 	orr.w	r3, r3, #1
 8011c4a:	81a3      	strh	r3, [r4, #12]
 8011c4c:	89a0      	ldrh	r0, [r4, #12]
 8011c4e:	4305      	orrs	r5, r0
 8011c50:	81a5      	strh	r5, [r4, #12]
 8011c52:	e7cd      	b.n	8011bf0 <__smakebuf_r+0x18>
 8011c54:	080119e5 	.word	0x080119e5

08011c58 <_malloc_usable_size_r>:
 8011c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c5c:	1f18      	subs	r0, r3, #4
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	bfbc      	itt	lt
 8011c62:	580b      	ldrlt	r3, [r1, r0]
 8011c64:	18c0      	addlt	r0, r0, r3
 8011c66:	4770      	bx	lr

08011c68 <_raise_r>:
 8011c68:	291f      	cmp	r1, #31
 8011c6a:	b538      	push	{r3, r4, r5, lr}
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	460d      	mov	r5, r1
 8011c70:	d904      	bls.n	8011c7c <_raise_r+0x14>
 8011c72:	2316      	movs	r3, #22
 8011c74:	6003      	str	r3, [r0, #0]
 8011c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c7a:	bd38      	pop	{r3, r4, r5, pc}
 8011c7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011c7e:	b112      	cbz	r2, 8011c86 <_raise_r+0x1e>
 8011c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c84:	b94b      	cbnz	r3, 8011c9a <_raise_r+0x32>
 8011c86:	4620      	mov	r0, r4
 8011c88:	f000 f830 	bl	8011cec <_getpid_r>
 8011c8c:	462a      	mov	r2, r5
 8011c8e:	4601      	mov	r1, r0
 8011c90:	4620      	mov	r0, r4
 8011c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c96:	f000 b817 	b.w	8011cc8 <_kill_r>
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d00a      	beq.n	8011cb4 <_raise_r+0x4c>
 8011c9e:	1c59      	adds	r1, r3, #1
 8011ca0:	d103      	bne.n	8011caa <_raise_r+0x42>
 8011ca2:	2316      	movs	r3, #22
 8011ca4:	6003      	str	r3, [r0, #0]
 8011ca6:	2001      	movs	r0, #1
 8011ca8:	e7e7      	b.n	8011c7a <_raise_r+0x12>
 8011caa:	2400      	movs	r4, #0
 8011cac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	4798      	blx	r3
 8011cb4:	2000      	movs	r0, #0
 8011cb6:	e7e0      	b.n	8011c7a <_raise_r+0x12>

08011cb8 <raise>:
 8011cb8:	4b02      	ldr	r3, [pc, #8]	; (8011cc4 <raise+0xc>)
 8011cba:	4601      	mov	r1, r0
 8011cbc:	6818      	ldr	r0, [r3, #0]
 8011cbe:	f7ff bfd3 	b.w	8011c68 <_raise_r>
 8011cc2:	bf00      	nop
 8011cc4:	20000010 	.word	0x20000010

08011cc8 <_kill_r>:
 8011cc8:	b538      	push	{r3, r4, r5, lr}
 8011cca:	4d07      	ldr	r5, [pc, #28]	; (8011ce8 <_kill_r+0x20>)
 8011ccc:	2300      	movs	r3, #0
 8011cce:	4604      	mov	r4, r0
 8011cd0:	4608      	mov	r0, r1
 8011cd2:	4611      	mov	r1, r2
 8011cd4:	602b      	str	r3, [r5, #0]
 8011cd6:	f7f0 fd9f 	bl	8002818 <_kill>
 8011cda:	1c43      	adds	r3, r0, #1
 8011cdc:	d102      	bne.n	8011ce4 <_kill_r+0x1c>
 8011cde:	682b      	ldr	r3, [r5, #0]
 8011ce0:	b103      	cbz	r3, 8011ce4 <_kill_r+0x1c>
 8011ce2:	6023      	str	r3, [r4, #0]
 8011ce4:	bd38      	pop	{r3, r4, r5, pc}
 8011ce6:	bf00      	nop
 8011ce8:	200012fc 	.word	0x200012fc

08011cec <_getpid_r>:
 8011cec:	f7f0 bd8c 	b.w	8002808 <_getpid>

08011cf0 <__sread>:
 8011cf0:	b510      	push	{r4, lr}
 8011cf2:	460c      	mov	r4, r1
 8011cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cf8:	f000 f894 	bl	8011e24 <_read_r>
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	bfab      	itete	ge
 8011d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d02:	89a3      	ldrhlt	r3, [r4, #12]
 8011d04:	181b      	addge	r3, r3, r0
 8011d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d0a:	bfac      	ite	ge
 8011d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d0e:	81a3      	strhlt	r3, [r4, #12]
 8011d10:	bd10      	pop	{r4, pc}

08011d12 <__swrite>:
 8011d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d16:	461f      	mov	r7, r3
 8011d18:	898b      	ldrh	r3, [r1, #12]
 8011d1a:	05db      	lsls	r3, r3, #23
 8011d1c:	4605      	mov	r5, r0
 8011d1e:	460c      	mov	r4, r1
 8011d20:	4616      	mov	r6, r2
 8011d22:	d505      	bpl.n	8011d30 <__swrite+0x1e>
 8011d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d28:	2302      	movs	r3, #2
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f000 f868 	bl	8011e00 <_lseek_r>
 8011d30:	89a3      	ldrh	r3, [r4, #12]
 8011d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d3a:	81a3      	strh	r3, [r4, #12]
 8011d3c:	4632      	mov	r2, r6
 8011d3e:	463b      	mov	r3, r7
 8011d40:	4628      	mov	r0, r5
 8011d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d46:	f000 b817 	b.w	8011d78 <_write_r>

08011d4a <__sseek>:
 8011d4a:	b510      	push	{r4, lr}
 8011d4c:	460c      	mov	r4, r1
 8011d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d52:	f000 f855 	bl	8011e00 <_lseek_r>
 8011d56:	1c43      	adds	r3, r0, #1
 8011d58:	89a3      	ldrh	r3, [r4, #12]
 8011d5a:	bf15      	itete	ne
 8011d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d66:	81a3      	strheq	r3, [r4, #12]
 8011d68:	bf18      	it	ne
 8011d6a:	81a3      	strhne	r3, [r4, #12]
 8011d6c:	bd10      	pop	{r4, pc}

08011d6e <__sclose>:
 8011d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d72:	f000 b813 	b.w	8011d9c <_close_r>
	...

08011d78 <_write_r>:
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	4d07      	ldr	r5, [pc, #28]	; (8011d98 <_write_r+0x20>)
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	4608      	mov	r0, r1
 8011d80:	4611      	mov	r1, r2
 8011d82:	2200      	movs	r2, #0
 8011d84:	602a      	str	r2, [r5, #0]
 8011d86:	461a      	mov	r2, r3
 8011d88:	f7f0 fd7d 	bl	8002886 <_write>
 8011d8c:	1c43      	adds	r3, r0, #1
 8011d8e:	d102      	bne.n	8011d96 <_write_r+0x1e>
 8011d90:	682b      	ldr	r3, [r5, #0]
 8011d92:	b103      	cbz	r3, 8011d96 <_write_r+0x1e>
 8011d94:	6023      	str	r3, [r4, #0]
 8011d96:	bd38      	pop	{r3, r4, r5, pc}
 8011d98:	200012fc 	.word	0x200012fc

08011d9c <_close_r>:
 8011d9c:	b538      	push	{r3, r4, r5, lr}
 8011d9e:	4d06      	ldr	r5, [pc, #24]	; (8011db8 <_close_r+0x1c>)
 8011da0:	2300      	movs	r3, #0
 8011da2:	4604      	mov	r4, r0
 8011da4:	4608      	mov	r0, r1
 8011da6:	602b      	str	r3, [r5, #0]
 8011da8:	f7f0 fd89 	bl	80028be <_close>
 8011dac:	1c43      	adds	r3, r0, #1
 8011dae:	d102      	bne.n	8011db6 <_close_r+0x1a>
 8011db0:	682b      	ldr	r3, [r5, #0]
 8011db2:	b103      	cbz	r3, 8011db6 <_close_r+0x1a>
 8011db4:	6023      	str	r3, [r4, #0]
 8011db6:	bd38      	pop	{r3, r4, r5, pc}
 8011db8:	200012fc 	.word	0x200012fc

08011dbc <_fstat_r>:
 8011dbc:	b538      	push	{r3, r4, r5, lr}
 8011dbe:	4d07      	ldr	r5, [pc, #28]	; (8011ddc <_fstat_r+0x20>)
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	4608      	mov	r0, r1
 8011dc6:	4611      	mov	r1, r2
 8011dc8:	602b      	str	r3, [r5, #0]
 8011dca:	f7f0 fd84 	bl	80028d6 <_fstat>
 8011dce:	1c43      	adds	r3, r0, #1
 8011dd0:	d102      	bne.n	8011dd8 <_fstat_r+0x1c>
 8011dd2:	682b      	ldr	r3, [r5, #0]
 8011dd4:	b103      	cbz	r3, 8011dd8 <_fstat_r+0x1c>
 8011dd6:	6023      	str	r3, [r4, #0]
 8011dd8:	bd38      	pop	{r3, r4, r5, pc}
 8011dda:	bf00      	nop
 8011ddc:	200012fc 	.word	0x200012fc

08011de0 <_isatty_r>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	4d06      	ldr	r5, [pc, #24]	; (8011dfc <_isatty_r+0x1c>)
 8011de4:	2300      	movs	r3, #0
 8011de6:	4604      	mov	r4, r0
 8011de8:	4608      	mov	r0, r1
 8011dea:	602b      	str	r3, [r5, #0]
 8011dec:	f7f0 fd83 	bl	80028f6 <_isatty>
 8011df0:	1c43      	adds	r3, r0, #1
 8011df2:	d102      	bne.n	8011dfa <_isatty_r+0x1a>
 8011df4:	682b      	ldr	r3, [r5, #0]
 8011df6:	b103      	cbz	r3, 8011dfa <_isatty_r+0x1a>
 8011df8:	6023      	str	r3, [r4, #0]
 8011dfa:	bd38      	pop	{r3, r4, r5, pc}
 8011dfc:	200012fc 	.word	0x200012fc

08011e00 <_lseek_r>:
 8011e00:	b538      	push	{r3, r4, r5, lr}
 8011e02:	4d07      	ldr	r5, [pc, #28]	; (8011e20 <_lseek_r+0x20>)
 8011e04:	4604      	mov	r4, r0
 8011e06:	4608      	mov	r0, r1
 8011e08:	4611      	mov	r1, r2
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	602a      	str	r2, [r5, #0]
 8011e0e:	461a      	mov	r2, r3
 8011e10:	f7f0 fd7c 	bl	800290c <_lseek>
 8011e14:	1c43      	adds	r3, r0, #1
 8011e16:	d102      	bne.n	8011e1e <_lseek_r+0x1e>
 8011e18:	682b      	ldr	r3, [r5, #0]
 8011e1a:	b103      	cbz	r3, 8011e1e <_lseek_r+0x1e>
 8011e1c:	6023      	str	r3, [r4, #0]
 8011e1e:	bd38      	pop	{r3, r4, r5, pc}
 8011e20:	200012fc 	.word	0x200012fc

08011e24 <_read_r>:
 8011e24:	b538      	push	{r3, r4, r5, lr}
 8011e26:	4d07      	ldr	r5, [pc, #28]	; (8011e44 <_read_r+0x20>)
 8011e28:	4604      	mov	r4, r0
 8011e2a:	4608      	mov	r0, r1
 8011e2c:	4611      	mov	r1, r2
 8011e2e:	2200      	movs	r2, #0
 8011e30:	602a      	str	r2, [r5, #0]
 8011e32:	461a      	mov	r2, r3
 8011e34:	f7f0 fd0a 	bl	800284c <_read>
 8011e38:	1c43      	adds	r3, r0, #1
 8011e3a:	d102      	bne.n	8011e42 <_read_r+0x1e>
 8011e3c:	682b      	ldr	r3, [r5, #0]
 8011e3e:	b103      	cbz	r3, 8011e42 <_read_r+0x1e>
 8011e40:	6023      	str	r3, [r4, #0]
 8011e42:	bd38      	pop	{r3, r4, r5, pc}
 8011e44:	200012fc 	.word	0x200012fc

08011e48 <_init>:
 8011e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e4a:	bf00      	nop
 8011e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e4e:	bc08      	pop	{r3}
 8011e50:	469e      	mov	lr, r3
 8011e52:	4770      	bx	lr

08011e54 <_fini>:
 8011e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e56:	bf00      	nop
 8011e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e5a:	bc08      	pop	{r3}
 8011e5c:	469e      	mov	lr, r3
 8011e5e:	4770      	bx	lr
